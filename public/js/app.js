/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 16);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(5).nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).setImmediate, __webpack_require__(0).clearImmediate))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz9iMDg4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBuZXh0VGljayA9IHJlcXVpcmUoJ3Byb2Nlc3MvYnJvd3Nlci5qcycpLm5leHRUaWNrO1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGltbWVkaWF0ZUlkcyA9IHt9O1xudmFyIG5leHRJbW1lZGlhdGVJZCA9IDA7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7IHRpbWVvdXQuY2xvc2UoKTsgfTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbCh3aW5kb3csIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBUaGF0J3Mgbm90IGhvdyBub2RlLmpzIGltcGxlbWVudHMgaXQgYnV0IHRoZSBleHBvc2VkIGFwaSBpcyB0aGUgc2FtZS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gXCJmdW5jdGlvblwiID8gc2V0SW1tZWRpYXRlIDogZnVuY3Rpb24oZm4pIHtcbiAgdmFyIGlkID0gbmV4dEltbWVkaWF0ZUlkKys7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBmYWxzZSA6IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICBpbW1lZGlhdGVJZHNbaWRdID0gdHJ1ZTtcblxuICBuZXh0VGljayhmdW5jdGlvbiBvbk5leHRUaWNrKCkge1xuICAgIGlmIChpbW1lZGlhdGVJZHNbaWRdKSB7XG4gICAgICAvLyBmbi5jYWxsKCkgaXMgZmFzdGVyIHNvIHdlIG9wdGltaXplIGZvciB0aGUgY29tbW9uIHVzZS1jYXNlXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2NhbGwtYXBwbHktc2VndVxuICAgICAgaWYgKGFyZ3MpIHtcbiAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbi5jYWxsKG51bGwpO1xuICAgICAgfVxuICAgICAgLy8gUHJldmVudCBpZHMgZnJvbSBsZWFraW5nXG4gICAgICBleHBvcnRzLmNsZWFySW1tZWRpYXRlKGlkKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBpZDtcbn07XG5cbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSB0eXBlb2YgY2xlYXJJbW1lZGlhdGUgPT09IFwiZnVuY3Rpb25cIiA/IGNsZWFySW1tZWRpYXRlIDogZnVuY3Rpb24oaWQpIHtcbiAgZGVsZXRlIGltbWVkaWF0ZUlkc1tpZF07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

eval("var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = __webpack_require__(7)\n\n/* template */\nvar __vue_template__ = __webpack_require__(11)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\nif (Object.keys(__vue_exports__).some(function (key) { return key !== \"default\" && key !== \"__esModule\" })) {console.error(\"named exports are not supported in *.vue files.\")}\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n__vue_options__.__file = \"/home/nicolas/Escritorio/europeLanguaje/europe/resources/assets/js/components/CreateDog.vue\"\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-012de332\", __vue_options__)\n  } else {\n    hotAPI.reload(\"data-v-012de332\", __vue_options__)\n  }\n})()}\nif (__vue_options__.functional) {console.error(\"[vue-loader] CreateDog.vue: functional components are not supported and should be defined in plain js files using render functions.\")}\n\nmodule.exports = __vue_exports__\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9DcmVhdGVEb2cudnVlPzdiMDYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fdnVlX2V4cG9ydHNfXywgX192dWVfb3B0aW9uc19fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuXG4vKiBzY3JpcHQgKi9cbl9fdnVlX2V4cG9ydHNfXyA9IHJlcXVpcmUoXCIhIWJ1YmxlLWxvYWRlciF2dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQ3JlYXRlRG9nLnZ1ZVwiKVxuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj9pZD1kYXRhLXYtMDEyZGUzMzIhdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQ3JlYXRlRG9nLnZ1ZVwiKVxuX192dWVfb3B0aW9uc19fID0gX192dWVfZXhwb3J0c19fID0gX192dWVfZXhwb3J0c19fIHx8IHt9XG5pZiAoXG4gIHR5cGVvZiBfX3Z1ZV9leHBvcnRzX18uZGVmYXVsdCA9PT0gXCJvYmplY3RcIiB8fFxuICB0eXBlb2YgX192dWVfZXhwb3J0c19fLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIlxuKSB7XG5pZiAoT2JqZWN0LmtleXMoX192dWVfZXhwb3J0c19fKS5zb21lKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIiB9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbl9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX2V4cG9ydHNfXyA9IF9fdnVlX2V4cG9ydHNfXy5kZWZhdWx0XG59XG5pZiAodHlwZW9mIF9fdnVlX29wdGlvbnNfXyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIF9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX29wdGlvbnNfXy5vcHRpb25zXG59XG5fX3Z1ZV9vcHRpb25zX18uX19maWxlID0gXCIvaG9tZS9uaWNvbGFzL0VzY3JpdG9yaW8vZXVyb3BlTGFuZ3VhamUvZXVyb3BlL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9DcmVhdGVEb2cudnVlXCJcbl9fdnVlX29wdGlvbnNfXy5yZW5kZXIgPSBfX3Z1ZV90ZW1wbGF0ZV9fLnJlbmRlclxuX192dWVfb3B0aW9uc19fLnN0YXRpY1JlbmRlckZucyA9IF9fdnVlX3RlbXBsYXRlX18uc3RhdGljUmVuZGVyRm5zXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi0wMTJkZTMzMlwiLCBfX3Z1ZV9vcHRpb25zX18pXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi0wMTJkZTMzMlwiLCBfX3Z1ZV9vcHRpb25zX18pXG4gIH1cbn0pKCl9XG5pZiAoX192dWVfb3B0aW9uc19fLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIENyZWF0ZURvZy52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCBhbmQgc2hvdWxkIGJlIGRlZmluZWQgaW4gcGxhaW4ganMgZmlsZXMgdXNpbmcgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbm1vZHVsZS5leHBvcnRzID0gX192dWVfZXhwb3J0c19fXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9DcmVhdGVEb2cudnVlXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

eval("var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = __webpack_require__(8)\n\n/* template */\nvar __vue_template__ = __webpack_require__(12)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\nif (Object.keys(__vue_exports__).some(function (key) { return key !== \"default\" && key !== \"__esModule\" })) {console.error(\"named exports are not supported in *.vue files.\")}\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n__vue_options__.__file = \"/home/nicolas/Escritorio/europeLanguaje/europe/resources/assets/js/components/EditDog.vue\"\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-08c79559\", __vue_options__)\n  } else {\n    hotAPI.reload(\"data-v-08c79559\", __vue_options__)\n  }\n})()}\nif (__vue_options__.functional) {console.error(\"[vue-loader] EditDog.vue: functional components are not supported and should be defined in plain js files using render functions.\")}\n\nmodule.exports = __vue_exports__\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9FZGl0RG9nLnZ1ZT9jNGIxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Z1ZV9leHBvcnRzX18sIF9fdnVlX29wdGlvbnNfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cblxuLyogc2NyaXB0ICovXG5fX3Z1ZV9leHBvcnRzX18gPSByZXF1aXJlKFwiISFidWJsZS1sb2FkZXIhdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0VkaXREb2cudnVlXCIpXG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP2lkPWRhdGEtdi0wOGM3OTU1OSF2dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9FZGl0RG9nLnZ1ZVwiKVxuX192dWVfb3B0aW9uc19fID0gX192dWVfZXhwb3J0c19fID0gX192dWVfZXhwb3J0c19fIHx8IHt9XG5pZiAoXG4gIHR5cGVvZiBfX3Z1ZV9leHBvcnRzX18uZGVmYXVsdCA9PT0gXCJvYmplY3RcIiB8fFxuICB0eXBlb2YgX192dWVfZXhwb3J0c19fLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIlxuKSB7XG5pZiAoT2JqZWN0LmtleXMoX192dWVfZXhwb3J0c19fKS5zb21lKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIiB9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbl9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX2V4cG9ydHNfXyA9IF9fdnVlX2V4cG9ydHNfXy5kZWZhdWx0XG59XG5pZiAodHlwZW9mIF9fdnVlX29wdGlvbnNfXyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIF9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX29wdGlvbnNfXy5vcHRpb25zXG59XG5fX3Z1ZV9vcHRpb25zX18uX19maWxlID0gXCIvaG9tZS9uaWNvbGFzL0VzY3JpdG9yaW8vZXVyb3BlTGFuZ3VhamUvZXVyb3BlL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9FZGl0RG9nLnZ1ZVwiXG5fX3Z1ZV9vcHRpb25zX18ucmVuZGVyID0gX192dWVfdGVtcGxhdGVfXy5yZW5kZXJcbl9fdnVlX29wdGlvbnNfXy5zdGF0aWNSZW5kZXJGbnMgPSBfX3Z1ZV90ZW1wbGF0ZV9fLnN0YXRpY1JlbmRlckZuc1xuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtMDhjNzk1NTlcIiwgX192dWVfb3B0aW9uc19fKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtMDhjNzk1NTlcIiwgX192dWVfb3B0aW9uc19fKVxuICB9XG59KSgpfVxuaWYgKF9fdnVlX29wdGlvbnNfXy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBFZGl0RG9nLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIGFuZCBzaG91bGQgYmUgZGVmaW5lZCBpbiBwbGFpbiBqcyBmaWxlcyB1c2luZyByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9leHBvcnRzX19cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL0VkaXREb2cudnVlXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

eval("var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = __webpack_require__(9)\n\n/* template */\nvar __vue_template__ = __webpack_require__(13)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\nif (Object.keys(__vue_exports__).some(function (key) { return key !== \"default\" && key !== \"__esModule\" })) {console.error(\"named exports are not supported in *.vue files.\")}\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n__vue_options__.__file = \"/home/nicolas/Escritorio/europeLanguaje/europe/resources/assets/js/components/ListDog.vue\"\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-a9b7f776\", __vue_options__)\n  } else {\n    hotAPI.reload(\"data-v-a9b7f776\", __vue_options__)\n  }\n})()}\nif (__vue_options__.functional) {console.error(\"[vue-loader] ListDog.vue: functional components are not supported and should be defined in plain js files using render functions.\")}\n\nmodule.exports = __vue_exports__\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9MaXN0RG9nLnZ1ZT9hOWVkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Z1ZV9leHBvcnRzX18sIF9fdnVlX29wdGlvbnNfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cblxuLyogc2NyaXB0ICovXG5fX3Z1ZV9leHBvcnRzX18gPSByZXF1aXJlKFwiISFidWJsZS1sb2FkZXIhdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0xpc3REb2cudnVlXCIpXG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP2lkPWRhdGEtdi1hOWI3Zjc3NiF2dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9MaXN0RG9nLnZ1ZVwiKVxuX192dWVfb3B0aW9uc19fID0gX192dWVfZXhwb3J0c19fID0gX192dWVfZXhwb3J0c19fIHx8IHt9XG5pZiAoXG4gIHR5cGVvZiBfX3Z1ZV9leHBvcnRzX18uZGVmYXVsdCA9PT0gXCJvYmplY3RcIiB8fFxuICB0eXBlb2YgX192dWVfZXhwb3J0c19fLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIlxuKSB7XG5pZiAoT2JqZWN0LmtleXMoX192dWVfZXhwb3J0c19fKS5zb21lKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIiB9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbl9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX2V4cG9ydHNfXyA9IF9fdnVlX2V4cG9ydHNfXy5kZWZhdWx0XG59XG5pZiAodHlwZW9mIF9fdnVlX29wdGlvbnNfXyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIF9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX29wdGlvbnNfXy5vcHRpb25zXG59XG5fX3Z1ZV9vcHRpb25zX18uX19maWxlID0gXCIvaG9tZS9uaWNvbGFzL0VzY3JpdG9yaW8vZXVyb3BlTGFuZ3VhamUvZXVyb3BlL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9MaXN0RG9nLnZ1ZVwiXG5fX3Z1ZV9vcHRpb25zX18ucmVuZGVyID0gX192dWVfdGVtcGxhdGVfXy5yZW5kZXJcbl9fdnVlX29wdGlvbnNfXy5zdGF0aWNSZW5kZXJGbnMgPSBfX3Z1ZV90ZW1wbGF0ZV9fLnN0YXRpY1JlbmRlckZuc1xuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtYTliN2Y3NzZcIiwgX192dWVfb3B0aW9uc19fKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtYTliN2Y3NzZcIiwgX192dWVfb3B0aW9uc19fKVxuICB9XG59KSgpfVxuaWYgKF9fdnVlX29wdGlvbnNfXy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBMaXN0RG9nLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIGFuZCBzaG91bGQgYmUgZGVmaW5lZCBpbiBwbGFpbiBqcyBmaWxlcyB1c2luZyByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9leHBvcnRzX19cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL0xpc3REb2cudnVlXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!\n * Vue.js v2.7.14\n * (c) 2014-2022 Evan You\n * Released under the MIT License.\n */\n(function (global, factory) {\n   true ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Vue = factory());\n})(this, (function () { 'use strict';\n\n  var emptyObject = Object.freeze({});\n  var isArray = Array.isArray;\n  // These helpers produce better VM code in JS engines due to their\n  // explicitness and function inlining.\n  function isUndef(v) {\n      return v === undefined || v === null;\n  }\n  function isDef(v) {\n      return v !== undefined && v !== null;\n  }\n  function isTrue(v) {\n      return v === true;\n  }\n  function isFalse(v) {\n      return v === false;\n  }\n  /**\n   * Check if value is primitive.\n   */\n  function isPrimitive(value) {\n      return (typeof value === 'string' ||\n          typeof value === 'number' ||\n          // $flow-disable-line\n          typeof value === 'symbol' ||\n          typeof value === 'boolean');\n  }\n  function isFunction(value) {\n      return typeof value === 'function';\n  }\n  /**\n   * Quick object check - this is primarily used to tell\n   * objects from primitive values when we know the value\n   * is a JSON-compliant type.\n   */\n  function isObject(obj) {\n      return obj !== null && typeof obj === 'object';\n  }\n  /**\n   * Get the raw type string of a value, e.g., [object Object].\n   */\n  var _toString = Object.prototype.toString;\n  function toRawType(value) {\n      return _toString.call(value).slice(8, -1);\n  }\n  /**\n   * Strict object type check. Only returns true\n   * for plain JavaScript objects.\n   */\n  function isPlainObject(obj) {\n      return _toString.call(obj) === '[object Object]';\n  }\n  function isRegExp(v) {\n      return _toString.call(v) === '[object RegExp]';\n  }\n  /**\n   * Check if val is a valid array index.\n   */\n  function isValidArrayIndex(val) {\n      var n = parseFloat(String(val));\n      return n >= 0 && Math.floor(n) === n && isFinite(val);\n  }\n  function isPromise(val) {\n      return (isDef(val) &&\n          typeof val.then === 'function' &&\n          typeof val.catch === 'function');\n  }\n  /**\n   * Convert a value to a string that is actually rendered.\n   */\n  function toString(val) {\n      return val == null\n          ? ''\n          : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n              ? JSON.stringify(val, null, 2)\n              : String(val);\n  }\n  /**\n   * Convert an input value to a number for persistence.\n   * If the conversion fails, return original string.\n   */\n  function toNumber(val) {\n      var n = parseFloat(val);\n      return isNaN(n) ? val : n;\n  }\n  /**\n   * Make a map and return a function for checking if a key\n   * is in that map.\n   */\n  function makeMap(str, expectsLowerCase) {\n      var map = Object.create(null);\n      var list = str.split(',');\n      for (var i = 0; i < list.length; i++) {\n          map[list[i]] = true;\n      }\n      return expectsLowerCase ? function (val) { return map[val.toLowerCase()]; } : function (val) { return map[val]; };\n  }\n  /**\n   * Check if a tag is a built-in tag.\n   */\n  var isBuiltInTag = makeMap('slot,component', true);\n  /**\n   * Check if an attribute is a reserved attribute.\n   */\n  var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n  /**\n   * Remove an item from an array.\n   */\n  function remove$2(arr, item) {\n      var len = arr.length;\n      if (len) {\n          // fast path for the only / last item\n          if (item === arr[len - 1]) {\n              arr.length = len - 1;\n              return;\n          }\n          var index = arr.indexOf(item);\n          if (index > -1) {\n              return arr.splice(index, 1);\n          }\n      }\n  }\n  /**\n   * Check whether an object has the property.\n   */\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  function hasOwn(obj, key) {\n      return hasOwnProperty.call(obj, key);\n  }\n  /**\n   * Create a cached version of a pure function.\n   */\n  function cached(fn) {\n      var cache = Object.create(null);\n      return function cachedFn(str) {\n          var hit = cache[str];\n          return hit || (cache[str] = fn(str));\n      };\n  }\n  /**\n   * Camelize a hyphen-delimited string.\n   */\n  var camelizeRE = /-(\\w)/g;\n  var camelize = cached(function (str) {\n      return str.replace(camelizeRE, function (_, c) { return (c ? c.toUpperCase() : ''); });\n  });\n  /**\n   * Capitalize a string.\n   */\n  var capitalize = cached(function (str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n  });\n  /**\n   * Hyphenate a camelCase string.\n   */\n  var hyphenateRE = /\\B([A-Z])/g;\n  var hyphenate = cached(function (str) {\n      return str.replace(hyphenateRE, '-$1').toLowerCase();\n  });\n  /**\n   * Simple bind polyfill for environments that do not support it,\n   * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n   * since native bind is now performant enough in most browsers.\n   * But removing it would mean breaking code that was able to run in\n   * PhantomJS 1.x, so this must be kept for backward compatibility.\n   */\n  /* istanbul ignore next */\n  function polyfillBind(fn, ctx) {\n      function boundFn(a) {\n          var l = arguments.length;\n          return l\n              ? l > 1\n                  ? fn.apply(ctx, arguments)\n                  : fn.call(ctx, a)\n              : fn.call(ctx);\n      }\n      boundFn._length = fn.length;\n      return boundFn;\n  }\n  function nativeBind(fn, ctx) {\n      return fn.bind(ctx);\n  }\n  // @ts-expect-error bind cannot be `undefined`\n  var bind$1 = Function.prototype.bind ? nativeBind : polyfillBind;\n  /**\n   * Convert an Array-like object to a real Array.\n   */\n  function toArray(list, start) {\n      start = start || 0;\n      var i = list.length - start;\n      var ret = new Array(i);\n      while (i--) {\n          ret[i] = list[i + start];\n      }\n      return ret;\n  }\n  /**\n   * Mix properties into target object.\n   */\n  function extend(to, _from) {\n      for (var key in _from) {\n          to[key] = _from[key];\n      }\n      return to;\n  }\n  /**\n   * Merge an Array of Objects into a single Object.\n   */\n  function toObject(arr) {\n      var res = {};\n      for (var i = 0; i < arr.length; i++) {\n          if (arr[i]) {\n              extend(res, arr[i]);\n          }\n      }\n      return res;\n  }\n  /* eslint-disable no-unused-vars */\n  /**\n   * Perform no operation.\n   * Stubbing args to make Flow happy without leaving useless transpiled code\n   * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n   */\n  function noop(a, b, c) { }\n  /**\n   * Always return false.\n   */\n  var no = function (a, b, c) { return false; };\n  /* eslint-enable no-unused-vars */\n  /**\n   * Return the same value.\n   */\n  var identity = function (_) { return _; };\n  /**\n   * Generate a string containing static keys from compiler modules.\n   */\n  function genStaticKeys$1(modules) {\n      return modules\n          .reduce(function (keys, m) {\n          return keys.concat(m.staticKeys || []);\n      }, [])\n          .join(',');\n  }\n  /**\n   * Check if two values are loosely equal - that is,\n   * if they are plain objects, do they have the same shape?\n   */\n  function looseEqual(a, b) {\n      if (a === b)\n          return true;\n      var isObjectA = isObject(a);\n      var isObjectB = isObject(b);\n      if (isObjectA && isObjectB) {\n          try {\n              var isArrayA = Array.isArray(a);\n              var isArrayB = Array.isArray(b);\n              if (isArrayA && isArrayB) {\n                  return (a.length === b.length &&\n                      a.every(function (e, i) {\n                          return looseEqual(e, b[i]);\n                      }));\n              }\n              else if (a instanceof Date && b instanceof Date) {\n                  return a.getTime() === b.getTime();\n              }\n              else if (!isArrayA && !isArrayB) {\n                  var keysA = Object.keys(a);\n                  var keysB = Object.keys(b);\n                  return (keysA.length === keysB.length &&\n                      keysA.every(function (key) {\n                          return looseEqual(a[key], b[key]);\n                      }));\n              }\n              else {\n                  /* istanbul ignore next */\n                  return false;\n              }\n          }\n          catch (e) {\n              /* istanbul ignore next */\n              return false;\n          }\n      }\n      else if (!isObjectA && !isObjectB) {\n          return String(a) === String(b);\n      }\n      else {\n          return false;\n      }\n  }\n  /**\n   * Return the first index at which a loosely equal value can be\n   * found in the array (if value is a plain object, the array must\n   * contain an object of the same shape), or -1 if it is not present.\n   */\n  function looseIndexOf(arr, val) {\n      for (var i = 0; i < arr.length; i++) {\n          if (looseEqual(arr[i], val))\n              return i;\n      }\n      return -1;\n  }\n  /**\n   * Ensure a function is called only once.\n   */\n  function once(fn) {\n      var called = false;\n      return function () {\n          if (!called) {\n              called = true;\n              fn.apply(this, arguments);\n          }\n      };\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#polyfill\n  function hasChanged(x, y) {\n      if (x === y) {\n          return x === 0 && 1 / x !== 1 / y;\n      }\n      else {\n          return x === x || y === y;\n      }\n  }\n\n  var SSR_ATTR = 'data-server-rendered';\n  var ASSET_TYPES = ['component', 'directive', 'filter'];\n  var LIFECYCLE_HOOKS = [\n      'beforeCreate',\n      'created',\n      'beforeMount',\n      'mounted',\n      'beforeUpdate',\n      'updated',\n      'beforeDestroy',\n      'destroyed',\n      'activated',\n      'deactivated',\n      'errorCaptured',\n      'serverPrefetch',\n      'renderTracked',\n      'renderTriggered'\n  ];\n\n  var config = {\n      /**\n       * Option merge strategies (used in core/util/options)\n       */\n      // $flow-disable-line\n      optionMergeStrategies: Object.create(null),\n      /**\n       * Whether to suppress warnings.\n       */\n      silent: false,\n      /**\n       * Show production mode tip message on boot?\n       */\n      productionTip: true,\n      /**\n       * Whether to enable devtools\n       */\n      devtools: true,\n      /**\n       * Whether to record perf\n       */\n      performance: false,\n      /**\n       * Error handler for watcher errors\n       */\n      errorHandler: null,\n      /**\n       * Warn handler for watcher warns\n       */\n      warnHandler: null,\n      /**\n       * Ignore certain custom elements\n       */\n      ignoredElements: [],\n      /**\n       * Custom user key aliases for v-on\n       */\n      // $flow-disable-line\n      keyCodes: Object.create(null),\n      /**\n       * Check if a tag is reserved so that it cannot be registered as a\n       * component. This is platform-dependent and may be overwritten.\n       */\n      isReservedTag: no,\n      /**\n       * Check if an attribute is reserved so that it cannot be used as a component\n       * prop. This is platform-dependent and may be overwritten.\n       */\n      isReservedAttr: no,\n      /**\n       * Check if a tag is an unknown element.\n       * Platform-dependent.\n       */\n      isUnknownElement: no,\n      /**\n       * Get the namespace of an element\n       */\n      getTagNamespace: noop,\n      /**\n       * Parse the real tag name for the specific platform.\n       */\n      parsePlatformTagName: identity,\n      /**\n       * Check if an attribute must be bound using property, e.g. value\n       * Platform-dependent.\n       */\n      mustUseProp: no,\n      /**\n       * Perform updates asynchronously. Intended to be used by Vue Test Utils\n       * This will significantly reduce performance if set to false.\n       */\n      async: true,\n      /**\n       * Exposed for legacy reasons\n       */\n      _lifecycleHooks: LIFECYCLE_HOOKS\n  };\n\n  /**\n   * unicode letters used for parsing html tags, component names and property paths.\n   * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n   * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n   */\n  var unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n  /**\n   * Check if a string starts with $ or _\n   */\n  function isReserved(str) {\n      var c = (str + '').charCodeAt(0);\n      return c === 0x24 || c === 0x5f;\n  }\n  /**\n   * Define a property.\n   */\n  function def(obj, key, val, enumerable) {\n      Object.defineProperty(obj, key, {\n          value: val,\n          enumerable: !!enumerable,\n          writable: true,\n          configurable: true\n      });\n  }\n  /**\n   * Parse simple path.\n   */\n  var bailRE = new RegExp(\"[^\".concat(unicodeRegExp.source, \".$_\\\\d]\"));\n  function parsePath(path) {\n      if (bailRE.test(path)) {\n          return;\n      }\n      var segments = path.split('.');\n      return function (obj) {\n          for (var i = 0; i < segments.length; i++) {\n              if (!obj)\n                  return;\n              obj = obj[segments[i]];\n          }\n          return obj;\n      };\n  }\n\n  // can we use __proto__?\n  var hasProto = '__proto__' in {};\n  // Browser environment sniffing\n  var inBrowser = typeof window !== 'undefined';\n  var UA = inBrowser && window.navigator.userAgent.toLowerCase();\n  var isIE = UA && /msie|trident/.test(UA);\n  var isIE9 = UA && UA.indexOf('msie 9.0') > 0;\n  var isEdge = UA && UA.indexOf('edge/') > 0;\n  UA && UA.indexOf('android') > 0;\n  var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\n  UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n  UA && /phantomjs/.test(UA);\n  var isFF = UA && UA.match(/firefox\\/(\\d+)/);\n  // Firefox has a \"watch\" function on Object.prototype...\n  // @ts-expect-error firebox support\n  var nativeWatch = {}.watch;\n  var supportsPassive = false;\n  if (inBrowser) {\n      try {\n          var opts = {};\n          Object.defineProperty(opts, 'passive', {\n              get: function () {\n                  /* istanbul ignore next */\n                  supportsPassive = true;\n              }\n          }); // https://github.com/facebook/flow/issues/285\n          window.addEventListener('test-passive', null, opts);\n      }\n      catch (e) { }\n  }\n  // this needs to be lazy-evaled because vue may be required before\n  // vue-server-renderer can set VUE_ENV\n  var _isServer;\n  var isServerRendering = function () {\n      if (_isServer === undefined) {\n          /* istanbul ignore if */\n          if (!inBrowser && typeof global !== 'undefined') {\n              // detect presence of vue-server-renderer and avoid\n              // Webpack shimming the process\n              _isServer =\n                  global['process'] && global['process'].env.VUE_ENV === 'server';\n          }\n          else {\n              _isServer = false;\n          }\n      }\n      return _isServer;\n  };\n  // detect devtools\n  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n  /* istanbul ignore next */\n  function isNative(Ctor) {\n      return typeof Ctor === 'function' && /native code/.test(Ctor.toString());\n  }\n  var hasSymbol = typeof Symbol !== 'undefined' &&\n      isNative(Symbol) &&\n      typeof Reflect !== 'undefined' &&\n      isNative(Reflect.ownKeys);\n  var _Set; // $flow-disable-line\n  /* istanbul ignore if */ if (typeof Set !== 'undefined' && isNative(Set)) {\n      // use native Set when available.\n      _Set = Set;\n  }\n  else {\n      // a non-standard Set polyfill that only works with primitive keys.\n      _Set = /** @class */ (function () {\n          function Set() {\n              this.set = Object.create(null);\n          }\n          Set.prototype.has = function (key) {\n              return this.set[key] === true;\n          };\n          Set.prototype.add = function (key) {\n              this.set[key] = true;\n          };\n          Set.prototype.clear = function () {\n              this.set = Object.create(null);\n          };\n          return Set;\n      }());\n  }\n\n  var currentInstance = null;\n  /**\n   * This is exposed for compatibility with v3 (e.g. some functions in VueUse\n   * relies on it). Do not use this internally, just use `currentInstance`.\n   *\n   * @internal this function needs manual type declaration because it relies\n   * on previously manually authored types from Vue 2\n   */\n  function getCurrentInstance() {\n      return currentInstance && { proxy: currentInstance };\n  }\n  /**\n   * @internal\n   */\n  function setCurrentInstance(vm) {\n      if (vm === void 0) { vm = null; }\n      if (!vm)\n          currentInstance && currentInstance._scope.off();\n      currentInstance = vm;\n      vm && vm._scope.on();\n  }\n\n  /**\n   * @internal\n   */\n  var VNode = /** @class */ (function () {\n      function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {\n          this.tag = tag;\n          this.data = data;\n          this.children = children;\n          this.text = text;\n          this.elm = elm;\n          this.ns = undefined;\n          this.context = context;\n          this.fnContext = undefined;\n          this.fnOptions = undefined;\n          this.fnScopeId = undefined;\n          this.key = data && data.key;\n          this.componentOptions = componentOptions;\n          this.componentInstance = undefined;\n          this.parent = undefined;\n          this.raw = false;\n          this.isStatic = false;\n          this.isRootInsert = true;\n          this.isComment = false;\n          this.isCloned = false;\n          this.isOnce = false;\n          this.asyncFactory = asyncFactory;\n          this.asyncMeta = undefined;\n          this.isAsyncPlaceholder = false;\n      }\n      Object.defineProperty(VNode.prototype, \"child\", {\n          // DEPRECATED: alias for componentInstance for backwards compat.\n          /* istanbul ignore next */\n          get: function () {\n              return this.componentInstance;\n          },\n          enumerable: false,\n          configurable: true\n      });\n      return VNode;\n  }());\n  var createEmptyVNode = function (text) {\n      if (text === void 0) { text = ''; }\n      var node = new VNode();\n      node.text = text;\n      node.isComment = true;\n      return node;\n  };\n  function createTextVNode(val) {\n      return new VNode(undefined, undefined, undefined, String(val));\n  }\n  // optimized shallow clone\n  // used for static nodes and slot nodes because they may be reused across\n  // multiple renders, cloning them avoids errors when DOM manipulations rely\n  // on their elm reference.\n  function cloneVNode(vnode) {\n      var cloned = new VNode(vnode.tag, vnode.data, \n      // #7975\n      // clone children array to avoid mutating original in case of cloning\n      // a child.\n      vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);\n      cloned.ns = vnode.ns;\n      cloned.isStatic = vnode.isStatic;\n      cloned.key = vnode.key;\n      cloned.isComment = vnode.isComment;\n      cloned.fnContext = vnode.fnContext;\n      cloned.fnOptions = vnode.fnOptions;\n      cloned.fnScopeId = vnode.fnScopeId;\n      cloned.asyncMeta = vnode.asyncMeta;\n      cloned.isCloned = true;\n      return cloned;\n  }\n\n  /* not type checking this file because flow doesn't play well with Proxy */\n  var initProxy;\n  {\n      var allowedGlobals_1 = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' +\n          'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n          'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,' +\n          'require' // for Webpack/Browserify\n      );\n      var warnNonPresent_1 = function (target, key) {\n          warn$2(\"Property or method \\\"\".concat(key, \"\\\" is not defined on the instance but \") +\n              'referenced during render. Make sure that this property is reactive, ' +\n              'either in the data option, or for class-based components, by ' +\n              'initializing the property. ' +\n              'See: https://v2.vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);\n      };\n      var warnReservedPrefix_1 = function (target, key) {\n          warn$2(\"Property \\\"\".concat(key, \"\\\" must be accessed with \\\"$data.\").concat(key, \"\\\" because \") +\n              'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n              'prevent conflicts with Vue internals. ' +\n              'See: https://v2.vuejs.org/v2/api/#data', target);\n      };\n      var hasProxy_1 = typeof Proxy !== 'undefined' && isNative(Proxy);\n      if (hasProxy_1) {\n          var isBuiltInModifier_1 = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n          config.keyCodes = new Proxy(config.keyCodes, {\n              set: function (target, key, value) {\n                  if (isBuiltInModifier_1(key)) {\n                      warn$2(\"Avoid overwriting built-in modifier in config.keyCodes: .\".concat(key));\n                      return false;\n                  }\n                  else {\n                      target[key] = value;\n                      return true;\n                  }\n              }\n          });\n      }\n      var hasHandler_1 = {\n          has: function (target, key) {\n              var has = key in target;\n              var isAllowed = allowedGlobals_1(key) ||\n                  (typeof key === 'string' &&\n                      key.charAt(0) === '_' &&\n                      !(key in target.$data));\n              if (!has && !isAllowed) {\n                  if (key in target.$data)\n                      warnReservedPrefix_1(target, key);\n                  else\n                      warnNonPresent_1(target, key);\n              }\n              return has || !isAllowed;\n          }\n      };\n      var getHandler_1 = {\n          get: function (target, key) {\n              if (typeof key === 'string' && !(key in target)) {\n                  if (key in target.$data)\n                      warnReservedPrefix_1(target, key);\n                  else\n                      warnNonPresent_1(target, key);\n              }\n              return target[key];\n          }\n      };\n      initProxy = function initProxy(vm) {\n          if (hasProxy_1) {\n              // determine which proxy handler to use\n              var options = vm.$options;\n              var handlers = options.render && options.render._withStripped ? getHandler_1 : hasHandler_1;\n              vm._renderProxy = new Proxy(vm, handlers);\n          }\n          else {\n              vm._renderProxy = vm;\n          }\n      };\n  }\n\n  /******************************************************************************\r\n  Copyright (c) Microsoft Corporation.\r\n\r\n  Permission to use, copy, modify, and/or distribute this software for any\r\n  purpose with or without fee is hereby granted.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n  PERFORMANCE OF THIS SOFTWARE.\r\n  ***************************************************************************** */\r\n\r\n  var __assign = function() {\r\n      __assign = Object.assign || function __assign(t) {\r\n          for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n              s = arguments[i];\r\n              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n          }\r\n          return t;\r\n      };\r\n      return __assign.apply(this, arguments);\r\n  };\n\n  var uid$2 = 0;\n  var pendingCleanupDeps = [];\n  var cleanupDeps = function () {\n      for (var i = 0; i < pendingCleanupDeps.length; i++) {\n          var dep = pendingCleanupDeps[i];\n          dep.subs = dep.subs.filter(function (s) { return s; });\n          dep._pending = false;\n      }\n      pendingCleanupDeps.length = 0;\n  };\n  /**\n   * A dep is an observable that can have multiple\n   * directives subscribing to it.\n   * @internal\n   */\n  var Dep = /** @class */ (function () {\n      function Dep() {\n          // pending subs cleanup\n          this._pending = false;\n          this.id = uid$2++;\n          this.subs = [];\n      }\n      Dep.prototype.addSub = function (sub) {\n          this.subs.push(sub);\n      };\n      Dep.prototype.removeSub = function (sub) {\n          // #12696 deps with massive amount of subscribers are extremely slow to\n          // clean up in Chromium\n          // to workaround this, we unset the sub for now, and clear them on\n          // next scheduler flush.\n          this.subs[this.subs.indexOf(sub)] = null;\n          if (!this._pending) {\n              this._pending = true;\n              pendingCleanupDeps.push(this);\n          }\n      };\n      Dep.prototype.depend = function (info) {\n          if (Dep.target) {\n              Dep.target.addDep(this);\n              if (info && Dep.target.onTrack) {\n                  Dep.target.onTrack(__assign({ effect: Dep.target }, info));\n              }\n          }\n      };\n      Dep.prototype.notify = function (info) {\n          // stabilize the subscriber list first\n          var subs = this.subs.filter(function (s) { return s; });\n          if (!config.async) {\n              // subs aren't sorted in scheduler if not running async\n              // we need to sort them now to make sure they fire in correct\n              // order\n              subs.sort(function (a, b) { return a.id - b.id; });\n          }\n          for (var i = 0, l = subs.length; i < l; i++) {\n              var sub = subs[i];\n              if (info) {\n                  sub.onTrigger &&\n                      sub.onTrigger(__assign({ effect: subs[i] }, info));\n              }\n              sub.update();\n          }\n      };\n      return Dep;\n  }());\n  // The current target watcher being evaluated.\n  // This is globally unique because only one watcher\n  // can be evaluated at a time.\n  Dep.target = null;\n  var targetStack = [];\n  function pushTarget(target) {\n      targetStack.push(target);\n      Dep.target = target;\n  }\n  function popTarget() {\n      targetStack.pop();\n      Dep.target = targetStack[targetStack.length - 1];\n  }\n\n  /*\n   * not type checking this file because flow doesn't play well with\n   * dynamically accessing methods on Array prototype\n   */\n  var arrayProto = Array.prototype;\n  var arrayMethods = Object.create(arrayProto);\n  var methodsToPatch = [\n      'push',\n      'pop',\n      'shift',\n      'unshift',\n      'splice',\n      'sort',\n      'reverse'\n  ];\n  /**\n   * Intercept mutating methods and emit events\n   */\n  methodsToPatch.forEach(function (method) {\n      // cache original method\n      var original = arrayProto[method];\n      def(arrayMethods, method, function mutator() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n          }\n          var result = original.apply(this, args);\n          var ob = this.__ob__;\n          var inserted;\n          switch (method) {\n              case 'push':\n              case 'unshift':\n                  inserted = args;\n                  break;\n              case 'splice':\n                  inserted = args.slice(2);\n                  break;\n          }\n          if (inserted)\n              ob.observeArray(inserted);\n          // notify change\n          {\n              ob.dep.notify({\n                  type: \"array mutation\" /* TriggerOpTypes.ARRAY_MUTATION */,\n                  target: this,\n                  key: method\n              });\n          }\n          return result;\n      });\n  });\n\n  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n  var NO_INIITIAL_VALUE = {};\n  /**\n   * In some cases we may want to disable observation inside a component's\n   * update computation.\n   */\n  var shouldObserve = true;\n  function toggleObserving(value) {\n      shouldObserve = value;\n  }\n  // ssr mock dep\n  var mockDep = {\n      notify: noop,\n      depend: noop,\n      addSub: noop,\n      removeSub: noop\n  };\n  /**\n   * Observer class that is attached to each observed\n   * object. Once attached, the observer converts the target\n   * object's property keys into getter/setters that\n   * collect dependencies and dispatch updates.\n   */\n  var Observer = /** @class */ (function () {\n      function Observer(value, shallow, mock) {\n          if (shallow === void 0) { shallow = false; }\n          if (mock === void 0) { mock = false; }\n          this.value = value;\n          this.shallow = shallow;\n          this.mock = mock;\n          // this.value = value\n          this.dep = mock ? mockDep : new Dep();\n          this.vmCount = 0;\n          def(value, '__ob__', this);\n          if (isArray(value)) {\n              if (!mock) {\n                  if (hasProto) {\n                      value.__proto__ = arrayMethods;\n                      /* eslint-enable no-proto */\n                  }\n                  else {\n                      for (var i = 0, l = arrayKeys.length; i < l; i++) {\n                          var key = arrayKeys[i];\n                          def(value, key, arrayMethods[key]);\n                      }\n                  }\n              }\n              if (!shallow) {\n                  this.observeArray(value);\n              }\n          }\n          else {\n              /**\n               * Walk through all properties and convert them into\n               * getter/setters. This method should only be called when\n               * value type is Object.\n               */\n              var keys = Object.keys(value);\n              for (var i = 0; i < keys.length; i++) {\n                  var key = keys[i];\n                  defineReactive(value, key, NO_INIITIAL_VALUE, undefined, shallow, mock);\n              }\n          }\n      }\n      /**\n       * Observe a list of Array items.\n       */\n      Observer.prototype.observeArray = function (value) {\n          for (var i = 0, l = value.length; i < l; i++) {\n              observe(value[i], false, this.mock);\n          }\n      };\n      return Observer;\n  }());\n  // helpers\n  /**\n   * Attempt to create an observer instance for a value,\n   * returns the new observer if successfully observed,\n   * or the existing observer if the value already has one.\n   */\n  function observe(value, shallow, ssrMockReactivity) {\n      if (value && hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n          return value.__ob__;\n      }\n      if (shouldObserve &&\n          (ssrMockReactivity || !isServerRendering()) &&\n          (isArray(value) || isPlainObject(value)) &&\n          Object.isExtensible(value) &&\n          !value.__v_skip /* ReactiveFlags.SKIP */ &&\n          !isRef(value) &&\n          !(value instanceof VNode)) {\n          return new Observer(value, shallow, ssrMockReactivity);\n      }\n  }\n  /**\n   * Define a reactive property on an Object.\n   */\n  function defineReactive(obj, key, val, customSetter, shallow, mock) {\n      var dep = new Dep();\n      var property = Object.getOwnPropertyDescriptor(obj, key);\n      if (property && property.configurable === false) {\n          return;\n      }\n      // cater for pre-defined getter/setters\n      var getter = property && property.get;\n      var setter = property && property.set;\n      if ((!getter || setter) &&\n          (val === NO_INIITIAL_VALUE || arguments.length === 2)) {\n          val = obj[key];\n      }\n      var childOb = !shallow && observe(val, false, mock);\n      Object.defineProperty(obj, key, {\n          enumerable: true,\n          configurable: true,\n          get: function reactiveGetter() {\n              var value = getter ? getter.call(obj) : val;\n              if (Dep.target) {\n                  {\n                      dep.depend({\n                          target: obj,\n                          type: \"get\" /* TrackOpTypes.GET */,\n                          key: key\n                      });\n                  }\n                  if (childOb) {\n                      childOb.dep.depend();\n                      if (isArray(value)) {\n                          dependArray(value);\n                      }\n                  }\n              }\n              return isRef(value) && !shallow ? value.value : value;\n          },\n          set: function reactiveSetter(newVal) {\n              var value = getter ? getter.call(obj) : val;\n              if (!hasChanged(value, newVal)) {\n                  return;\n              }\n              if (customSetter) {\n                  customSetter();\n              }\n              if (setter) {\n                  setter.call(obj, newVal);\n              }\n              else if (getter) {\n                  // #7981: for accessor properties without setter\n                  return;\n              }\n              else if (!shallow && isRef(value) && !isRef(newVal)) {\n                  value.value = newVal;\n                  return;\n              }\n              else {\n                  val = newVal;\n              }\n              childOb = !shallow && observe(newVal, false, mock);\n              {\n                  dep.notify({\n                      type: \"set\" /* TriggerOpTypes.SET */,\n                      target: obj,\n                      key: key,\n                      newValue: newVal,\n                      oldValue: value\n                  });\n              }\n          }\n      });\n      return dep;\n  }\n  function set(target, key, val) {\n      if ((isUndef(target) || isPrimitive(target))) {\n          warn$2(\"Cannot set reactive property on undefined, null, or primitive value: \".concat(target));\n      }\n      if (isReadonly(target)) {\n          warn$2(\"Set operation on key \\\"\".concat(key, \"\\\" failed: target is readonly.\"));\n          return;\n      }\n      var ob = target.__ob__;\n      if (isArray(target) && isValidArrayIndex(key)) {\n          target.length = Math.max(target.length, key);\n          target.splice(key, 1, val);\n          // when mocking for SSR, array methods are not hijacked\n          if (ob && !ob.shallow && ob.mock) {\n              observe(val, false, true);\n          }\n          return val;\n      }\n      if (key in target && !(key in Object.prototype)) {\n          target[key] = val;\n          return val;\n      }\n      if (target._isVue || (ob && ob.vmCount)) {\n          warn$2('Avoid adding reactive properties to a Vue instance or its root $data ' +\n                  'at runtime - declare it upfront in the data option.');\n          return val;\n      }\n      if (!ob) {\n          target[key] = val;\n          return val;\n      }\n      defineReactive(ob.value, key, val, undefined, ob.shallow, ob.mock);\n      {\n          ob.dep.notify({\n              type: \"add\" /* TriggerOpTypes.ADD */,\n              target: target,\n              key: key,\n              newValue: val,\n              oldValue: undefined\n          });\n      }\n      return val;\n  }\n  function del(target, key) {\n      if ((isUndef(target) || isPrimitive(target))) {\n          warn$2(\"Cannot delete reactive property on undefined, null, or primitive value: \".concat(target));\n      }\n      if (isArray(target) && isValidArrayIndex(key)) {\n          target.splice(key, 1);\n          return;\n      }\n      var ob = target.__ob__;\n      if (target._isVue || (ob && ob.vmCount)) {\n          warn$2('Avoid deleting properties on a Vue instance or its root $data ' +\n                  '- just set it to null.');\n          return;\n      }\n      if (isReadonly(target)) {\n          warn$2(\"Delete operation on key \\\"\".concat(key, \"\\\" failed: target is readonly.\"));\n          return;\n      }\n      if (!hasOwn(target, key)) {\n          return;\n      }\n      delete target[key];\n      if (!ob) {\n          return;\n      }\n      {\n          ob.dep.notify({\n              type: \"delete\" /* TriggerOpTypes.DELETE */,\n              target: target,\n              key: key\n          });\n      }\n  }\n  /**\n   * Collect dependencies on array elements when the array is touched, since\n   * we cannot intercept array element access like property getters.\n   */\n  function dependArray(value) {\n      for (var e = void 0, i = 0, l = value.length; i < l; i++) {\n          e = value[i];\n          if (e && e.__ob__) {\n              e.__ob__.dep.depend();\n          }\n          if (isArray(e)) {\n              dependArray(e);\n          }\n      }\n  }\n\n  function reactive(target) {\n      makeReactive(target, false);\n      return target;\n  }\n  /**\n   * Return a shallowly-reactive copy of the original object, where only the root\n   * level properties are reactive. It also does not auto-unwrap refs (even at the\n   * root level).\n   */\n  function shallowReactive(target) {\n      makeReactive(target, true);\n      def(target, \"__v_isShallow\" /* ReactiveFlags.IS_SHALLOW */, true);\n      return target;\n  }\n  function makeReactive(target, shallow) {\n      // if trying to observe a readonly proxy, return the readonly version.\n      if (!isReadonly(target)) {\n          {\n              if (isArray(target)) {\n                  warn$2(\"Avoid using Array as root value for \".concat(shallow ? \"shallowReactive()\" : \"reactive()\", \" as it cannot be tracked in watch() or watchEffect(). Use \").concat(shallow ? \"shallowRef()\" : \"ref()\", \" instead. This is a Vue-2-only limitation.\"));\n              }\n              var existingOb = target && target.__ob__;\n              if (existingOb && existingOb.shallow !== shallow) {\n                  warn$2(\"Target is already a \".concat(existingOb.shallow ? \"\" : \"non-\", \"shallow reactive object, and cannot be converted to \").concat(shallow ? \"\" : \"non-\", \"shallow.\"));\n              }\n          }\n          var ob = observe(target, shallow, isServerRendering() /* ssr mock reactivity */);\n          if (!ob) {\n              if (target == null || isPrimitive(target)) {\n                  warn$2(\"value cannot be made reactive: \".concat(String(target)));\n              }\n              if (isCollectionType(target)) {\n                  warn$2(\"Vue 2 does not support reactive collection types such as Map or Set.\");\n              }\n          }\n      }\n  }\n  function isReactive(value) {\n      if (isReadonly(value)) {\n          return isReactive(value[\"__v_raw\" /* ReactiveFlags.RAW */]);\n      }\n      return !!(value && value.__ob__);\n  }\n  function isShallow(value) {\n      return !!(value && value.__v_isShallow);\n  }\n  function isReadonly(value) {\n      return !!(value && value.__v_isReadonly);\n  }\n  function isProxy(value) {\n      return isReactive(value) || isReadonly(value);\n  }\n  function toRaw(observed) {\n      var raw = observed && observed[\"__v_raw\" /* ReactiveFlags.RAW */];\n      return raw ? toRaw(raw) : observed;\n  }\n  function markRaw(value) {\n      // non-extensible objects won't be observed anyway\n      if (Object.isExtensible(value)) {\n          def(value, \"__v_skip\" /* ReactiveFlags.SKIP */, true);\n      }\n      return value;\n  }\n  /**\n   * @internal\n   */\n  function isCollectionType(value) {\n      var type = toRawType(value);\n      return (type === 'Map' || type === 'WeakMap' || type === 'Set' || type === 'WeakSet');\n  }\n\n  /**\n   * @internal\n   */\n  var RefFlag = \"__v_isRef\";\n  function isRef(r) {\n      return !!(r && r.__v_isRef === true);\n  }\n  function ref$1(value) {\n      return createRef(value, false);\n  }\n  function shallowRef(value) {\n      return createRef(value, true);\n  }\n  function createRef(rawValue, shallow) {\n      if (isRef(rawValue)) {\n          return rawValue;\n      }\n      var ref = {};\n      def(ref, RefFlag, true);\n      def(ref, \"__v_isShallow\" /* ReactiveFlags.IS_SHALLOW */, shallow);\n      def(ref, 'dep', defineReactive(ref, 'value', rawValue, null, shallow, isServerRendering()));\n      return ref;\n  }\n  function triggerRef(ref) {\n      if (!ref.dep) {\n          warn$2(\"received object is not a triggerable ref.\");\n      }\n      {\n          ref.dep &&\n              ref.dep.notify({\n                  type: \"set\" /* TriggerOpTypes.SET */,\n                  target: ref,\n                  key: 'value'\n              });\n      }\n  }\n  function unref(ref) {\n      return isRef(ref) ? ref.value : ref;\n  }\n  function proxyRefs(objectWithRefs) {\n      if (isReactive(objectWithRefs)) {\n          return objectWithRefs;\n      }\n      var proxy = {};\n      var keys = Object.keys(objectWithRefs);\n      for (var i = 0; i < keys.length; i++) {\n          proxyWithRefUnwrap(proxy, objectWithRefs, keys[i]);\n      }\n      return proxy;\n  }\n  function proxyWithRefUnwrap(target, source, key) {\n      Object.defineProperty(target, key, {\n          enumerable: true,\n          configurable: true,\n          get: function () {\n              var val = source[key];\n              if (isRef(val)) {\n                  return val.value;\n              }\n              else {\n                  var ob = val && val.__ob__;\n                  if (ob)\n                      ob.dep.depend();\n                  return val;\n              }\n          },\n          set: function (value) {\n              var oldValue = source[key];\n              if (isRef(oldValue) && !isRef(value)) {\n                  oldValue.value = value;\n              }\n              else {\n                  source[key] = value;\n              }\n          }\n      });\n  }\n  function customRef(factory) {\n      var dep = new Dep();\n      var _a = factory(function () {\n          {\n              dep.depend({\n                  target: ref,\n                  type: \"get\" /* TrackOpTypes.GET */,\n                  key: 'value'\n              });\n          }\n      }, function () {\n          {\n              dep.notify({\n                  target: ref,\n                  type: \"set\" /* TriggerOpTypes.SET */,\n                  key: 'value'\n              });\n          }\n      }), get = _a.get, set = _a.set;\n      var ref = {\n          get value() {\n              return get();\n          },\n          set value(newVal) {\n              set(newVal);\n          }\n      };\n      def(ref, RefFlag, true);\n      return ref;\n  }\n  function toRefs(object) {\n      if (!isReactive(object)) {\n          warn$2(\"toRefs() expects a reactive object but received a plain one.\");\n      }\n      var ret = isArray(object) ? new Array(object.length) : {};\n      for (var key in object) {\n          ret[key] = toRef(object, key);\n      }\n      return ret;\n  }\n  function toRef(object, key, defaultValue) {\n      var val = object[key];\n      if (isRef(val)) {\n          return val;\n      }\n      var ref = {\n          get value() {\n              var val = object[key];\n              return val === undefined ? defaultValue : val;\n          },\n          set value(newVal) {\n              object[key] = newVal;\n          }\n      };\n      def(ref, RefFlag, true);\n      return ref;\n  }\n\n  var rawToReadonlyFlag = \"__v_rawToReadonly\";\n  var rawToShallowReadonlyFlag = \"__v_rawToShallowReadonly\";\n  function readonly(target) {\n      return createReadonly(target, false);\n  }\n  function createReadonly(target, shallow) {\n      if (!isPlainObject(target)) {\n          {\n              if (isArray(target)) {\n                  warn$2(\"Vue 2 does not support readonly arrays.\");\n              }\n              else if (isCollectionType(target)) {\n                  warn$2(\"Vue 2 does not support readonly collection types such as Map or Set.\");\n              }\n              else {\n                  warn$2(\"value cannot be made readonly: \".concat(typeof target));\n              }\n          }\n          return target;\n      }\n      if (!Object.isExtensible(target)) {\n          warn$2(\"Vue 2 does not support creating readonly proxy for non-extensible object.\");\n      }\n      // already a readonly object\n      if (isReadonly(target)) {\n          return target;\n      }\n      // already has a readonly proxy\n      var existingFlag = shallow ? rawToShallowReadonlyFlag : rawToReadonlyFlag;\n      var existingProxy = target[existingFlag];\n      if (existingProxy) {\n          return existingProxy;\n      }\n      var proxy = Object.create(Object.getPrototypeOf(target));\n      def(target, existingFlag, proxy);\n      def(proxy, \"__v_isReadonly\" /* ReactiveFlags.IS_READONLY */, true);\n      def(proxy, \"__v_raw\" /* ReactiveFlags.RAW */, target);\n      if (isRef(target)) {\n          def(proxy, RefFlag, true);\n      }\n      if (shallow || isShallow(target)) {\n          def(proxy, \"__v_isShallow\" /* ReactiveFlags.IS_SHALLOW */, true);\n      }\n      var keys = Object.keys(target);\n      for (var i = 0; i < keys.length; i++) {\n          defineReadonlyProperty(proxy, target, keys[i], shallow);\n      }\n      return proxy;\n  }\n  function defineReadonlyProperty(proxy, target, key, shallow) {\n      Object.defineProperty(proxy, key, {\n          enumerable: true,\n          configurable: true,\n          get: function () {\n              var val = target[key];\n              return shallow || !isPlainObject(val) ? val : readonly(val);\n          },\n          set: function () {\n              warn$2(\"Set operation on key \\\"\".concat(key, \"\\\" failed: target is readonly.\"));\n          }\n      });\n  }\n  /**\n   * Returns a reactive-copy of the original object, where only the root level\n   * properties are readonly, and does NOT unwrap refs nor recursively convert\n   * returned properties.\n   * This is used for creating the props proxy object for stateful components.\n   */\n  function shallowReadonly(target) {\n      return createReadonly(target, true);\n  }\n\n  function computed(getterOrOptions, debugOptions) {\n      var getter;\n      var setter;\n      var onlyGetter = isFunction(getterOrOptions);\n      if (onlyGetter) {\n          getter = getterOrOptions;\n          setter = function () {\n                  warn$2('Write operation failed: computed value is readonly');\n              }\n              ;\n      }\n      else {\n          getter = getterOrOptions.get;\n          setter = getterOrOptions.set;\n      }\n      var watcher = isServerRendering()\n          ? null\n          : new Watcher(currentInstance, getter, noop, { lazy: true });\n      if (watcher && debugOptions) {\n          watcher.onTrack = debugOptions.onTrack;\n          watcher.onTrigger = debugOptions.onTrigger;\n      }\n      var ref = {\n          // some libs rely on the presence effect for checking computed refs\n          // from normal refs, but the implementation doesn't matter\n          effect: watcher,\n          get value() {\n              if (watcher) {\n                  if (watcher.dirty) {\n                      watcher.evaluate();\n                  }\n                  if (Dep.target) {\n                      if (Dep.target.onTrack) {\n                          Dep.target.onTrack({\n                              effect: Dep.target,\n                              target: ref,\n                              type: \"get\" /* TrackOpTypes.GET */,\n                              key: 'value'\n                          });\n                      }\n                      watcher.depend();\n                  }\n                  return watcher.value;\n              }\n              else {\n                  return getter();\n              }\n          },\n          set value(newVal) {\n              setter(newVal);\n          }\n      };\n      def(ref, RefFlag, true);\n      def(ref, \"__v_isReadonly\" /* ReactiveFlags.IS_READONLY */, onlyGetter);\n      return ref;\n  }\n\n  var mark;\n  var measure;\n  {\n      var perf_1 = inBrowser && window.performance;\n      /* istanbul ignore if */\n      if (perf_1 &&\n          // @ts-ignore\n          perf_1.mark &&\n          // @ts-ignore\n          perf_1.measure &&\n          // @ts-ignore\n          perf_1.clearMarks &&\n          // @ts-ignore\n          perf_1.clearMeasures) {\n          mark = function (tag) { return perf_1.mark(tag); };\n          measure = function (name, startTag, endTag) {\n              perf_1.measure(name, startTag, endTag);\n              perf_1.clearMarks(startTag);\n              perf_1.clearMarks(endTag);\n              // perf.clearMeasures(name)\n          };\n      }\n  }\n\n  var normalizeEvent = cached(function (name) {\n      var passive = name.charAt(0) === '&';\n      name = passive ? name.slice(1) : name;\n      var once = name.charAt(0) === '~'; // Prefixed last, checked first\n      name = once ? name.slice(1) : name;\n      var capture = name.charAt(0) === '!';\n      name = capture ? name.slice(1) : name;\n      return {\n          name: name,\n          once: once,\n          capture: capture,\n          passive: passive\n      };\n  });\n  function createFnInvoker(fns, vm) {\n      function invoker() {\n          var fns = invoker.fns;\n          if (isArray(fns)) {\n              var cloned = fns.slice();\n              for (var i = 0; i < cloned.length; i++) {\n                  invokeWithErrorHandling(cloned[i], null, arguments, vm, \"v-on handler\");\n              }\n          }\n          else {\n              // return handler return value for single handlers\n              return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\");\n          }\n      }\n      invoker.fns = fns;\n      return invoker;\n  }\n  function updateListeners(on, oldOn, add, remove, createOnceHandler, vm) {\n      var name, cur, old, event;\n      for (name in on) {\n          cur = on[name];\n          old = oldOn[name];\n          event = normalizeEvent(name);\n          if (isUndef(cur)) {\n              warn$2(\"Invalid handler for event \\\"\".concat(event.name, \"\\\": got \") + String(cur), vm);\n          }\n          else if (isUndef(old)) {\n              if (isUndef(cur.fns)) {\n                  cur = on[name] = createFnInvoker(cur, vm);\n              }\n              if (isTrue(event.once)) {\n                  cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n              }\n              add(event.name, cur, event.capture, event.passive, event.params);\n          }\n          else if (cur !== old) {\n              old.fns = cur;\n              on[name] = old;\n          }\n      }\n      for (name in oldOn) {\n          if (isUndef(on[name])) {\n              event = normalizeEvent(name);\n              remove(event.name, oldOn[name], event.capture);\n          }\n      }\n  }\n\n  function mergeVNodeHook(def, hookKey, hook) {\n      if (def instanceof VNode) {\n          def = def.data.hook || (def.data.hook = {});\n      }\n      var invoker;\n      var oldHook = def[hookKey];\n      function wrappedHook() {\n          hook.apply(this, arguments);\n          // important: remove merged hook to ensure it's called only once\n          // and prevent memory leak\n          remove$2(invoker.fns, wrappedHook);\n      }\n      if (isUndef(oldHook)) {\n          // no existing hook\n          invoker = createFnInvoker([wrappedHook]);\n      }\n      else {\n          /* istanbul ignore if */\n          if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n              // already a merged invoker\n              invoker = oldHook;\n              invoker.fns.push(wrappedHook);\n          }\n          else {\n              // existing plain hook\n              invoker = createFnInvoker([oldHook, wrappedHook]);\n          }\n      }\n      invoker.merged = true;\n      def[hookKey] = invoker;\n  }\n\n  function extractPropsFromVNodeData(data, Ctor, tag) {\n      // we are only extracting raw values here.\n      // validation and default values are handled in the child\n      // component itself.\n      var propOptions = Ctor.options.props;\n      if (isUndef(propOptions)) {\n          return;\n      }\n      var res = {};\n      var attrs = data.attrs, props = data.props;\n      if (isDef(attrs) || isDef(props)) {\n          for (var key in propOptions) {\n              var altKey = hyphenate(key);\n              {\n                  var keyInLowerCase = key.toLowerCase();\n                  if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {\n                      tip(\"Prop \\\"\".concat(keyInLowerCase, \"\\\" is passed to component \") +\n                          \"\".concat(formatComponentName(\n                          // @ts-expect-error tag is string\n                          tag || Ctor), \", but the declared prop name is\") +\n                          \" \\\"\".concat(key, \"\\\". \") +\n                          \"Note that HTML attributes are case-insensitive and camelCased \" +\n                          \"props need to use their kebab-case equivalents when using in-DOM \" +\n                          \"templates. You should probably use \\\"\".concat(altKey, \"\\\" instead of \\\"\").concat(key, \"\\\".\"));\n                  }\n              }\n              checkProp(res, props, key, altKey, true) ||\n                  checkProp(res, attrs, key, altKey, false);\n          }\n      }\n      return res;\n  }\n  function checkProp(res, hash, key, altKey, preserve) {\n      if (isDef(hash)) {\n          if (hasOwn(hash, key)) {\n              res[key] = hash[key];\n              if (!preserve) {\n                  delete hash[key];\n              }\n              return true;\n          }\n          else if (hasOwn(hash, altKey)) {\n              res[key] = hash[altKey];\n              if (!preserve) {\n                  delete hash[altKey];\n              }\n              return true;\n          }\n      }\n      return false;\n  }\n\n  // The template compiler attempts to minimize the need for normalization by\n  // statically analyzing the template at compile time.\n  //\n  // For plain HTML markup, normalization can be completely skipped because the\n  // generated render function is guaranteed to return Array<VNode>. There are\n  // two cases where extra normalization is needed:\n  // 1. When the children contains components - because a functional component\n  // may return an Array instead of a single root. In this case, just a simple\n  // normalization is needed - if any child is an Array, we flatten the whole\n  // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n  // because functional components already normalize their own children.\n  function simpleNormalizeChildren(children) {\n      for (var i = 0; i < children.length; i++) {\n          if (isArray(children[i])) {\n              return Array.prototype.concat.apply([], children);\n          }\n      }\n      return children;\n  }\n  // 2. When the children contains constructs that always generated nested Arrays,\n  // e.g. <template>, <slot>, v-for, or when the children is provided by user\n  // with hand-written render functions / JSX. In such cases a full normalization\n  // is needed to cater to all possible types of children values.\n  function normalizeChildren(children) {\n      return isPrimitive(children)\n          ? [createTextVNode(children)]\n          : isArray(children)\n              ? normalizeArrayChildren(children)\n              : undefined;\n  }\n  function isTextNode(node) {\n      return isDef(node) && isDef(node.text) && isFalse(node.isComment);\n  }\n  function normalizeArrayChildren(children, nestedIndex) {\n      var res = [];\n      var i, c, lastIndex, last;\n      for (i = 0; i < children.length; i++) {\n          c = children[i];\n          if (isUndef(c) || typeof c === 'boolean')\n              continue;\n          lastIndex = res.length - 1;\n          last = res[lastIndex];\n          //  nested\n          if (isArray(c)) {\n              if (c.length > 0) {\n                  c = normalizeArrayChildren(c, \"\".concat(nestedIndex || '', \"_\").concat(i));\n                  // merge adjacent text nodes\n                  if (isTextNode(c[0]) && isTextNode(last)) {\n                      res[lastIndex] = createTextVNode(last.text + c[0].text);\n                      c.shift();\n                  }\n                  res.push.apply(res, c);\n              }\n          }\n          else if (isPrimitive(c)) {\n              if (isTextNode(last)) {\n                  // merge adjacent text nodes\n                  // this is necessary for SSR hydration because text nodes are\n                  // essentially merged when rendered to HTML strings\n                  res[lastIndex] = createTextVNode(last.text + c);\n              }\n              else if (c !== '') {\n                  // convert primitive to vnode\n                  res.push(createTextVNode(c));\n              }\n          }\n          else {\n              if (isTextNode(c) && isTextNode(last)) {\n                  // merge adjacent text nodes\n                  res[lastIndex] = createTextVNode(last.text + c.text);\n              }\n              else {\n                  // default key for nested array children (likely generated by v-for)\n                  if (isTrue(children._isVList) &&\n                      isDef(c.tag) &&\n                      isUndef(c.key) &&\n                      isDef(nestedIndex)) {\n                      c.key = \"__vlist\".concat(nestedIndex, \"_\").concat(i, \"__\");\n                  }\n                  res.push(c);\n              }\n          }\n      }\n      return res;\n  }\n\n  var SIMPLE_NORMALIZE = 1;\n  var ALWAYS_NORMALIZE = 2;\n  // wrapper function for providing a more flexible interface\n  // without getting yelled at by flow\n  function createElement$1(context, tag, data, children, normalizationType, alwaysNormalize) {\n      if (isArray(data) || isPrimitive(data)) {\n          normalizationType = children;\n          children = data;\n          data = undefined;\n      }\n      if (isTrue(alwaysNormalize)) {\n          normalizationType = ALWAYS_NORMALIZE;\n      }\n      return _createElement(context, tag, data, children, normalizationType);\n  }\n  function _createElement(context, tag, data, children, normalizationType) {\n      if (isDef(data) && isDef(data.__ob__)) {\n          warn$2(\"Avoid using observed data object as vnode data: \".concat(JSON.stringify(data), \"\\n\") + 'Always create fresh vnode data objects in each render!', context);\n          return createEmptyVNode();\n      }\n      // object syntax in v-bind\n      if (isDef(data) && isDef(data.is)) {\n          tag = data.is;\n      }\n      if (!tag) {\n          // in case of component :is set to falsy value\n          return createEmptyVNode();\n      }\n      // warn against non-primitive key\n      if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {\n          warn$2('Avoid using non-primitive value as key, ' +\n              'use string/number value instead.', context);\n      }\n      // support single function children as default scoped slot\n      if (isArray(children) && isFunction(children[0])) {\n          data = data || {};\n          data.scopedSlots = { default: children[0] };\n          children.length = 0;\n      }\n      if (normalizationType === ALWAYS_NORMALIZE) {\n          children = normalizeChildren(children);\n      }\n      else if (normalizationType === SIMPLE_NORMALIZE) {\n          children = simpleNormalizeChildren(children);\n      }\n      var vnode, ns;\n      if (typeof tag === 'string') {\n          var Ctor = void 0;\n          ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n          if (config.isReservedTag(tag)) {\n              // platform built-in elements\n              if (isDef(data) &&\n                  isDef(data.nativeOn) &&\n                  data.tag !== 'component') {\n                  warn$2(\"The .native modifier for v-on is only valid on components but it was used on <\".concat(tag, \">.\"), context);\n              }\n              vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);\n          }\n          else if ((!data || !data.pre) &&\n              isDef((Ctor = resolveAsset(context.$options, 'components', tag)))) {\n              // component\n              vnode = createComponent(Ctor, data, context, children, tag);\n          }\n          else {\n              // unknown or unlisted namespaced elements\n              // check at runtime because it may get assigned a namespace when its\n              // parent normalizes children\n              vnode = new VNode(tag, data, children, undefined, undefined, context);\n          }\n      }\n      else {\n          // direct component options / constructor\n          vnode = createComponent(tag, data, context, children);\n      }\n      if (isArray(vnode)) {\n          return vnode;\n      }\n      else if (isDef(vnode)) {\n          if (isDef(ns))\n              applyNS(vnode, ns);\n          if (isDef(data))\n              registerDeepBindings(data);\n          return vnode;\n      }\n      else {\n          return createEmptyVNode();\n      }\n  }\n  function applyNS(vnode, ns, force) {\n      vnode.ns = ns;\n      if (vnode.tag === 'foreignObject') {\n          // use default namespace inside foreignObject\n          ns = undefined;\n          force = true;\n      }\n      if (isDef(vnode.children)) {\n          for (var i = 0, l = vnode.children.length; i < l; i++) {\n              var child = vnode.children[i];\n              if (isDef(child.tag) &&\n                  (isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n                  applyNS(child, ns, force);\n              }\n          }\n      }\n  }\n  // ref #5318\n  // necessary to ensure parent re-render when deep bindings like :style and\n  // :class are used on slot nodes\n  function registerDeepBindings(data) {\n      if (isObject(data.style)) {\n          traverse(data.style);\n      }\n      if (isObject(data.class)) {\n          traverse(data.class);\n      }\n  }\n\n  /**\n   * Runtime helper for rendering v-for lists.\n   */\n  function renderList(val, render) {\n      var ret = null, i, l, keys, key;\n      if (isArray(val) || typeof val === 'string') {\n          ret = new Array(val.length);\n          for (i = 0, l = val.length; i < l; i++) {\n              ret[i] = render(val[i], i);\n          }\n      }\n      else if (typeof val === 'number') {\n          ret = new Array(val);\n          for (i = 0; i < val; i++) {\n              ret[i] = render(i + 1, i);\n          }\n      }\n      else if (isObject(val)) {\n          if (hasSymbol && val[Symbol.iterator]) {\n              ret = [];\n              var iterator = val[Symbol.iterator]();\n              var result = iterator.next();\n              while (!result.done) {\n                  ret.push(render(result.value, ret.length));\n                  result = iterator.next();\n              }\n          }\n          else {\n              keys = Object.keys(val);\n              ret = new Array(keys.length);\n              for (i = 0, l = keys.length; i < l; i++) {\n                  key = keys[i];\n                  ret[i] = render(val[key], key, i);\n              }\n          }\n      }\n      if (!isDef(ret)) {\n          ret = [];\n      }\n      ret._isVList = true;\n      return ret;\n  }\n\n  /**\n   * Runtime helper for rendering <slot>\n   */\n  function renderSlot(name, fallbackRender, props, bindObject) {\n      var scopedSlotFn = this.$scopedSlots[name];\n      var nodes;\n      if (scopedSlotFn) {\n          // scoped slot\n          props = props || {};\n          if (bindObject) {\n              if (!isObject(bindObject)) {\n                  warn$2('slot v-bind without argument expects an Object', this);\n              }\n              props = extend(extend({}, bindObject), props);\n          }\n          nodes =\n              scopedSlotFn(props) ||\n                  (isFunction(fallbackRender) ? fallbackRender() : fallbackRender);\n      }\n      else {\n          nodes =\n              this.$slots[name] ||\n                  (isFunction(fallbackRender) ? fallbackRender() : fallbackRender);\n      }\n      var target = props && props.slot;\n      if (target) {\n          return this.$createElement('template', { slot: target }, nodes);\n      }\n      else {\n          return nodes;\n      }\n  }\n\n  /**\n   * Runtime helper for resolving filters\n   */\n  function resolveFilter(id) {\n      return resolveAsset(this.$options, 'filters', id, true) || identity;\n  }\n\n  function isKeyNotMatch(expect, actual) {\n      if (isArray(expect)) {\n          return expect.indexOf(actual) === -1;\n      }\n      else {\n          return expect !== actual;\n      }\n  }\n  /**\n   * Runtime helper for checking keyCodes from config.\n   * exposed as Vue.prototype._k\n   * passing in eventKeyName as last argument separately for backwards compat\n   */\n  function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {\n      var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n      if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n          return isKeyNotMatch(builtInKeyName, eventKeyName);\n      }\n      else if (mappedKeyCode) {\n          return isKeyNotMatch(mappedKeyCode, eventKeyCode);\n      }\n      else if (eventKeyName) {\n          return hyphenate(eventKeyName) !== key;\n      }\n      return eventKeyCode === undefined;\n  }\n\n  /**\n   * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n   */\n  function bindObjectProps(data, tag, value, asProp, isSync) {\n      if (value) {\n          if (!isObject(value)) {\n              warn$2('v-bind without argument expects an Object or Array value', this);\n          }\n          else {\n              if (isArray(value)) {\n                  value = toObject(value);\n              }\n              var hash = void 0;\n              var _loop_1 = function (key) {\n                  if (key === 'class' || key === 'style' || isReservedAttribute(key)) {\n                      hash = data;\n                  }\n                  else {\n                      var type = data.attrs && data.attrs.type;\n                      hash =\n                          asProp || config.mustUseProp(tag, type, key)\n                              ? data.domProps || (data.domProps = {})\n                              : data.attrs || (data.attrs = {});\n                  }\n                  var camelizedKey = camelize(key);\n                  var hyphenatedKey = hyphenate(key);\n                  if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n                      hash[key] = value[key];\n                      if (isSync) {\n                          var on = data.on || (data.on = {});\n                          on[\"update:\".concat(key)] = function ($event) {\n                              value[key] = $event;\n                          };\n                      }\n                  }\n              };\n              for (var key in value) {\n                  _loop_1(key);\n              }\n          }\n      }\n      return data;\n  }\n\n  /**\n   * Runtime helper for rendering static trees.\n   */\n  function renderStatic(index, isInFor) {\n      var cached = this._staticTrees || (this._staticTrees = []);\n      var tree = cached[index];\n      // if has already-rendered static tree and not inside v-for,\n      // we can reuse the same tree.\n      if (tree && !isInFor) {\n          return tree;\n      }\n      // otherwise, render a fresh tree.\n      tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, this._c, this // for render fns generated for functional component templates\n      );\n      markStatic$1(tree, \"__static__\".concat(index), false);\n      return tree;\n  }\n  /**\n   * Runtime helper for v-once.\n   * Effectively it means marking the node as static with a unique key.\n   */\n  function markOnce(tree, index, key) {\n      markStatic$1(tree, \"__once__\".concat(index).concat(key ? \"_\".concat(key) : \"\"), true);\n      return tree;\n  }\n  function markStatic$1(tree, key, isOnce) {\n      if (isArray(tree)) {\n          for (var i = 0; i < tree.length; i++) {\n              if (tree[i] && typeof tree[i] !== 'string') {\n                  markStaticNode(tree[i], \"\".concat(key, \"_\").concat(i), isOnce);\n              }\n          }\n      }\n      else {\n          markStaticNode(tree, key, isOnce);\n      }\n  }\n  function markStaticNode(node, key, isOnce) {\n      node.isStatic = true;\n      node.key = key;\n      node.isOnce = isOnce;\n  }\n\n  function bindObjectListeners(data, value) {\n      if (value) {\n          if (!isPlainObject(value)) {\n              warn$2('v-on without argument expects an Object value', this);\n          }\n          else {\n              var on = (data.on = data.on ? extend({}, data.on) : {});\n              for (var key in value) {\n                  var existing = on[key];\n                  var ours = value[key];\n                  on[key] = existing ? [].concat(existing, ours) : ours;\n              }\n          }\n      }\n      return data;\n  }\n\n  function resolveScopedSlots(fns, res, \n  // the following are added in 2.6\n  hasDynamicKeys, contentHashKey) {\n      res = res || { $stable: !hasDynamicKeys };\n      for (var i = 0; i < fns.length; i++) {\n          var slot = fns[i];\n          if (isArray(slot)) {\n              resolveScopedSlots(slot, res, hasDynamicKeys);\n          }\n          else if (slot) {\n              // marker for reverse proxying v-slot without scope on this.$slots\n              // @ts-expect-error\n              if (slot.proxy) {\n                  // @ts-expect-error\n                  slot.fn.proxy = true;\n              }\n              res[slot.key] = slot.fn;\n          }\n      }\n      if (contentHashKey) {\n          res.$key = contentHashKey;\n      }\n      return res;\n  }\n\n  // helper to process dynamic keys for dynamic arguments in v-bind and v-on.\n  function bindDynamicKeys(baseObj, values) {\n      for (var i = 0; i < values.length; i += 2) {\n          var key = values[i];\n          if (typeof key === 'string' && key) {\n              baseObj[values[i]] = values[i + 1];\n          }\n          else if (key !== '' && key !== null) {\n              // null is a special value for explicitly removing a binding\n              warn$2(\"Invalid value for dynamic directive argument (expected string or null): \".concat(key), this);\n          }\n      }\n      return baseObj;\n  }\n  // helper to dynamically append modifier runtime markers to event names.\n  // ensure only append when value is already string, otherwise it will be cast\n  // to string and cause the type check to miss.\n  function prependModifier(value, symbol) {\n      return typeof value === 'string' ? symbol + value : value;\n  }\n\n  function installRenderHelpers(target) {\n      target._o = markOnce;\n      target._n = toNumber;\n      target._s = toString;\n      target._l = renderList;\n      target._t = renderSlot;\n      target._q = looseEqual;\n      target._i = looseIndexOf;\n      target._m = renderStatic;\n      target._f = resolveFilter;\n      target._k = checkKeyCodes;\n      target._b = bindObjectProps;\n      target._v = createTextVNode;\n      target._e = createEmptyVNode;\n      target._u = resolveScopedSlots;\n      target._g = bindObjectListeners;\n      target._d = bindDynamicKeys;\n      target._p = prependModifier;\n  }\n\n  /**\n   * Runtime helper for resolving raw children VNodes into a slot object.\n   */\n  function resolveSlots(children, context) {\n      if (!children || !children.length) {\n          return {};\n      }\n      var slots = {};\n      for (var i = 0, l = children.length; i < l; i++) {\n          var child = children[i];\n          var data = child.data;\n          // remove slot attribute if the node is resolved as a Vue slot node\n          if (data && data.attrs && data.attrs.slot) {\n              delete data.attrs.slot;\n          }\n          // named slots should only be respected if the vnode was rendered in the\n          // same context.\n          if ((child.context === context || child.fnContext === context) &&\n              data &&\n              data.slot != null) {\n              var name_1 = data.slot;\n              var slot = slots[name_1] || (slots[name_1] = []);\n              if (child.tag === 'template') {\n                  slot.push.apply(slot, child.children || []);\n              }\n              else {\n                  slot.push(child);\n              }\n          }\n          else {\n              (slots.default || (slots.default = [])).push(child);\n          }\n      }\n      // ignore slots that contains only whitespace\n      for (var name_2 in slots) {\n          if (slots[name_2].every(isWhitespace)) {\n              delete slots[name_2];\n          }\n      }\n      return slots;\n  }\n  function isWhitespace(node) {\n      return (node.isComment && !node.asyncFactory) || node.text === ' ';\n  }\n\n  function isAsyncPlaceholder(node) {\n      // @ts-expect-error not really boolean type\n      return node.isComment && node.asyncFactory;\n  }\n\n  function normalizeScopedSlots(ownerVm, scopedSlots, normalSlots, prevScopedSlots) {\n      var res;\n      var hasNormalSlots = Object.keys(normalSlots).length > 0;\n      var isStable = scopedSlots ? !!scopedSlots.$stable : !hasNormalSlots;\n      var key = scopedSlots && scopedSlots.$key;\n      if (!scopedSlots) {\n          res = {};\n      }\n      else if (scopedSlots._normalized) {\n          // fast path 1: child component re-render only, parent did not change\n          return scopedSlots._normalized;\n      }\n      else if (isStable &&\n          prevScopedSlots &&\n          prevScopedSlots !== emptyObject &&\n          key === prevScopedSlots.$key &&\n          !hasNormalSlots &&\n          !prevScopedSlots.$hasNormal) {\n          // fast path 2: stable scoped slots w/ no normal slots to proxy,\n          // only need to normalize once\n          return prevScopedSlots;\n      }\n      else {\n          res = {};\n          for (var key_1 in scopedSlots) {\n              if (scopedSlots[key_1] && key_1[0] !== '$') {\n                  res[key_1] = normalizeScopedSlot(ownerVm, normalSlots, key_1, scopedSlots[key_1]);\n              }\n          }\n      }\n      // expose normal slots on scopedSlots\n      for (var key_2 in normalSlots) {\n          if (!(key_2 in res)) {\n              res[key_2] = proxyNormalSlot(normalSlots, key_2);\n          }\n      }\n      // avoriaz seems to mock a non-extensible $scopedSlots object\n      // and when that is passed down this would cause an error\n      if (scopedSlots && Object.isExtensible(scopedSlots)) {\n          scopedSlots._normalized = res;\n      }\n      def(res, '$stable', isStable);\n      def(res, '$key', key);\n      def(res, '$hasNormal', hasNormalSlots);\n      return res;\n  }\n  function normalizeScopedSlot(vm, normalSlots, key, fn) {\n      var normalized = function () {\n          var cur = currentInstance;\n          setCurrentInstance(vm);\n          var res = arguments.length ? fn.apply(null, arguments) : fn({});\n          res =\n              res && typeof res === 'object' && !isArray(res)\n                  ? [res] // single vnode\n                  : normalizeChildren(res);\n          var vnode = res && res[0];\n          setCurrentInstance(cur);\n          return res &&\n              (!vnode ||\n                  (res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode))) // #9658, #10391\n              ? undefined\n              : res;\n      };\n      // this is a slot using the new v-slot syntax without scope. although it is\n      // compiled as a scoped slot, render fn users would expect it to be present\n      // on this.$slots because the usage is semantically a normal slot.\n      if (fn.proxy) {\n          Object.defineProperty(normalSlots, key, {\n              get: normalized,\n              enumerable: true,\n              configurable: true\n          });\n      }\n      return normalized;\n  }\n  function proxyNormalSlot(slots, key) {\n      return function () { return slots[key]; };\n  }\n\n  function initSetup(vm) {\n      var options = vm.$options;\n      var setup = options.setup;\n      if (setup) {\n          var ctx = (vm._setupContext = createSetupContext(vm));\n          setCurrentInstance(vm);\n          pushTarget();\n          var setupResult = invokeWithErrorHandling(setup, null, [vm._props || shallowReactive({}), ctx], vm, \"setup\");\n          popTarget();\n          setCurrentInstance();\n          if (isFunction(setupResult)) {\n              // render function\n              // @ts-ignore\n              options.render = setupResult;\n          }\n          else if (isObject(setupResult)) {\n              // bindings\n              if (setupResult instanceof VNode) {\n                  warn$2(\"setup() should not return VNodes directly - \" +\n                      \"return a render function instead.\");\n              }\n              vm._setupState = setupResult;\n              // __sfc indicates compiled bindings from <script setup>\n              if (!setupResult.__sfc) {\n                  for (var key in setupResult) {\n                      if (!isReserved(key)) {\n                          proxyWithRefUnwrap(vm, setupResult, key);\n                      }\n                      else {\n                          warn$2(\"Avoid using variables that start with _ or $ in setup().\");\n                      }\n                  }\n              }\n              else {\n                  // exposed for compiled render fn\n                  var proxy = (vm._setupProxy = {});\n                  for (var key in setupResult) {\n                      if (key !== '__sfc') {\n                          proxyWithRefUnwrap(proxy, setupResult, key);\n                      }\n                  }\n              }\n          }\n          else if (setupResult !== undefined) {\n              warn$2(\"setup() should return an object. Received: \".concat(setupResult === null ? 'null' : typeof setupResult));\n          }\n      }\n  }\n  function createSetupContext(vm) {\n      var exposeCalled = false;\n      return {\n          get attrs() {\n              if (!vm._attrsProxy) {\n                  var proxy = (vm._attrsProxy = {});\n                  def(proxy, '_v_attr_proxy', true);\n                  syncSetupProxy(proxy, vm.$attrs, emptyObject, vm, '$attrs');\n              }\n              return vm._attrsProxy;\n          },\n          get listeners() {\n              if (!vm._listenersProxy) {\n                  var proxy = (vm._listenersProxy = {});\n                  syncSetupProxy(proxy, vm.$listeners, emptyObject, vm, '$listeners');\n              }\n              return vm._listenersProxy;\n          },\n          get slots() {\n              return initSlotsProxy(vm);\n          },\n          emit: bind$1(vm.$emit, vm),\n          expose: function (exposed) {\n              {\n                  if (exposeCalled) {\n                      warn$2(\"expose() should be called only once per setup().\", vm);\n                  }\n                  exposeCalled = true;\n              }\n              if (exposed) {\n                  Object.keys(exposed).forEach(function (key) {\n                      return proxyWithRefUnwrap(vm, exposed, key);\n                  });\n              }\n          }\n      };\n  }\n  function syncSetupProxy(to, from, prev, instance, type) {\n      var changed = false;\n      for (var key in from) {\n          if (!(key in to)) {\n              changed = true;\n              defineProxyAttr(to, key, instance, type);\n          }\n          else if (from[key] !== prev[key]) {\n              changed = true;\n          }\n      }\n      for (var key in to) {\n          if (!(key in from)) {\n              changed = true;\n              delete to[key];\n          }\n      }\n      return changed;\n  }\n  function defineProxyAttr(proxy, key, instance, type) {\n      Object.defineProperty(proxy, key, {\n          enumerable: true,\n          configurable: true,\n          get: function () {\n              return instance[type][key];\n          }\n      });\n  }\n  function initSlotsProxy(vm) {\n      if (!vm._slotsProxy) {\n          syncSetupSlots((vm._slotsProxy = {}), vm.$scopedSlots);\n      }\n      return vm._slotsProxy;\n  }\n  function syncSetupSlots(to, from) {\n      for (var key in from) {\n          to[key] = from[key];\n      }\n      for (var key in to) {\n          if (!(key in from)) {\n              delete to[key];\n          }\n      }\n  }\n  /**\n   * @internal use manual type def because public setup context type relies on\n   * legacy VNode types\n   */\n  function useSlots() {\n      return getContext().slots;\n  }\n  /**\n   * @internal use manual type def because public setup context type relies on\n   * legacy VNode types\n   */\n  function useAttrs() {\n      return getContext().attrs;\n  }\n  /**\n   * Vue 2 only\n   * @internal use manual type def because public setup context type relies on\n   * legacy VNode types\n   */\n  function useListeners() {\n      return getContext().listeners;\n  }\n  function getContext() {\n      if (!currentInstance) {\n          warn$2(\"useContext() called without active instance.\");\n      }\n      var vm = currentInstance;\n      return vm._setupContext || (vm._setupContext = createSetupContext(vm));\n  }\n  /**\n   * Runtime helper for merging default declarations. Imported by compiled code\n   * only.\n   * @internal\n   */\n  function mergeDefaults(raw, defaults) {\n      var props = isArray(raw)\n          ? raw.reduce(function (normalized, p) { return ((normalized[p] = {}), normalized); }, {})\n          : raw;\n      for (var key in defaults) {\n          var opt = props[key];\n          if (opt) {\n              if (isArray(opt) || isFunction(opt)) {\n                  props[key] = { type: opt, default: defaults[key] };\n              }\n              else {\n                  opt.default = defaults[key];\n              }\n          }\n          else if (opt === null) {\n              props[key] = { default: defaults[key] };\n          }\n          else {\n              warn$2(\"props default key \\\"\".concat(key, \"\\\" has no corresponding declaration.\"));\n          }\n      }\n      return props;\n  }\n\n  function initRender(vm) {\n      vm._vnode = null; // the root of the child tree\n      vm._staticTrees = null; // v-once cached trees\n      var options = vm.$options;\n      var parentVnode = (vm.$vnode = options._parentVnode); // the placeholder node in parent tree\n      var renderContext = parentVnode && parentVnode.context;\n      vm.$slots = resolveSlots(options._renderChildren, renderContext);\n      vm.$scopedSlots = parentVnode\n          ? normalizeScopedSlots(vm.$parent, parentVnode.data.scopedSlots, vm.$slots)\n          : emptyObject;\n      // bind the createElement fn to this instance\n      // so that we get proper render context inside it.\n      // args order: tag, data, children, normalizationType, alwaysNormalize\n      // internal version is used by render functions compiled from templates\n      // @ts-expect-error\n      vm._c = function (a, b, c, d) { return createElement$1(vm, a, b, c, d, false); };\n      // normalization is always applied for the public version, used in\n      // user-written render functions.\n      // @ts-expect-error\n      vm.$createElement = function (a, b, c, d) { return createElement$1(vm, a, b, c, d, true); };\n      // $attrs & $listeners are exposed for easier HOC creation.\n      // they need to be reactive so that HOCs using them are always updated\n      var parentData = parentVnode && parentVnode.data;\n      /* istanbul ignore else */\n      {\n          defineReactive(vm, '$attrs', (parentData && parentData.attrs) || emptyObject, function () {\n              !isUpdatingChildComponent && warn$2(\"$attrs is readonly.\", vm);\n          }, true);\n          defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n              !isUpdatingChildComponent && warn$2(\"$listeners is readonly.\", vm);\n          }, true);\n      }\n  }\n  var currentRenderingInstance = null;\n  function renderMixin(Vue) {\n      // install runtime convenience helpers\n      installRenderHelpers(Vue.prototype);\n      Vue.prototype.$nextTick = function (fn) {\n          return nextTick(fn, this);\n      };\n      Vue.prototype._render = function () {\n          var vm = this;\n          var _a = vm.$options, render = _a.render, _parentVnode = _a._parentVnode;\n          if (_parentVnode && vm._isMounted) {\n              vm.$scopedSlots = normalizeScopedSlots(vm.$parent, _parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);\n              if (vm._slotsProxy) {\n                  syncSetupSlots(vm._slotsProxy, vm.$scopedSlots);\n              }\n          }\n          // set parent vnode. this allows render functions to have access\n          // to the data on the placeholder node.\n          vm.$vnode = _parentVnode;\n          // render self\n          var vnode;\n          try {\n              // There's no need to maintain a stack because all render fns are called\n              // separately from one another. Nested component's render fns are called\n              // when parent component is patched.\n              setCurrentInstance(vm);\n              currentRenderingInstance = vm;\n              vnode = render.call(vm._renderProxy, vm.$createElement);\n          }\n          catch (e) {\n              handleError(e, vm, \"render\");\n              // return error render result,\n              // or previous vnode to prevent render error causing blank component\n              /* istanbul ignore else */\n              if (vm.$options.renderError) {\n                  try {\n                      vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n                  }\n                  catch (e) {\n                      handleError(e, vm, \"renderError\");\n                      vnode = vm._vnode;\n                  }\n              }\n              else {\n                  vnode = vm._vnode;\n              }\n          }\n          finally {\n              currentRenderingInstance = null;\n              setCurrentInstance();\n          }\n          // if the returned array contains only a single node, allow it\n          if (isArray(vnode) && vnode.length === 1) {\n              vnode = vnode[0];\n          }\n          // return empty vnode in case the render function errored out\n          if (!(vnode instanceof VNode)) {\n              if (isArray(vnode)) {\n                  warn$2('Multiple root nodes returned from render function. Render function ' +\n                      'should return a single root node.', vm);\n              }\n              vnode = createEmptyVNode();\n          }\n          // set parent\n          vnode.parent = _parentVnode;\n          return vnode;\n      };\n  }\n\n  function ensureCtor(comp, base) {\n      if (comp.__esModule || (hasSymbol && comp[Symbol.toStringTag] === 'Module')) {\n          comp = comp.default;\n      }\n      return isObject(comp) ? base.extend(comp) : comp;\n  }\n  function createAsyncPlaceholder(factory, data, context, children, tag) {\n      var node = createEmptyVNode();\n      node.asyncFactory = factory;\n      node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n      return node;\n  }\n  function resolveAsyncComponent(factory, baseCtor) {\n      if (isTrue(factory.error) && isDef(factory.errorComp)) {\n          return factory.errorComp;\n      }\n      if (isDef(factory.resolved)) {\n          return factory.resolved;\n      }\n      var owner = currentRenderingInstance;\n      if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n          // already pending\n          factory.owners.push(owner);\n      }\n      if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n          return factory.loadingComp;\n      }\n      if (owner && !isDef(factory.owners)) {\n          var owners_1 = (factory.owners = [owner]);\n          var sync_1 = true;\n          var timerLoading_1 = null;\n          var timerTimeout_1 = null;\n          owner.$on('hook:destroyed', function () { return remove$2(owners_1, owner); });\n          var forceRender_1 = function (renderCompleted) {\n              for (var i = 0, l = owners_1.length; i < l; i++) {\n                  owners_1[i].$forceUpdate();\n              }\n              if (renderCompleted) {\n                  owners_1.length = 0;\n                  if (timerLoading_1 !== null) {\n                      clearTimeout(timerLoading_1);\n                      timerLoading_1 = null;\n                  }\n                  if (timerTimeout_1 !== null) {\n                      clearTimeout(timerTimeout_1);\n                      timerTimeout_1 = null;\n                  }\n              }\n          };\n          var resolve = once(function (res) {\n              // cache resolved\n              factory.resolved = ensureCtor(res, baseCtor);\n              // invoke callbacks only if this is not a synchronous resolve\n              // (async resolves are shimmed as synchronous during SSR)\n              if (!sync_1) {\n                  forceRender_1(true);\n              }\n              else {\n                  owners_1.length = 0;\n              }\n          });\n          var reject_1 = once(function (reason) {\n              warn$2(\"Failed to resolve async component: \".concat(String(factory)) +\n                      (reason ? \"\\nReason: \".concat(reason) : ''));\n              if (isDef(factory.errorComp)) {\n                  factory.error = true;\n                  forceRender_1(true);\n              }\n          });\n          var res_1 = factory(resolve, reject_1);\n          if (isObject(res_1)) {\n              if (isPromise(res_1)) {\n                  // () => Promise\n                  if (isUndef(factory.resolved)) {\n                      res_1.then(resolve, reject_1);\n                  }\n              }\n              else if (isPromise(res_1.component)) {\n                  res_1.component.then(resolve, reject_1);\n                  if (isDef(res_1.error)) {\n                      factory.errorComp = ensureCtor(res_1.error, baseCtor);\n                  }\n                  if (isDef(res_1.loading)) {\n                      factory.loadingComp = ensureCtor(res_1.loading, baseCtor);\n                      if (res_1.delay === 0) {\n                          factory.loading = true;\n                      }\n                      else {\n                          // @ts-expect-error NodeJS timeout type\n                          timerLoading_1 = setTimeout(function () {\n                              timerLoading_1 = null;\n                              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                                  factory.loading = true;\n                                  forceRender_1(false);\n                              }\n                          }, res_1.delay || 200);\n                      }\n                  }\n                  if (isDef(res_1.timeout)) {\n                      // @ts-expect-error NodeJS timeout type\n                      timerTimeout_1 = setTimeout(function () {\n                          timerTimeout_1 = null;\n                          if (isUndef(factory.resolved)) {\n                              reject_1(\"timeout (\".concat(res_1.timeout, \"ms)\") );\n                          }\n                      }, res_1.timeout);\n                  }\n              }\n          }\n          sync_1 = false;\n          // return in case resolved synchronously\n          return factory.loading ? factory.loadingComp : factory.resolved;\n      }\n  }\n\n  function getFirstComponentChild(children) {\n      if (isArray(children)) {\n          for (var i = 0; i < children.length; i++) {\n              var c = children[i];\n              if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n                  return c;\n              }\n          }\n      }\n  }\n\n  function initEvents(vm) {\n      vm._events = Object.create(null);\n      vm._hasHookEvent = false;\n      // init parent attached events\n      var listeners = vm.$options._parentListeners;\n      if (listeners) {\n          updateComponentListeners(vm, listeners);\n      }\n  }\n  var target$1;\n  function add$1(event, fn) {\n      target$1.$on(event, fn);\n  }\n  function remove$1(event, fn) {\n      target$1.$off(event, fn);\n  }\n  function createOnceHandler$1(event, fn) {\n      var _target = target$1;\n      return function onceHandler() {\n          var res = fn.apply(null, arguments);\n          if (res !== null) {\n              _target.$off(event, onceHandler);\n          }\n      };\n  }\n  function updateComponentListeners(vm, listeners, oldListeners) {\n      target$1 = vm;\n      updateListeners(listeners, oldListeners || {}, add$1, remove$1, createOnceHandler$1, vm);\n      target$1 = undefined;\n  }\n  function eventsMixin(Vue) {\n      var hookRE = /^hook:/;\n      Vue.prototype.$on = function (event, fn) {\n          var vm = this;\n          if (isArray(event)) {\n              for (var i = 0, l = event.length; i < l; i++) {\n                  vm.$on(event[i], fn);\n              }\n          }\n          else {\n              (vm._events[event] || (vm._events[event] = [])).push(fn);\n              // optimize hook:event cost by using a boolean flag marked at registration\n              // instead of a hash lookup\n              if (hookRE.test(event)) {\n                  vm._hasHookEvent = true;\n              }\n          }\n          return vm;\n      };\n      Vue.prototype.$once = function (event, fn) {\n          var vm = this;\n          function on() {\n              vm.$off(event, on);\n              fn.apply(vm, arguments);\n          }\n          on.fn = fn;\n          vm.$on(event, on);\n          return vm;\n      };\n      Vue.prototype.$off = function (event, fn) {\n          var vm = this;\n          // all\n          if (!arguments.length) {\n              vm._events = Object.create(null);\n              return vm;\n          }\n          // array of events\n          if (isArray(event)) {\n              for (var i_1 = 0, l = event.length; i_1 < l; i_1++) {\n                  vm.$off(event[i_1], fn);\n              }\n              return vm;\n          }\n          // specific event\n          var cbs = vm._events[event];\n          if (!cbs) {\n              return vm;\n          }\n          if (!fn) {\n              vm._events[event] = null;\n              return vm;\n          }\n          // specific handler\n          var cb;\n          var i = cbs.length;\n          while (i--) {\n              cb = cbs[i];\n              if (cb === fn || cb.fn === fn) {\n                  cbs.splice(i, 1);\n                  break;\n              }\n          }\n          return vm;\n      };\n      Vue.prototype.$emit = function (event) {\n          var vm = this;\n          {\n              var lowerCaseEvent = event.toLowerCase();\n              if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n                  tip(\"Event \\\"\".concat(lowerCaseEvent, \"\\\" is emitted in component \") +\n                      \"\".concat(formatComponentName(vm), \" but the handler is registered for \\\"\").concat(event, \"\\\". \") +\n                      \"Note that HTML attributes are case-insensitive and you cannot use \" +\n                      \"v-on to listen to camelCase events when using in-DOM templates. \" +\n                      \"You should probably use \\\"\".concat(hyphenate(event), \"\\\" instead of \\\"\").concat(event, \"\\\".\"));\n              }\n          }\n          var cbs = vm._events[event];\n          if (cbs) {\n              cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n              var args = toArray(arguments, 1);\n              var info = \"event handler for \\\"\".concat(event, \"\\\"\");\n              for (var i = 0, l = cbs.length; i < l; i++) {\n                  invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n              }\n          }\n          return vm;\n      };\n  }\n\n  var activeInstance = null;\n  var isUpdatingChildComponent = false;\n  function setActiveInstance(vm) {\n      var prevActiveInstance = activeInstance;\n      activeInstance = vm;\n      return function () {\n          activeInstance = prevActiveInstance;\n      };\n  }\n  function initLifecycle(vm) {\n      var options = vm.$options;\n      // locate first non-abstract parent\n      var parent = options.parent;\n      if (parent && !options.abstract) {\n          while (parent.$options.abstract && parent.$parent) {\n              parent = parent.$parent;\n          }\n          parent.$children.push(vm);\n      }\n      vm.$parent = parent;\n      vm.$root = parent ? parent.$root : vm;\n      vm.$children = [];\n      vm.$refs = {};\n      vm._provided = parent ? parent._provided : Object.create(null);\n      vm._watcher = null;\n      vm._inactive = null;\n      vm._directInactive = false;\n      vm._isMounted = false;\n      vm._isDestroyed = false;\n      vm._isBeingDestroyed = false;\n  }\n  function lifecycleMixin(Vue) {\n      Vue.prototype._update = function (vnode, hydrating) {\n          var vm = this;\n          var prevEl = vm.$el;\n          var prevVnode = vm._vnode;\n          var restoreActiveInstance = setActiveInstance(vm);\n          vm._vnode = vnode;\n          // Vue.prototype.__patch__ is injected in entry points\n          // based on the rendering backend used.\n          if (!prevVnode) {\n              // initial render\n              vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n          }\n          else {\n              // updates\n              vm.$el = vm.__patch__(prevVnode, vnode);\n          }\n          restoreActiveInstance();\n          // update __vue__ reference\n          if (prevEl) {\n              prevEl.__vue__ = null;\n          }\n          if (vm.$el) {\n              vm.$el.__vue__ = vm;\n          }\n          // if parent is an HOC, update its $el as well\n          var wrapper = vm;\n          while (wrapper &&\n              wrapper.$vnode &&\n              wrapper.$parent &&\n              wrapper.$vnode === wrapper.$parent._vnode) {\n              wrapper.$parent.$el = wrapper.$el;\n              wrapper = wrapper.$parent;\n          }\n          // updated hook is called by the scheduler to ensure that children are\n          // updated in a parent's updated hook.\n      };\n      Vue.prototype.$forceUpdate = function () {\n          var vm = this;\n          if (vm._watcher) {\n              vm._watcher.update();\n          }\n      };\n      Vue.prototype.$destroy = function () {\n          var vm = this;\n          if (vm._isBeingDestroyed) {\n              return;\n          }\n          callHook$1(vm, 'beforeDestroy');\n          vm._isBeingDestroyed = true;\n          // remove self from parent\n          var parent = vm.$parent;\n          if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n              remove$2(parent.$children, vm);\n          }\n          // teardown scope. this includes both the render watcher and other\n          // watchers created\n          vm._scope.stop();\n          // remove reference from data ob\n          // frozen object may not have observer.\n          if (vm._data.__ob__) {\n              vm._data.__ob__.vmCount--;\n          }\n          // call the last hook...\n          vm._isDestroyed = true;\n          // invoke destroy hooks on current rendered tree\n          vm.__patch__(vm._vnode, null);\n          // fire destroyed hook\n          callHook$1(vm, 'destroyed');\n          // turn off all instance listeners.\n          vm.$off();\n          // remove __vue__ reference\n          if (vm.$el) {\n              vm.$el.__vue__ = null;\n          }\n          // release circular reference (#6759)\n          if (vm.$vnode) {\n              vm.$vnode.parent = null;\n          }\n      };\n  }\n  function mountComponent(vm, el, hydrating) {\n      vm.$el = el;\n      if (!vm.$options.render) {\n          // @ts-expect-error invalid type\n          vm.$options.render = createEmptyVNode;\n          {\n              /* istanbul ignore if */\n              if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n                  vm.$options.el ||\n                  el) {\n                  warn$2('You are using the runtime-only build of Vue where the template ' +\n                      'compiler is not available. Either pre-compile the templates into ' +\n                      'render functions, or use the compiler-included build.', vm);\n              }\n              else {\n                  warn$2('Failed to mount component: template or render function not defined.', vm);\n              }\n          }\n      }\n      callHook$1(vm, 'beforeMount');\n      var updateComponent;\n      /* istanbul ignore if */\n      if (config.performance && mark) {\n          updateComponent = function () {\n              var name = vm._name;\n              var id = vm._uid;\n              var startTag = \"vue-perf-start:\".concat(id);\n              var endTag = \"vue-perf-end:\".concat(id);\n              mark(startTag);\n              var vnode = vm._render();\n              mark(endTag);\n              measure(\"vue \".concat(name, \" render\"), startTag, endTag);\n              mark(startTag);\n              vm._update(vnode, hydrating);\n              mark(endTag);\n              measure(\"vue \".concat(name, \" patch\"), startTag, endTag);\n          };\n      }\n      else {\n          updateComponent = function () {\n              vm._update(vm._render(), hydrating);\n          };\n      }\n      var watcherOptions = {\n          before: function () {\n              if (vm._isMounted && !vm._isDestroyed) {\n                  callHook$1(vm, 'beforeUpdate');\n              }\n          }\n      };\n      {\n          watcherOptions.onTrack = function (e) { return callHook$1(vm, 'renderTracked', [e]); };\n          watcherOptions.onTrigger = function (e) { return callHook$1(vm, 'renderTriggered', [e]); };\n      }\n      // we set this to vm._watcher inside the watcher's constructor\n      // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n      // component's mounted hook), which relies on vm._watcher being already defined\n      new Watcher(vm, updateComponent, noop, watcherOptions, true /* isRenderWatcher */);\n      hydrating = false;\n      // flush buffer for flush: \"pre\" watchers queued in setup()\n      var preWatchers = vm._preWatchers;\n      if (preWatchers) {\n          for (var i = 0; i < preWatchers.length; i++) {\n              preWatchers[i].run();\n          }\n      }\n      // manually mounted instance, call mounted on self\n      // mounted is called for render-created child components in its inserted hook\n      if (vm.$vnode == null) {\n          vm._isMounted = true;\n          callHook$1(vm, 'mounted');\n      }\n      return vm;\n  }\n  function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {\n      {\n          isUpdatingChildComponent = true;\n      }\n      // determine whether component has slot children\n      // we need to do this before overwriting $options._renderChildren.\n      // check if there are dynamic scopedSlots (hand-written or compiled but with\n      // dynamic slot names). Static scoped slots compiled from template has the\n      // \"$stable\" marker.\n      var newScopedSlots = parentVnode.data.scopedSlots;\n      var oldScopedSlots = vm.$scopedSlots;\n      var hasDynamicScopedSlot = !!((newScopedSlots && !newScopedSlots.$stable) ||\n          (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n          (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key) ||\n          (!newScopedSlots && vm.$scopedSlots.$key));\n      // Any static slot children from the parent may have changed during parent's\n      // update. Dynamic scoped slots may also have changed. In such cases, a forced\n      // update is necessary to ensure correctness.\n      var needsForceUpdate = !!(renderChildren || // has new static slots\n          vm.$options._renderChildren || // has old static slots\n          hasDynamicScopedSlot);\n      var prevVNode = vm.$vnode;\n      vm.$options._parentVnode = parentVnode;\n      vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n      if (vm._vnode) {\n          // update child tree's parent\n          vm._vnode.parent = parentVnode;\n      }\n      vm.$options._renderChildren = renderChildren;\n      // update $attrs and $listeners hash\n      // these are also reactive so they may trigger child update if the child\n      // used them during render\n      var attrs = parentVnode.data.attrs || emptyObject;\n      if (vm._attrsProxy) {\n          // force update if attrs are accessed and has changed since it may be\n          // passed to a child component.\n          if (syncSetupProxy(vm._attrsProxy, attrs, (prevVNode.data && prevVNode.data.attrs) || emptyObject, vm, '$attrs')) {\n              needsForceUpdate = true;\n          }\n      }\n      vm.$attrs = attrs;\n      // update listeners\n      listeners = listeners || emptyObject;\n      var prevListeners = vm.$options._parentListeners;\n      if (vm._listenersProxy) {\n          syncSetupProxy(vm._listenersProxy, listeners, prevListeners || emptyObject, vm, '$listeners');\n      }\n      vm.$listeners = vm.$options._parentListeners = listeners;\n      updateComponentListeners(vm, listeners, prevListeners);\n      // update props\n      if (propsData && vm.$options.props) {\n          toggleObserving(false);\n          var props = vm._props;\n          var propKeys = vm.$options._propKeys || [];\n          for (var i = 0; i < propKeys.length; i++) {\n              var key = propKeys[i];\n              var propOptions = vm.$options.props; // wtf flow?\n              props[key] = validateProp(key, propOptions, propsData, vm);\n          }\n          toggleObserving(true);\n          // keep a copy of raw propsData\n          vm.$options.propsData = propsData;\n      }\n      // resolve slots + force update if has children\n      if (needsForceUpdate) {\n          vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n          vm.$forceUpdate();\n      }\n      {\n          isUpdatingChildComponent = false;\n      }\n  }\n  function isInInactiveTree(vm) {\n      while (vm && (vm = vm.$parent)) {\n          if (vm._inactive)\n              return true;\n      }\n      return false;\n  }\n  function activateChildComponent(vm, direct) {\n      if (direct) {\n          vm._directInactive = false;\n          if (isInInactiveTree(vm)) {\n              return;\n          }\n      }\n      else if (vm._directInactive) {\n          return;\n      }\n      if (vm._inactive || vm._inactive === null) {\n          vm._inactive = false;\n          for (var i = 0; i < vm.$children.length; i++) {\n              activateChildComponent(vm.$children[i]);\n          }\n          callHook$1(vm, 'activated');\n      }\n  }\n  function deactivateChildComponent(vm, direct) {\n      if (direct) {\n          vm._directInactive = true;\n          if (isInInactiveTree(vm)) {\n              return;\n          }\n      }\n      if (!vm._inactive) {\n          vm._inactive = true;\n          for (var i = 0; i < vm.$children.length; i++) {\n              deactivateChildComponent(vm.$children[i]);\n          }\n          callHook$1(vm, 'deactivated');\n      }\n  }\n  function callHook$1(vm, hook, args, setContext) {\n      if (setContext === void 0) { setContext = true; }\n      // #7573 disable dep collection when invoking lifecycle hooks\n      pushTarget();\n      var prev = currentInstance;\n      setContext && setCurrentInstance(vm);\n      var handlers = vm.$options[hook];\n      var info = \"\".concat(hook, \" hook\");\n      if (handlers) {\n          for (var i = 0, j = handlers.length; i < j; i++) {\n              invokeWithErrorHandling(handlers[i], vm, args || null, vm, info);\n          }\n      }\n      if (vm._hasHookEvent) {\n          vm.$emit('hook:' + hook);\n      }\n      setContext && setCurrentInstance(prev);\n      popTarget();\n  }\n\n  var MAX_UPDATE_COUNT = 100;\n  var queue = [];\n  var activatedChildren = [];\n  var has = {};\n  var circular = {};\n  var waiting = false;\n  var flushing = false;\n  var index$1 = 0;\n  /**\n   * Reset the scheduler's state.\n   */\n  function resetSchedulerState() {\n      index$1 = queue.length = activatedChildren.length = 0;\n      has = {};\n      {\n          circular = {};\n      }\n      waiting = flushing = false;\n  }\n  // Async edge case #6566 requires saving the timestamp when event listeners are\n  // attached. However, calling performance.now() has a perf overhead especially\n  // if the page has thousands of event listeners. Instead, we take a timestamp\n  // every time the scheduler flushes and use that for all event listeners\n  // attached during that flush.\n  var currentFlushTimestamp = 0;\n  // Async edge case fix requires storing an event listener's attach timestamp.\n  var getNow = Date.now;\n  // Determine what event timestamp the browser is using. Annoyingly, the\n  // timestamp can either be hi-res (relative to page load) or low-res\n  // (relative to UNIX epoch), so in order to compare time we have to use the\n  // same timestamp type when saving the flush timestamp.\n  // All IE versions use low-res event timestamps, and have problematic clock\n  // implementations (#9632)\n  if (inBrowser && !isIE) {\n      var performance_1 = window.performance;\n      if (performance_1 &&\n          typeof performance_1.now === 'function' &&\n          getNow() > document.createEvent('Event').timeStamp) {\n          // if the event timestamp, although evaluated AFTER the Date.now(), is\n          // smaller than it, it means the event is using a hi-res timestamp,\n          // and we need to use the hi-res version for event listener timestamps as\n          // well.\n          getNow = function () { return performance_1.now(); };\n      }\n  }\n  var sortCompareFn = function (a, b) {\n      if (a.post) {\n          if (!b.post)\n              return 1;\n      }\n      else if (b.post) {\n          return -1;\n      }\n      return a.id - b.id;\n  };\n  /**\n   * Flush both queues and run the watchers.\n   */\n  function flushSchedulerQueue() {\n      currentFlushTimestamp = getNow();\n      flushing = true;\n      var watcher, id;\n      // Sort queue before flush.\n      // This ensures that:\n      // 1. Components are updated from parent to child. (because parent is always\n      //    created before the child)\n      // 2. A component's user watchers are run before its render watcher (because\n      //    user watchers are created before the render watcher)\n      // 3. If a component is destroyed during a parent component's watcher run,\n      //    its watchers can be skipped.\n      queue.sort(sortCompareFn);\n      // do not cache length because more watchers might be pushed\n      // as we run existing watchers\n      for (index$1 = 0; index$1 < queue.length; index$1++) {\n          watcher = queue[index$1];\n          if (watcher.before) {\n              watcher.before();\n          }\n          id = watcher.id;\n          has[id] = null;\n          watcher.run();\n          // in dev build, check and stop circular updates.\n          if (has[id] != null) {\n              circular[id] = (circular[id] || 0) + 1;\n              if (circular[id] > MAX_UPDATE_COUNT) {\n                  warn$2('You may have an infinite update loop ' +\n                      (watcher.user\n                          ? \"in watcher with expression \\\"\".concat(watcher.expression, \"\\\"\")\n                          : \"in a component render function.\"), watcher.vm);\n                  break;\n              }\n          }\n      }\n      // keep copies of post queues before resetting state\n      var activatedQueue = activatedChildren.slice();\n      var updatedQueue = queue.slice();\n      resetSchedulerState();\n      // call component updated and activated hooks\n      callActivatedHooks(activatedQueue);\n      callUpdatedHooks(updatedQueue);\n      cleanupDeps();\n      // devtool hook\n      /* istanbul ignore if */\n      if (devtools && config.devtools) {\n          devtools.emit('flush');\n      }\n  }\n  function callUpdatedHooks(queue) {\n      var i = queue.length;\n      while (i--) {\n          var watcher = queue[i];\n          var vm = watcher.vm;\n          if (vm && vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n              callHook$1(vm, 'updated');\n          }\n      }\n  }\n  /**\n   * Queue a kept-alive component that was activated during patch.\n   * The queue will be processed after the entire tree has been patched.\n   */\n  function queueActivatedComponent(vm) {\n      // setting _inactive to false here so that a render function can\n      // rely on checking whether it's in an inactive tree (e.g. router-view)\n      vm._inactive = false;\n      activatedChildren.push(vm);\n  }\n  function callActivatedHooks(queue) {\n      for (var i = 0; i < queue.length; i++) {\n          queue[i]._inactive = true;\n          activateChildComponent(queue[i], true /* true */);\n      }\n  }\n  /**\n   * Push a watcher into the watcher queue.\n   * Jobs with duplicate IDs will be skipped unless it's\n   * pushed when the queue is being flushed.\n   */\n  function queueWatcher(watcher) {\n      var id = watcher.id;\n      if (has[id] != null) {\n          return;\n      }\n      if (watcher === Dep.target && watcher.noRecurse) {\n          return;\n      }\n      has[id] = true;\n      if (!flushing) {\n          queue.push(watcher);\n      }\n      else {\n          // if already flushing, splice the watcher based on its id\n          // if already past its id, it will be run next immediately.\n          var i = queue.length - 1;\n          while (i > index$1 && queue[i].id > watcher.id) {\n              i--;\n          }\n          queue.splice(i + 1, 0, watcher);\n      }\n      // queue the flush\n      if (!waiting) {\n          waiting = true;\n          if (!config.async) {\n              flushSchedulerQueue();\n              return;\n          }\n          nextTick(flushSchedulerQueue);\n      }\n  }\n\n  var WATCHER = \"watcher\";\n  var WATCHER_CB = \"\".concat(WATCHER, \" callback\");\n  var WATCHER_GETTER = \"\".concat(WATCHER, \" getter\");\n  var WATCHER_CLEANUP = \"\".concat(WATCHER, \" cleanup\");\n  // Simple effect.\n  function watchEffect(effect, options) {\n      return doWatch(effect, null, options);\n  }\n  function watchPostEffect(effect, options) {\n      return doWatch(effect, null, (__assign(__assign({}, options), { flush: 'post' }) ));\n  }\n  function watchSyncEffect(effect, options) {\n      return doWatch(effect, null, (__assign(__assign({}, options), { flush: 'sync' }) ));\n  }\n  // initial value for watchers to trigger on undefined initial values\n  var INITIAL_WATCHER_VALUE = {};\n  // implementation\n  function watch(source, cb, options) {\n      if (typeof cb !== 'function') {\n          warn$2(\"`watch(fn, options?)` signature has been moved to a separate API. \" +\n              \"Use `watchEffect(fn, options?)` instead. `watch` now only \" +\n              \"supports `watch(source, cb, options?) signature.\");\n      }\n      return doWatch(source, cb, options);\n  }\n  function doWatch(source, cb, _a) {\n      var _b = _a === void 0 ? emptyObject : _a, immediate = _b.immediate, deep = _b.deep, _c = _b.flush, flush = _c === void 0 ? 'pre' : _c, onTrack = _b.onTrack, onTrigger = _b.onTrigger;\n      if (!cb) {\n          if (immediate !== undefined) {\n              warn$2(\"watch() \\\"immediate\\\" option is only respected when using the \" +\n                  \"watch(source, callback, options?) signature.\");\n          }\n          if (deep !== undefined) {\n              warn$2(\"watch() \\\"deep\\\" option is only respected when using the \" +\n                  \"watch(source, callback, options?) signature.\");\n          }\n      }\n      var warnInvalidSource = function (s) {\n          warn$2(\"Invalid watch source: \".concat(s, \". A watch source can only be a getter/effect \") +\n              \"function, a ref, a reactive object, or an array of these types.\");\n      };\n      var instance = currentInstance;\n      var call = function (fn, type, args) {\n          if (args === void 0) { args = null; }\n          return invokeWithErrorHandling(fn, null, args, instance, type);\n      };\n      var getter;\n      var forceTrigger = false;\n      var isMultiSource = false;\n      if (isRef(source)) {\n          getter = function () { return source.value; };\n          forceTrigger = isShallow(source);\n      }\n      else if (isReactive(source)) {\n          getter = function () {\n              source.__ob__.dep.depend();\n              return source;\n          };\n          deep = true;\n      }\n      else if (isArray(source)) {\n          isMultiSource = true;\n          forceTrigger = source.some(function (s) { return isReactive(s) || isShallow(s); });\n          getter = function () {\n              return source.map(function (s) {\n                  if (isRef(s)) {\n                      return s.value;\n                  }\n                  else if (isReactive(s)) {\n                      return traverse(s);\n                  }\n                  else if (isFunction(s)) {\n                      return call(s, WATCHER_GETTER);\n                  }\n                  else {\n                      warnInvalidSource(s);\n                  }\n              });\n          };\n      }\n      else if (isFunction(source)) {\n          if (cb) {\n              // getter with cb\n              getter = function () { return call(source, WATCHER_GETTER); };\n          }\n          else {\n              // no cb -> simple effect\n              getter = function () {\n                  if (instance && instance._isDestroyed) {\n                      return;\n                  }\n                  if (cleanup) {\n                      cleanup();\n                  }\n                  return call(source, WATCHER, [onCleanup]);\n              };\n          }\n      }\n      else {\n          getter = noop;\n          warnInvalidSource(source);\n      }\n      if (cb && deep) {\n          var baseGetter_1 = getter;\n          getter = function () { return traverse(baseGetter_1()); };\n      }\n      var cleanup;\n      var onCleanup = function (fn) {\n          cleanup = watcher.onStop = function () {\n              call(fn, WATCHER_CLEANUP);\n          };\n      };\n      // in SSR there is no need to setup an actual effect, and it should be noop\n      // unless it's eager\n      if (isServerRendering()) {\n          // we will also not call the invalidate callback (+ runner is not set up)\n          onCleanup = noop;\n          if (!cb) {\n              getter();\n          }\n          else if (immediate) {\n              call(cb, WATCHER_CB, [\n                  getter(),\n                  isMultiSource ? [] : undefined,\n                  onCleanup\n              ]);\n          }\n          return noop;\n      }\n      var watcher = new Watcher(currentInstance, getter, noop, {\n          lazy: true\n      });\n      watcher.noRecurse = !cb;\n      var oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;\n      // overwrite default run\n      watcher.run = function () {\n          if (!watcher.active) {\n              return;\n          }\n          if (cb) {\n              // watch(source, cb)\n              var newValue = watcher.get();\n              if (deep ||\n                  forceTrigger ||\n                  (isMultiSource\n                      ? newValue.some(function (v, i) {\n                          return hasChanged(v, oldValue[i]);\n                      })\n                      : hasChanged(newValue, oldValue))) {\n                  // cleanup before running cb again\n                  if (cleanup) {\n                      cleanup();\n                  }\n                  call(cb, WATCHER_CB, [\n                      newValue,\n                      // pass undefined as the old value when it's changed for the first time\n                      oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,\n                      onCleanup\n                  ]);\n                  oldValue = newValue;\n              }\n          }\n          else {\n              // watchEffect\n              watcher.get();\n          }\n      };\n      if (flush === 'sync') {\n          watcher.update = watcher.run;\n      }\n      else if (flush === 'post') {\n          watcher.post = true;\n          watcher.update = function () { return queueWatcher(watcher); };\n      }\n      else {\n          // pre\n          watcher.update = function () {\n              if (instance && instance === currentInstance && !instance._isMounted) {\n                  // pre-watcher triggered before\n                  var buffer = instance._preWatchers || (instance._preWatchers = []);\n                  if (buffer.indexOf(watcher) < 0)\n                      buffer.push(watcher);\n              }\n              else {\n                  queueWatcher(watcher);\n              }\n          };\n      }\n      {\n          watcher.onTrack = onTrack;\n          watcher.onTrigger = onTrigger;\n      }\n      // initial run\n      if (cb) {\n          if (immediate) {\n              watcher.run();\n          }\n          else {\n              oldValue = watcher.get();\n          }\n      }\n      else if (flush === 'post' && instance) {\n          instance.$once('hook:mounted', function () { return watcher.get(); });\n      }\n      else {\n          watcher.get();\n      }\n      return function () {\n          watcher.teardown();\n      };\n  }\n\n  var activeEffectScope;\n  var EffectScope = /** @class */ (function () {\n      function EffectScope(detached) {\n          if (detached === void 0) { detached = false; }\n          this.detached = detached;\n          /**\n           * @internal\n           */\n          this.active = true;\n          /**\n           * @internal\n           */\n          this.effects = [];\n          /**\n           * @internal\n           */\n          this.cleanups = [];\n          this.parent = activeEffectScope;\n          if (!detached && activeEffectScope) {\n              this.index =\n                  (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;\n          }\n      }\n      EffectScope.prototype.run = function (fn) {\n          if (this.active) {\n              var currentEffectScope = activeEffectScope;\n              try {\n                  activeEffectScope = this;\n                  return fn();\n              }\n              finally {\n                  activeEffectScope = currentEffectScope;\n              }\n          }\n          else {\n              warn$2(\"cannot run an inactive effect scope.\");\n          }\n      };\n      /**\n       * This should only be called on non-detached scopes\n       * @internal\n       */\n      EffectScope.prototype.on = function () {\n          activeEffectScope = this;\n      };\n      /**\n       * This should only be called on non-detached scopes\n       * @internal\n       */\n      EffectScope.prototype.off = function () {\n          activeEffectScope = this.parent;\n      };\n      EffectScope.prototype.stop = function (fromParent) {\n          if (this.active) {\n              var i = void 0, l = void 0;\n              for (i = 0, l = this.effects.length; i < l; i++) {\n                  this.effects[i].teardown();\n              }\n              for (i = 0, l = this.cleanups.length; i < l; i++) {\n                  this.cleanups[i]();\n              }\n              if (this.scopes) {\n                  for (i = 0, l = this.scopes.length; i < l; i++) {\n                      this.scopes[i].stop(true);\n                  }\n              }\n              // nested scope, dereference from parent to avoid memory leaks\n              if (!this.detached && this.parent && !fromParent) {\n                  // optimized O(1) removal\n                  var last = this.parent.scopes.pop();\n                  if (last && last !== this) {\n                      this.parent.scopes[this.index] = last;\n                      last.index = this.index;\n                  }\n              }\n              this.parent = undefined;\n              this.active = false;\n          }\n      };\n      return EffectScope;\n  }());\n  function effectScope(detached) {\n      return new EffectScope(detached);\n  }\n  /**\n   * @internal\n   */\n  function recordEffectScope(effect, scope) {\n      if (scope === void 0) { scope = activeEffectScope; }\n      if (scope && scope.active) {\n          scope.effects.push(effect);\n      }\n  }\n  function getCurrentScope() {\n      return activeEffectScope;\n  }\n  function onScopeDispose(fn) {\n      if (activeEffectScope) {\n          activeEffectScope.cleanups.push(fn);\n      }\n      else {\n          warn$2(\"onScopeDispose() is called when there is no active effect scope\" +\n              \" to be associated with.\");\n      }\n  }\n\n  function provide(key, value) {\n      if (!currentInstance) {\n          {\n              warn$2(\"provide() can only be used inside setup().\");\n          }\n      }\n      else {\n          // TS doesn't allow symbol as index type\n          resolveProvided(currentInstance)[key] = value;\n      }\n  }\n  function resolveProvided(vm) {\n      // by default an instance inherits its parent's provides object\n      // but when it needs to provide values of its own, it creates its\n      // own provides object using parent provides object as prototype.\n      // this way in `inject` we can simply look up injections from direct\n      // parent and let the prototype chain do the work.\n      var existing = vm._provided;\n      var parentProvides = vm.$parent && vm.$parent._provided;\n      if (parentProvides === existing) {\n          return (vm._provided = Object.create(parentProvides));\n      }\n      else {\n          return existing;\n      }\n  }\n  function inject(key, defaultValue, treatDefaultAsFactory) {\n      if (treatDefaultAsFactory === void 0) { treatDefaultAsFactory = false; }\n      // fallback to `currentRenderingInstance` so that this can be called in\n      // a functional component\n      var instance = currentInstance;\n      if (instance) {\n          // #2400\n          // to support `app.use` plugins,\n          // fallback to appContext's `provides` if the instance is at root\n          var provides = instance.$parent && instance.$parent._provided;\n          if (provides && key in provides) {\n              // TS doesn't allow symbol as index type\n              return provides[key];\n          }\n          else if (arguments.length > 1) {\n              return treatDefaultAsFactory && isFunction(defaultValue)\n                  ? defaultValue.call(instance)\n                  : defaultValue;\n          }\n          else {\n              warn$2(\"injection \\\"\".concat(String(key), \"\\\" not found.\"));\n          }\n      }\n      else {\n          warn$2(\"inject() can only be used inside setup() or functional components.\");\n      }\n  }\n\n  /**\n   * @internal this function needs manual public type declaration because it relies\n   * on previously manually authored types from Vue 2\n   */\n  function h(type, props, children) {\n      if (!currentInstance) {\n          warn$2(\"globally imported h() can only be invoked when there is an active \" +\n                  \"component instance, e.g. synchronously in a component's render or setup function.\");\n      }\n      return createElement$1(currentInstance, type, props, children, 2, true);\n  }\n\n  function handleError(err, vm, info) {\n      // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n      // See: https://github.com/vuejs/vuex/issues/1505\n      pushTarget();\n      try {\n          if (vm) {\n              var cur = vm;\n              while ((cur = cur.$parent)) {\n                  var hooks = cur.$options.errorCaptured;\n                  if (hooks) {\n                      for (var i = 0; i < hooks.length; i++) {\n                          try {\n                              var capture = hooks[i].call(cur, err, vm, info) === false;\n                              if (capture)\n                                  return;\n                          }\n                          catch (e) {\n                              globalHandleError(e, cur, 'errorCaptured hook');\n                          }\n                      }\n                  }\n              }\n          }\n          globalHandleError(err, vm, info);\n      }\n      finally {\n          popTarget();\n      }\n  }\n  function invokeWithErrorHandling(handler, context, args, vm, info) {\n      var res;\n      try {\n          res = args ? handler.apply(context, args) : handler.call(context);\n          if (res && !res._isVue && isPromise(res) && !res._handled) {\n              res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n              res._handled = true;\n          }\n      }\n      catch (e) {\n          handleError(e, vm, info);\n      }\n      return res;\n  }\n  function globalHandleError(err, vm, info) {\n      if (config.errorHandler) {\n          try {\n              return config.errorHandler.call(null, err, vm, info);\n          }\n          catch (e) {\n              // if the user intentionally throws the original error in the handler,\n              // do not log it twice\n              if (e !== err) {\n                  logError(e, null, 'config.errorHandler');\n              }\n          }\n      }\n      logError(err, vm, info);\n  }\n  function logError(err, vm, info) {\n      {\n          warn$2(\"Error in \".concat(info, \": \\\"\").concat(err.toString(), \"\\\"\"), vm);\n      }\n      /* istanbul ignore else */\n      if (inBrowser && typeof console !== 'undefined') {\n          console.error(err);\n      }\n      else {\n          throw err;\n      }\n  }\n\n  /* globals MutationObserver */\n  var isUsingMicroTask = false;\n  var callbacks = [];\n  var pending = false;\n  function flushCallbacks() {\n      pending = false;\n      var copies = callbacks.slice(0);\n      callbacks.length = 0;\n      for (var i = 0; i < copies.length; i++) {\n          copies[i]();\n      }\n  }\n  // Here we have async deferring wrappers using microtasks.\n  // In 2.5 we used (macro) tasks (in combination with microtasks).\n  // However, it has subtle problems when state is changed right before repaint\n  // (e.g. #6813, out-in transitions).\n  // Also, using (macro) tasks in event handler would cause some weird behaviors\n  // that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n  // So we now use microtasks everywhere, again.\n  // A major drawback of this tradeoff is that there are some scenarios\n  // where microtasks have too high a priority and fire in between supposedly\n  // sequential events (e.g. #4521, #6690, which have workarounds)\n  // or even between bubbling of the same event (#6566).\n  var timerFunc;\n  // The nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore next, $flow-disable-line */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n      var p_1 = Promise.resolve();\n      timerFunc = function () {\n          p_1.then(flushCallbacks);\n          // In problematic UIWebViews, Promise.then doesn't completely break, but\n          // it can get stuck in a weird state where callbacks are pushed into the\n          // microtask queue but the queue isn't being flushed, until the browser\n          // needs to do some other work, e.g. handle a timer. Therefore we can\n          // \"force\" the microtask queue to be flushed by adding an empty timer.\n          if (isIOS)\n              setTimeout(noop);\n      };\n      isUsingMicroTask = true;\n  }\n  else if (!isIE &&\n      typeof MutationObserver !== 'undefined' &&\n      (isNative(MutationObserver) ||\n          // PhantomJS and iOS 7.x\n          MutationObserver.toString() === '[object MutationObserverConstructor]')) {\n      // Use MutationObserver where native Promise is not available,\n      // e.g. PhantomJS, iOS7, Android 4.4\n      // (#6466 MutationObserver is unreliable in IE11)\n      var counter_1 = 1;\n      var observer = new MutationObserver(flushCallbacks);\n      var textNode_1 = document.createTextNode(String(counter_1));\n      observer.observe(textNode_1, {\n          characterData: true\n      });\n      timerFunc = function () {\n          counter_1 = (counter_1 + 1) % 2;\n          textNode_1.data = String(counter_1);\n      };\n      isUsingMicroTask = true;\n  }\n  else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n      // Fallback to setImmediate.\n      // Technically it leverages the (macro) task queue,\n      // but it is still a better choice than setTimeout.\n      timerFunc = function () {\n          setImmediate(flushCallbacks);\n      };\n  }\n  else {\n      // Fallback to setTimeout.\n      timerFunc = function () {\n          setTimeout(flushCallbacks, 0);\n      };\n  }\n  /**\n   * @internal\n   */\n  function nextTick(cb, ctx) {\n      var _resolve;\n      callbacks.push(function () {\n          if (cb) {\n              try {\n                  cb.call(ctx);\n              }\n              catch (e) {\n                  handleError(e, ctx, 'nextTick');\n              }\n          }\n          else if (_resolve) {\n              _resolve(ctx);\n          }\n      });\n      if (!pending) {\n          pending = true;\n          timerFunc();\n      }\n      // $flow-disable-line\n      if (!cb && typeof Promise !== 'undefined') {\n          return new Promise(function (resolve) {\n              _resolve = resolve;\n          });\n      }\n  }\n\n  function useCssModule(name) {\n      /* istanbul ignore else */\n      {\n          {\n              warn$2(\"useCssModule() is not supported in the global build.\");\n          }\n          return emptyObject;\n      }\n  }\n\n  /**\n   * Runtime helper for SFC's CSS variable injection feature.\n   * @private\n   */\n  function useCssVars(getter) {\n      if (!inBrowser && !false)\n          return;\n      var instance = currentInstance;\n      if (!instance) {\n          warn$2(\"useCssVars is called without current active component instance.\");\n          return;\n      }\n      watchPostEffect(function () {\n          var el = instance.$el;\n          var vars = getter(instance, instance._setupProxy);\n          if (el && el.nodeType === 1) {\n              var style = el.style;\n              for (var key in vars) {\n                  style.setProperty(\"--\".concat(key), vars[key]);\n              }\n          }\n      });\n  }\n\n  /**\n   * v3-compatible async component API.\n   * @internal the type is manually declared in <root>/types/v3-define-async-component.d.ts\n   * because it relies on existing manual types\n   */\n  function defineAsyncComponent(source) {\n      if (isFunction(source)) {\n          source = { loader: source };\n      }\n      var loader = source.loader, loadingComponent = source.loadingComponent, errorComponent = source.errorComponent, _a = source.delay, delay = _a === void 0 ? 200 : _a, timeout = source.timeout, // undefined = never times out\n      _b = source.suspensible, // undefined = never times out\n      suspensible = _b === void 0 ? false : _b, // in Vue 3 default is true\n      userOnError = source.onError;\n      if (suspensible) {\n          warn$2(\"The suspensiblbe option for async components is not supported in Vue2. It is ignored.\");\n      }\n      var pendingRequest = null;\n      var retries = 0;\n      var retry = function () {\n          retries++;\n          pendingRequest = null;\n          return load();\n      };\n      var load = function () {\n          var thisRequest;\n          return (pendingRequest ||\n              (thisRequest = pendingRequest =\n                  loader()\n                      .catch(function (err) {\n                      err = err instanceof Error ? err : new Error(String(err));\n                      if (userOnError) {\n                          return new Promise(function (resolve, reject) {\n                              var userRetry = function () { return resolve(retry()); };\n                              var userFail = function () { return reject(err); };\n                              userOnError(err, userRetry, userFail, retries + 1);\n                          });\n                      }\n                      else {\n                          throw err;\n                      }\n                  })\n                      .then(function (comp) {\n                      if (thisRequest !== pendingRequest && pendingRequest) {\n                          return pendingRequest;\n                      }\n                      if (!comp) {\n                          warn$2(\"Async component loader resolved to undefined. \" +\n                              \"If you are using retry(), make sure to return its return value.\");\n                      }\n                      // interop module default\n                      if (comp &&\n                          (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) {\n                          comp = comp.default;\n                      }\n                      if (comp && !isObject(comp) && !isFunction(comp)) {\n                          throw new Error(\"Invalid async component load result: \".concat(comp));\n                      }\n                      return comp;\n                  })));\n      };\n      return function () {\n          var component = load();\n          return {\n              component: component,\n              delay: delay,\n              timeout: timeout,\n              error: errorComponent,\n              loading: loadingComponent\n          };\n      };\n  }\n\n  function createLifeCycle(hookName) {\n      return function (fn, target) {\n          if (target === void 0) { target = currentInstance; }\n          if (!target) {\n              warn$2(\"\".concat(formatName(hookName), \" is called when there is no active component instance to be \") +\n                      \"associated with. \" +\n                      \"Lifecycle injection APIs can only be used during execution of setup().\");\n              return;\n          }\n          return injectHook(target, hookName, fn);\n      };\n  }\n  function formatName(name) {\n      if (name === 'beforeDestroy') {\n          name = 'beforeUnmount';\n      }\n      else if (name === 'destroyed') {\n          name = 'unmounted';\n      }\n      return \"on\".concat(name[0].toUpperCase() + name.slice(1));\n  }\n  function injectHook(instance, hookName, fn) {\n      var options = instance.$options;\n      options[hookName] = mergeLifecycleHook(options[hookName], fn);\n  }\n  var onBeforeMount = createLifeCycle('beforeMount');\n  var onMounted = createLifeCycle('mounted');\n  var onBeforeUpdate = createLifeCycle('beforeUpdate');\n  var onUpdated = createLifeCycle('updated');\n  var onBeforeUnmount = createLifeCycle('beforeDestroy');\n  var onUnmounted = createLifeCycle('destroyed');\n  var onActivated = createLifeCycle('activated');\n  var onDeactivated = createLifeCycle('deactivated');\n  var onServerPrefetch = createLifeCycle('serverPrefetch');\n  var onRenderTracked = createLifeCycle('renderTracked');\n  var onRenderTriggered = createLifeCycle('renderTriggered');\n  var injectErrorCapturedHook = createLifeCycle('errorCaptured');\n  function onErrorCaptured(hook, target) {\n      if (target === void 0) { target = currentInstance; }\n      injectErrorCapturedHook(hook, target);\n  }\n\n  /**\n   * Note: also update dist/vue.runtime.mjs when adding new exports to this file.\n   */\n  var version = '2.7.14';\n  /**\n   * @internal type is manually declared in <root>/types/v3-define-component.d.ts\n   */\n  function defineComponent(options) {\n      return options;\n  }\n\n  var vca = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    version: version,\n    defineComponent: defineComponent,\n    ref: ref$1,\n    shallowRef: shallowRef,\n    isRef: isRef,\n    toRef: toRef,\n    toRefs: toRefs,\n    unref: unref,\n    proxyRefs: proxyRefs,\n    customRef: customRef,\n    triggerRef: triggerRef,\n    reactive: reactive,\n    isReactive: isReactive,\n    isReadonly: isReadonly,\n    isShallow: isShallow,\n    isProxy: isProxy,\n    shallowReactive: shallowReactive,\n    markRaw: markRaw,\n    toRaw: toRaw,\n    readonly: readonly,\n    shallowReadonly: shallowReadonly,\n    computed: computed,\n    watch: watch,\n    watchEffect: watchEffect,\n    watchPostEffect: watchPostEffect,\n    watchSyncEffect: watchSyncEffect,\n    EffectScope: EffectScope,\n    effectScope: effectScope,\n    onScopeDispose: onScopeDispose,\n    getCurrentScope: getCurrentScope,\n    provide: provide,\n    inject: inject,\n    h: h,\n    getCurrentInstance: getCurrentInstance,\n    useSlots: useSlots,\n    useAttrs: useAttrs,\n    useListeners: useListeners,\n    mergeDefaults: mergeDefaults,\n    nextTick: nextTick,\n    set: set,\n    del: del,\n    useCssModule: useCssModule,\n    useCssVars: useCssVars,\n    defineAsyncComponent: defineAsyncComponent,\n    onBeforeMount: onBeforeMount,\n    onMounted: onMounted,\n    onBeforeUpdate: onBeforeUpdate,\n    onUpdated: onUpdated,\n    onBeforeUnmount: onBeforeUnmount,\n    onUnmounted: onUnmounted,\n    onActivated: onActivated,\n    onDeactivated: onDeactivated,\n    onServerPrefetch: onServerPrefetch,\n    onRenderTracked: onRenderTracked,\n    onRenderTriggered: onRenderTriggered,\n    onErrorCaptured: onErrorCaptured\n  });\n\n  var seenObjects = new _Set();\n  /**\n   * Recursively traverse an object to evoke all converted\n   * getters, so that every nested property inside the object\n   * is collected as a \"deep\" dependency.\n   */\n  function traverse(val) {\n      _traverse(val, seenObjects);\n      seenObjects.clear();\n      return val;\n  }\n  function _traverse(val, seen) {\n      var i, keys;\n      var isA = isArray(val);\n      if ((!isA && !isObject(val)) ||\n          val.__v_skip /* ReactiveFlags.SKIP */ ||\n          Object.isFrozen(val) ||\n          val instanceof VNode) {\n          return;\n      }\n      if (val.__ob__) {\n          var depId = val.__ob__.dep.id;\n          if (seen.has(depId)) {\n              return;\n          }\n          seen.add(depId);\n      }\n      if (isA) {\n          i = val.length;\n          while (i--)\n              _traverse(val[i], seen);\n      }\n      else if (isRef(val)) {\n          _traverse(val.value, seen);\n      }\n      else {\n          keys = Object.keys(val);\n          i = keys.length;\n          while (i--)\n              _traverse(val[keys[i]], seen);\n      }\n  }\n\n  var uid$1 = 0;\n  /**\n   * A watcher parses an expression, collects dependencies,\n   * and fires callback when the expression value changes.\n   * This is used for both the $watch() api and directives.\n   * @internal\n   */\n  var Watcher = /** @class */ (function () {\n      function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {\n          recordEffectScope(this, \n          // if the active effect scope is manually created (not a component scope),\n          // prioritize it\n          activeEffectScope && !activeEffectScope._vm\n              ? activeEffectScope\n              : vm\n                  ? vm._scope\n                  : undefined);\n          if ((this.vm = vm) && isRenderWatcher) {\n              vm._watcher = this;\n          }\n          // options\n          if (options) {\n              this.deep = !!options.deep;\n              this.user = !!options.user;\n              this.lazy = !!options.lazy;\n              this.sync = !!options.sync;\n              this.before = options.before;\n              {\n                  this.onTrack = options.onTrack;\n                  this.onTrigger = options.onTrigger;\n              }\n          }\n          else {\n              this.deep = this.user = this.lazy = this.sync = false;\n          }\n          this.cb = cb;\n          this.id = ++uid$1; // uid for batching\n          this.active = true;\n          this.post = false;\n          this.dirty = this.lazy; // for lazy watchers\n          this.deps = [];\n          this.newDeps = [];\n          this.depIds = new _Set();\n          this.newDepIds = new _Set();\n          this.expression = expOrFn.toString() ;\n          // parse expression for getter\n          if (isFunction(expOrFn)) {\n              this.getter = expOrFn;\n          }\n          else {\n              this.getter = parsePath(expOrFn);\n              if (!this.getter) {\n                  this.getter = noop;\n                  warn$2(\"Failed watching path: \\\"\".concat(expOrFn, \"\\\" \") +\n                          'Watcher only accepts simple dot-delimited paths. ' +\n                          'For full control, use a function instead.', vm);\n              }\n          }\n          this.value = this.lazy ? undefined : this.get();\n      }\n      /**\n       * Evaluate the getter, and re-collect dependencies.\n       */\n      Watcher.prototype.get = function () {\n          pushTarget(this);\n          var value;\n          var vm = this.vm;\n          try {\n              value = this.getter.call(vm, vm);\n          }\n          catch (e) {\n              if (this.user) {\n                  handleError(e, vm, \"getter for watcher \\\"\".concat(this.expression, \"\\\"\"));\n              }\n              else {\n                  throw e;\n              }\n          }\n          finally {\n              // \"touch\" every property so they are all tracked as\n              // dependencies for deep watching\n              if (this.deep) {\n                  traverse(value);\n              }\n              popTarget();\n              this.cleanupDeps();\n          }\n          return value;\n      };\n      /**\n       * Add a dependency to this directive.\n       */\n      Watcher.prototype.addDep = function (dep) {\n          var id = dep.id;\n          if (!this.newDepIds.has(id)) {\n              this.newDepIds.add(id);\n              this.newDeps.push(dep);\n              if (!this.depIds.has(id)) {\n                  dep.addSub(this);\n              }\n          }\n      };\n      /**\n       * Clean up for dependency collection.\n       */\n      Watcher.prototype.cleanupDeps = function () {\n          var i = this.deps.length;\n          while (i--) {\n              var dep = this.deps[i];\n              if (!this.newDepIds.has(dep.id)) {\n                  dep.removeSub(this);\n              }\n          }\n          var tmp = this.depIds;\n          this.depIds = this.newDepIds;\n          this.newDepIds = tmp;\n          this.newDepIds.clear();\n          tmp = this.deps;\n          this.deps = this.newDeps;\n          this.newDeps = tmp;\n          this.newDeps.length = 0;\n      };\n      /**\n       * Subscriber interface.\n       * Will be called when a dependency changes.\n       */\n      Watcher.prototype.update = function () {\n          /* istanbul ignore else */\n          if (this.lazy) {\n              this.dirty = true;\n          }\n          else if (this.sync) {\n              this.run();\n          }\n          else {\n              queueWatcher(this);\n          }\n      };\n      /**\n       * Scheduler job interface.\n       * Will be called by the scheduler.\n       */\n      Watcher.prototype.run = function () {\n          if (this.active) {\n              var value = this.get();\n              if (value !== this.value ||\n                  // Deep watchers and watchers on Object/Arrays should fire even\n                  // when the value is the same, because the value may\n                  // have mutated.\n                  isObject(value) ||\n                  this.deep) {\n                  // set new value\n                  var oldValue = this.value;\n                  this.value = value;\n                  if (this.user) {\n                      var info = \"callback for watcher \\\"\".concat(this.expression, \"\\\"\");\n                      invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);\n                  }\n                  else {\n                      this.cb.call(this.vm, value, oldValue);\n                  }\n              }\n          }\n      };\n      /**\n       * Evaluate the value of the watcher.\n       * This only gets called for lazy watchers.\n       */\n      Watcher.prototype.evaluate = function () {\n          this.value = this.get();\n          this.dirty = false;\n      };\n      /**\n       * Depend on all deps collected by this watcher.\n       */\n      Watcher.prototype.depend = function () {\n          var i = this.deps.length;\n          while (i--) {\n              this.deps[i].depend();\n          }\n      };\n      /**\n       * Remove self from all dependencies' subscriber list.\n       */\n      Watcher.prototype.teardown = function () {\n          if (this.vm && !this.vm._isBeingDestroyed) {\n              remove$2(this.vm._scope.effects, this);\n          }\n          if (this.active) {\n              var i = this.deps.length;\n              while (i--) {\n                  this.deps[i].removeSub(this);\n              }\n              this.active = false;\n              if (this.onStop) {\n                  this.onStop();\n              }\n          }\n      };\n      return Watcher;\n  }());\n\n  var sharedPropertyDefinition = {\n      enumerable: true,\n      configurable: true,\n      get: noop,\n      set: noop\n  };\n  function proxy(target, sourceKey, key) {\n      sharedPropertyDefinition.get = function proxyGetter() {\n          return this[sourceKey][key];\n      };\n      sharedPropertyDefinition.set = function proxySetter(val) {\n          this[sourceKey][key] = val;\n      };\n      Object.defineProperty(target, key, sharedPropertyDefinition);\n  }\n  function initState(vm) {\n      var opts = vm.$options;\n      if (opts.props)\n          initProps$1(vm, opts.props);\n      // Composition API\n      initSetup(vm);\n      if (opts.methods)\n          initMethods(vm, opts.methods);\n      if (opts.data) {\n          initData(vm);\n      }\n      else {\n          var ob = observe((vm._data = {}));\n          ob && ob.vmCount++;\n      }\n      if (opts.computed)\n          initComputed$1(vm, opts.computed);\n      if (opts.watch && opts.watch !== nativeWatch) {\n          initWatch(vm, opts.watch);\n      }\n  }\n  function initProps$1(vm, propsOptions) {\n      var propsData = vm.$options.propsData || {};\n      var props = (vm._props = shallowReactive({}));\n      // cache prop keys so that future props updates can iterate using Array\n      // instead of dynamic object key enumeration.\n      var keys = (vm.$options._propKeys = []);\n      var isRoot = !vm.$parent;\n      // root instance props should be converted\n      if (!isRoot) {\n          toggleObserving(false);\n      }\n      var _loop_1 = function (key) {\n          keys.push(key);\n          var value = validateProp(key, propsOptions, propsData, vm);\n          /* istanbul ignore else */\n          {\n              var hyphenatedKey = hyphenate(key);\n              if (isReservedAttribute(hyphenatedKey) ||\n                  config.isReservedAttr(hyphenatedKey)) {\n                  warn$2(\"\\\"\".concat(hyphenatedKey, \"\\\" is a reserved attribute and cannot be used as component prop.\"), vm);\n              }\n              defineReactive(props, key, value, function () {\n                  if (!isRoot && !isUpdatingChildComponent) {\n                      warn$2(\"Avoid mutating a prop directly since the value will be \" +\n                          \"overwritten whenever the parent component re-renders. \" +\n                          \"Instead, use a data or computed property based on the prop's \" +\n                          \"value. Prop being mutated: \\\"\".concat(key, \"\\\"\"), vm);\n                  }\n              });\n          }\n          // static props are already proxied on the component's prototype\n          // during Vue.extend(). We only need to proxy props defined at\n          // instantiation here.\n          if (!(key in vm)) {\n              proxy(vm, \"_props\", key);\n          }\n      };\n      for (var key in propsOptions) {\n          _loop_1(key);\n      }\n      toggleObserving(true);\n  }\n  function initData(vm) {\n      var data = vm.$options.data;\n      data = vm._data = isFunction(data) ? getData(data, vm) : data || {};\n      if (!isPlainObject(data)) {\n          data = {};\n          warn$2('data functions should return an object:\\n' +\n                  'https://v2.vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);\n      }\n      // proxy data on instance\n      var keys = Object.keys(data);\n      var props = vm.$options.props;\n      var methods = vm.$options.methods;\n      var i = keys.length;\n      while (i--) {\n          var key = keys[i];\n          {\n              if (methods && hasOwn(methods, key)) {\n                  warn$2(\"Method \\\"\".concat(key, \"\\\" has already been defined as a data property.\"), vm);\n              }\n          }\n          if (props && hasOwn(props, key)) {\n              warn$2(\"The data property \\\"\".concat(key, \"\\\" is already declared as a prop. \") +\n                      \"Use prop default value instead.\", vm);\n          }\n          else if (!isReserved(key)) {\n              proxy(vm, \"_data\", key);\n          }\n      }\n      // observe data\n      var ob = observe(data);\n      ob && ob.vmCount++;\n  }\n  function getData(data, vm) {\n      // #7573 disable dep collection when invoking data getters\n      pushTarget();\n      try {\n          return data.call(vm, vm);\n      }\n      catch (e) {\n          handleError(e, vm, \"data()\");\n          return {};\n      }\n      finally {\n          popTarget();\n      }\n  }\n  var computedWatcherOptions = { lazy: true };\n  function initComputed$1(vm, computed) {\n      // $flow-disable-line\n      var watchers = (vm._computedWatchers = Object.create(null));\n      // computed properties are just getters during SSR\n      var isSSR = isServerRendering();\n      for (var key in computed) {\n          var userDef = computed[key];\n          var getter = isFunction(userDef) ? userDef : userDef.get;\n          if (getter == null) {\n              warn$2(\"Getter is missing for computed property \\\"\".concat(key, \"\\\".\"), vm);\n          }\n          if (!isSSR) {\n              // create internal watcher for the computed property.\n              watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);\n          }\n          // component-defined computed properties are already defined on the\n          // component prototype. We only need to define computed properties defined\n          // at instantiation here.\n          if (!(key in vm)) {\n              defineComputed(vm, key, userDef);\n          }\n          else {\n              if (key in vm.$data) {\n                  warn$2(\"The computed property \\\"\".concat(key, \"\\\" is already defined in data.\"), vm);\n              }\n              else if (vm.$options.props && key in vm.$options.props) {\n                  warn$2(\"The computed property \\\"\".concat(key, \"\\\" is already defined as a prop.\"), vm);\n              }\n              else if (vm.$options.methods && key in vm.$options.methods) {\n                  warn$2(\"The computed property \\\"\".concat(key, \"\\\" is already defined as a method.\"), vm);\n              }\n          }\n      }\n  }\n  function defineComputed(target, key, userDef) {\n      var shouldCache = !isServerRendering();\n      if (isFunction(userDef)) {\n          sharedPropertyDefinition.get = shouldCache\n              ? createComputedGetter(key)\n              : createGetterInvoker(userDef);\n          sharedPropertyDefinition.set = noop;\n      }\n      else {\n          sharedPropertyDefinition.get = userDef.get\n              ? shouldCache && userDef.cache !== false\n                  ? createComputedGetter(key)\n                  : createGetterInvoker(userDef.get)\n              : noop;\n          sharedPropertyDefinition.set = userDef.set || noop;\n      }\n      if (sharedPropertyDefinition.set === noop) {\n          sharedPropertyDefinition.set = function () {\n              warn$2(\"Computed property \\\"\".concat(key, \"\\\" was assigned to but it has no setter.\"), this);\n          };\n      }\n      Object.defineProperty(target, key, sharedPropertyDefinition);\n  }\n  function createComputedGetter(key) {\n      return function computedGetter() {\n          var watcher = this._computedWatchers && this._computedWatchers[key];\n          if (watcher) {\n              if (watcher.dirty) {\n                  watcher.evaluate();\n              }\n              if (Dep.target) {\n                  if (Dep.target.onTrack) {\n                      Dep.target.onTrack({\n                          effect: Dep.target,\n                          target: this,\n                          type: \"get\" /* TrackOpTypes.GET */,\n                          key: key\n                      });\n                  }\n                  watcher.depend();\n              }\n              return watcher.value;\n          }\n      };\n  }\n  function createGetterInvoker(fn) {\n      return function computedGetter() {\n          return fn.call(this, this);\n      };\n  }\n  function initMethods(vm, methods) {\n      var props = vm.$options.props;\n      for (var key in methods) {\n          {\n              if (typeof methods[key] !== 'function') {\n                  warn$2(\"Method \\\"\".concat(key, \"\\\" has type \\\"\").concat(typeof methods[key], \"\\\" in the component definition. \") +\n                      \"Did you reference the function correctly?\", vm);\n              }\n              if (props && hasOwn(props, key)) {\n                  warn$2(\"Method \\\"\".concat(key, \"\\\" has already been defined as a prop.\"), vm);\n              }\n              if (key in vm && isReserved(key)) {\n                  warn$2(\"Method \\\"\".concat(key, \"\\\" conflicts with an existing Vue instance method. \") +\n                      \"Avoid defining component methods that start with _ or $.\");\n              }\n          }\n          vm[key] = typeof methods[key] !== 'function' ? noop : bind$1(methods[key], vm);\n      }\n  }\n  function initWatch(vm, watch) {\n      for (var key in watch) {\n          var handler = watch[key];\n          if (isArray(handler)) {\n              for (var i = 0; i < handler.length; i++) {\n                  createWatcher(vm, key, handler[i]);\n              }\n          }\n          else {\n              createWatcher(vm, key, handler);\n          }\n      }\n  }\n  function createWatcher(vm, expOrFn, handler, options) {\n      if (isPlainObject(handler)) {\n          options = handler;\n          handler = handler.handler;\n      }\n      if (typeof handler === 'string') {\n          handler = vm[handler];\n      }\n      return vm.$watch(expOrFn, handler, options);\n  }\n  function stateMixin(Vue) {\n      // flow somehow has problems with directly declared definition object\n      // when using Object.defineProperty, so we have to procedurally build up\n      // the object here.\n      var dataDef = {};\n      dataDef.get = function () {\n          return this._data;\n      };\n      var propsDef = {};\n      propsDef.get = function () {\n          return this._props;\n      };\n      {\n          dataDef.set = function () {\n              warn$2('Avoid replacing instance root $data. ' +\n                  'Use nested data properties instead.', this);\n          };\n          propsDef.set = function () {\n              warn$2(\"$props is readonly.\", this);\n          };\n      }\n      Object.defineProperty(Vue.prototype, '$data', dataDef);\n      Object.defineProperty(Vue.prototype, '$props', propsDef);\n      Vue.prototype.$set = set;\n      Vue.prototype.$delete = del;\n      Vue.prototype.$watch = function (expOrFn, cb, options) {\n          var vm = this;\n          if (isPlainObject(cb)) {\n              return createWatcher(vm, expOrFn, cb, options);\n          }\n          options = options || {};\n          options.user = true;\n          var watcher = new Watcher(vm, expOrFn, cb, options);\n          if (options.immediate) {\n              var info = \"callback for immediate watcher \\\"\".concat(watcher.expression, \"\\\"\");\n              pushTarget();\n              invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);\n              popTarget();\n          }\n          return function unwatchFn() {\n              watcher.teardown();\n          };\n      };\n  }\n\n  function initProvide(vm) {\n      var provideOption = vm.$options.provide;\n      if (provideOption) {\n          var provided = isFunction(provideOption)\n              ? provideOption.call(vm)\n              : provideOption;\n          if (!isObject(provided)) {\n              return;\n          }\n          var source = resolveProvided(vm);\n          // IE9 doesn't support Object.getOwnPropertyDescriptors so we have to\n          // iterate the keys ourselves.\n          var keys = hasSymbol ? Reflect.ownKeys(provided) : Object.keys(provided);\n          for (var i = 0; i < keys.length; i++) {\n              var key = keys[i];\n              Object.defineProperty(source, key, Object.getOwnPropertyDescriptor(provided, key));\n          }\n      }\n  }\n  function initInjections(vm) {\n      var result = resolveInject(vm.$options.inject, vm);\n      if (result) {\n          toggleObserving(false);\n          Object.keys(result).forEach(function (key) {\n              /* istanbul ignore else */\n              {\n                  defineReactive(vm, key, result[key], function () {\n                      warn$2(\"Avoid mutating an injected value directly since the changes will be \" +\n                          \"overwritten whenever the provided component re-renders. \" +\n                          \"injection being mutated: \\\"\".concat(key, \"\\\"\"), vm);\n                  });\n              }\n          });\n          toggleObserving(true);\n      }\n  }\n  function resolveInject(inject, vm) {\n      if (inject) {\n          // inject is :any because flow is not smart enough to figure out cached\n          var result = Object.create(null);\n          var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);\n          for (var i = 0; i < keys.length; i++) {\n              var key = keys[i];\n              // #6574 in case the inject object is observed...\n              if (key === '__ob__')\n                  continue;\n              var provideKey = inject[key].from;\n              if (provideKey in vm._provided) {\n                  result[key] = vm._provided[provideKey];\n              }\n              else if ('default' in inject[key]) {\n                  var provideDefault = inject[key].default;\n                  result[key] = isFunction(provideDefault)\n                      ? provideDefault.call(vm)\n                      : provideDefault;\n              }\n              else {\n                  warn$2(\"Injection \\\"\".concat(key, \"\\\" not found\"), vm);\n              }\n          }\n          return result;\n      }\n  }\n\n  var uid = 0;\n  function initMixin$1(Vue) {\n      Vue.prototype._init = function (options) {\n          var vm = this;\n          // a uid\n          vm._uid = uid++;\n          var startTag, endTag;\n          /* istanbul ignore if */\n          if (config.performance && mark) {\n              startTag = \"vue-perf-start:\".concat(vm._uid);\n              endTag = \"vue-perf-end:\".concat(vm._uid);\n              mark(startTag);\n          }\n          // a flag to mark this as a Vue instance without having to do instanceof\n          // check\n          vm._isVue = true;\n          // avoid instances from being observed\n          vm.__v_skip = true;\n          // effect scope\n          vm._scope = new EffectScope(true /* detached */);\n          vm._scope._vm = true;\n          // merge options\n          if (options && options._isComponent) {\n              // optimize internal component instantiation\n              // since dynamic options merging is pretty slow, and none of the\n              // internal component options needs special treatment.\n              initInternalComponent(vm, options);\n          }\n          else {\n              vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);\n          }\n          /* istanbul ignore else */\n          {\n              initProxy(vm);\n          }\n          // expose real self\n          vm._self = vm;\n          initLifecycle(vm);\n          initEvents(vm);\n          initRender(vm);\n          callHook$1(vm, 'beforeCreate', undefined, false /* setContext */);\n          initInjections(vm); // resolve injections before data/props\n          initState(vm);\n          initProvide(vm); // resolve provide after data/props\n          callHook$1(vm, 'created');\n          /* istanbul ignore if */\n          if (config.performance && mark) {\n              vm._name = formatComponentName(vm, false);\n              mark(endTag);\n              measure(\"vue \".concat(vm._name, \" init\"), startTag, endTag);\n          }\n          if (vm.$options.el) {\n              vm.$mount(vm.$options.el);\n          }\n      };\n  }\n  function initInternalComponent(vm, options) {\n      var opts = (vm.$options = Object.create(vm.constructor.options));\n      // doing this because it's faster than dynamic enumeration.\n      var parentVnode = options._parentVnode;\n      opts.parent = options.parent;\n      opts._parentVnode = parentVnode;\n      var vnodeComponentOptions = parentVnode.componentOptions;\n      opts.propsData = vnodeComponentOptions.propsData;\n      opts._parentListeners = vnodeComponentOptions.listeners;\n      opts._renderChildren = vnodeComponentOptions.children;\n      opts._componentTag = vnodeComponentOptions.tag;\n      if (options.render) {\n          opts.render = options.render;\n          opts.staticRenderFns = options.staticRenderFns;\n      }\n  }\n  function resolveConstructorOptions(Ctor) {\n      var options = Ctor.options;\n      if (Ctor.super) {\n          var superOptions = resolveConstructorOptions(Ctor.super);\n          var cachedSuperOptions = Ctor.superOptions;\n          if (superOptions !== cachedSuperOptions) {\n              // super option changed,\n              // need to resolve new options.\n              Ctor.superOptions = superOptions;\n              // check if there are any late-modified/attached options (#4976)\n              var modifiedOptions = resolveModifiedOptions(Ctor);\n              // update base extend options\n              if (modifiedOptions) {\n                  extend(Ctor.extendOptions, modifiedOptions);\n              }\n              options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n              if (options.name) {\n                  options.components[options.name] = Ctor;\n              }\n          }\n      }\n      return options;\n  }\n  function resolveModifiedOptions(Ctor) {\n      var modified;\n      var latest = Ctor.options;\n      var sealed = Ctor.sealedOptions;\n      for (var key in latest) {\n          if (latest[key] !== sealed[key]) {\n              if (!modified)\n                  modified = {};\n              modified[key] = latest[key];\n          }\n      }\n      return modified;\n  }\n\n  function FunctionalRenderContext(data, props, children, parent, Ctor) {\n      var _this = this;\n      var options = Ctor.options;\n      // ensure the createElement function in functional components\n      // gets a unique context - this is necessary for correct named slot check\n      var contextVm;\n      if (hasOwn(parent, '_uid')) {\n          contextVm = Object.create(parent);\n          contextVm._original = parent;\n      }\n      else {\n          // the context vm passed in is a functional context as well.\n          // in this case we want to make sure we are able to get a hold to the\n          // real context instance.\n          contextVm = parent;\n          // @ts-ignore\n          parent = parent._original;\n      }\n      var isCompiled = isTrue(options._compiled);\n      var needNormalization = !isCompiled;\n      this.data = data;\n      this.props = props;\n      this.children = children;\n      this.parent = parent;\n      this.listeners = data.on || emptyObject;\n      this.injections = resolveInject(options.inject, parent);\n      this.slots = function () {\n          if (!_this.$slots) {\n              normalizeScopedSlots(parent, data.scopedSlots, (_this.$slots = resolveSlots(children, parent)));\n          }\n          return _this.$slots;\n      };\n      Object.defineProperty(this, 'scopedSlots', {\n          enumerable: true,\n          get: function () {\n              return normalizeScopedSlots(parent, data.scopedSlots, this.slots());\n          }\n      });\n      // support for compiled functional template\n      if (isCompiled) {\n          // exposing $options for renderStatic()\n          this.$options = options;\n          // pre-resolve slots for renderSlot()\n          this.$slots = this.slots();\n          this.$scopedSlots = normalizeScopedSlots(parent, data.scopedSlots, this.$slots);\n      }\n      if (options._scopeId) {\n          this._c = function (a, b, c, d) {\n              var vnode = createElement$1(contextVm, a, b, c, d, needNormalization);\n              if (vnode && !isArray(vnode)) {\n                  vnode.fnScopeId = options._scopeId;\n                  vnode.fnContext = parent;\n              }\n              return vnode;\n          };\n      }\n      else {\n          this._c = function (a, b, c, d) {\n              return createElement$1(contextVm, a, b, c, d, needNormalization);\n          };\n      }\n  }\n  installRenderHelpers(FunctionalRenderContext.prototype);\n  function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {\n      var options = Ctor.options;\n      var props = {};\n      var propOptions = options.props;\n      if (isDef(propOptions)) {\n          for (var key in propOptions) {\n              props[key] = validateProp(key, propOptions, propsData || emptyObject);\n          }\n      }\n      else {\n          if (isDef(data.attrs))\n              mergeProps(props, data.attrs);\n          if (isDef(data.props))\n              mergeProps(props, data.props);\n      }\n      var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);\n      var vnode = options.render.call(null, renderContext._c, renderContext);\n      if (vnode instanceof VNode) {\n          return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);\n      }\n      else if (isArray(vnode)) {\n          var vnodes = normalizeChildren(vnode) || [];\n          var res = new Array(vnodes.length);\n          for (var i = 0; i < vnodes.length; i++) {\n              res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n          }\n          return res;\n      }\n  }\n  function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {\n      // #7817 clone node before setting fnContext, otherwise if the node is reused\n      // (e.g. it was from a cached normal slot) the fnContext causes named slots\n      // that should not be matched to match.\n      var clone = cloneVNode(vnode);\n      clone.fnContext = contextVm;\n      clone.fnOptions = options;\n      {\n          (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext =\n              renderContext;\n      }\n      if (data.slot) {\n          (clone.data || (clone.data = {})).slot = data.slot;\n      }\n      return clone;\n  }\n  function mergeProps(to, from) {\n      for (var key in from) {\n          to[camelize(key)] = from[key];\n      }\n  }\n\n  function getComponentName(options) {\n      return options.name || options.__name || options._componentTag;\n  }\n  // inline hooks to be invoked on component VNodes during patch\n  var componentVNodeHooks = {\n      init: function (vnode, hydrating) {\n          if (vnode.componentInstance &&\n              !vnode.componentInstance._isDestroyed &&\n              vnode.data.keepAlive) {\n              // kept-alive components, treat as a patch\n              var mountedNode = vnode; // work around flow\n              componentVNodeHooks.prepatch(mountedNode, mountedNode);\n          }\n          else {\n              var child = (vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance));\n              child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n          }\n      },\n      prepatch: function (oldVnode, vnode) {\n          var options = vnode.componentOptions;\n          var child = (vnode.componentInstance = oldVnode.componentInstance);\n          updateChildComponent(child, options.propsData, // updated props\n          options.listeners, // updated listeners\n          vnode, // new parent vnode\n          options.children // new children\n          );\n      },\n      insert: function (vnode) {\n          var context = vnode.context, componentInstance = vnode.componentInstance;\n          if (!componentInstance._isMounted) {\n              componentInstance._isMounted = true;\n              callHook$1(componentInstance, 'mounted');\n          }\n          if (vnode.data.keepAlive) {\n              if (context._isMounted) {\n                  // vue-router#1212\n                  // During updates, a kept-alive component's child components may\n                  // change, so directly walking the tree here may call activated hooks\n                  // on incorrect children. Instead we push them into a queue which will\n                  // be processed after the whole patch process ended.\n                  queueActivatedComponent(componentInstance);\n              }\n              else {\n                  activateChildComponent(componentInstance, true /* direct */);\n              }\n          }\n      },\n      destroy: function (vnode) {\n          var componentInstance = vnode.componentInstance;\n          if (!componentInstance._isDestroyed) {\n              if (!vnode.data.keepAlive) {\n                  componentInstance.$destroy();\n              }\n              else {\n                  deactivateChildComponent(componentInstance, true /* direct */);\n              }\n          }\n      }\n  };\n  var hooksToMerge = Object.keys(componentVNodeHooks);\n  function createComponent(Ctor, data, context, children, tag) {\n      if (isUndef(Ctor)) {\n          return;\n      }\n      var baseCtor = context.$options._base;\n      // plain options object: turn it into a constructor\n      if (isObject(Ctor)) {\n          Ctor = baseCtor.extend(Ctor);\n      }\n      // if at this stage it's not a constructor or an async component factory,\n      // reject.\n      if (typeof Ctor !== 'function') {\n          {\n              warn$2(\"Invalid Component definition: \".concat(String(Ctor)), context);\n          }\n          return;\n      }\n      // async component\n      var asyncFactory;\n      // @ts-expect-error\n      if (isUndef(Ctor.cid)) {\n          asyncFactory = Ctor;\n          Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n          if (Ctor === undefined) {\n              // return a placeholder node for async component, which is rendered\n              // as a comment node but preserves all the raw information for the node.\n              // the information will be used for async server-rendering and hydration.\n              return createAsyncPlaceholder(asyncFactory, data, context, children, tag);\n          }\n      }\n      data = data || {};\n      // resolve constructor options in case global mixins are applied after\n      // component constructor creation\n      resolveConstructorOptions(Ctor);\n      // transform component v-model data into props & events\n      if (isDef(data.model)) {\n          // @ts-expect-error\n          transformModel(Ctor.options, data);\n      }\n      // extract props\n      // @ts-expect-error\n      var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n      // functional component\n      // @ts-expect-error\n      if (isTrue(Ctor.options.functional)) {\n          return createFunctionalComponent(Ctor, propsData, data, context, children);\n      }\n      // extract listeners, since these needs to be treated as\n      // child component listeners instead of DOM listeners\n      var listeners = data.on;\n      // replace with listeners with .native modifier\n      // so it gets processed during parent component patch.\n      data.on = data.nativeOn;\n      // @ts-expect-error\n      if (isTrue(Ctor.options.abstract)) {\n          // abstract components do not keep anything\n          // other than props & listeners & slot\n          // work around flow\n          var slot = data.slot;\n          data = {};\n          if (slot) {\n              data.slot = slot;\n          }\n      }\n      // install component management hooks onto the placeholder node\n      installComponentHooks(data);\n      // return a placeholder vnode\n      // @ts-expect-error\n      var name = getComponentName(Ctor.options) || tag;\n      var vnode = new VNode(\n      // @ts-expect-error\n      \"vue-component-\".concat(Ctor.cid).concat(name ? \"-\".concat(name) : ''), data, undefined, undefined, undefined, context, \n      // @ts-expect-error\n      { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }, asyncFactory);\n      return vnode;\n  }\n  function createComponentInstanceForVnode(\n  // we know it's MountedComponentVNode but flow doesn't\n  vnode, \n  // activeInstance in lifecycle state\n  parent) {\n      var options = {\n          _isComponent: true,\n          _parentVnode: vnode,\n          parent: parent\n      };\n      // check inline-template render functions\n      var inlineTemplate = vnode.data.inlineTemplate;\n      if (isDef(inlineTemplate)) {\n          options.render = inlineTemplate.render;\n          options.staticRenderFns = inlineTemplate.staticRenderFns;\n      }\n      return new vnode.componentOptions.Ctor(options);\n  }\n  function installComponentHooks(data) {\n      var hooks = data.hook || (data.hook = {});\n      for (var i = 0; i < hooksToMerge.length; i++) {\n          var key = hooksToMerge[i];\n          var existing = hooks[key];\n          var toMerge = componentVNodeHooks[key];\n          // @ts-expect-error\n          if (existing !== toMerge && !(existing && existing._merged)) {\n              hooks[key] = existing ? mergeHook(toMerge, existing) : toMerge;\n          }\n      }\n  }\n  function mergeHook(f1, f2) {\n      var merged = function (a, b) {\n          // flow complains about extra args which is why we use any\n          f1(a, b);\n          f2(a, b);\n      };\n      merged._merged = true;\n      return merged;\n  }\n  // transform component v-model info (value and callback) into\n  // prop and event handler respectively.\n  function transformModel(options, data) {\n      var prop = (options.model && options.model.prop) || 'value';\n      var event = (options.model && options.model.event) || 'input';\n      (data.attrs || (data.attrs = {}))[prop] = data.model.value;\n      var on = data.on || (data.on = {});\n      var existing = on[event];\n      var callback = data.model.callback;\n      if (isDef(existing)) {\n          if (isArray(existing)\n              ? existing.indexOf(callback) === -1\n              : existing !== callback) {\n              on[event] = [callback].concat(existing);\n          }\n      }\n      else {\n          on[event] = callback;\n      }\n  }\n\n  var warn$2 = noop;\n  var tip = noop;\n  var generateComponentTrace; // work around flow check\n  var formatComponentName;\n  {\n      var hasConsole_1 = typeof console !== 'undefined';\n      var classifyRE_1 = /(?:^|[-_])(\\w)/g;\n      var classify_1 = function (str) {\n          return str.replace(classifyRE_1, function (c) { return c.toUpperCase(); }).replace(/[-_]/g, '');\n      };\n      warn$2 = function (msg, vm) {\n          if (vm === void 0) { vm = currentInstance; }\n          var trace = vm ? generateComponentTrace(vm) : '';\n          if (config.warnHandler) {\n              config.warnHandler.call(null, msg, vm, trace);\n          }\n          else if (hasConsole_1 && !config.silent) {\n              console.error(\"[Vue warn]: \".concat(msg).concat(trace));\n          }\n      };\n      tip = function (msg, vm) {\n          if (hasConsole_1 && !config.silent) {\n              console.warn(\"[Vue tip]: \".concat(msg) + (vm ? generateComponentTrace(vm) : ''));\n          }\n      };\n      formatComponentName = function (vm, includeFile) {\n          if (vm.$root === vm) {\n              return '<Root>';\n          }\n          var options = isFunction(vm) && vm.cid != null\n              ? vm.options\n              : vm._isVue\n                  ? vm.$options || vm.constructor.options\n                  : vm;\n          var name = getComponentName(options);\n          var file = options.__file;\n          if (!name && file) {\n              var match = file.match(/([^/\\\\]+)\\.vue$/);\n              name = match && match[1];\n          }\n          return ((name ? \"<\".concat(classify_1(name), \">\") : \"<Anonymous>\") +\n              (file && includeFile !== false ? \" at \".concat(file) : ''));\n      };\n      var repeat_1 = function (str, n) {\n          var res = '';\n          while (n) {\n              if (n % 2 === 1)\n                  res += str;\n              if (n > 1)\n                  str += str;\n              n >>= 1;\n          }\n          return res;\n      };\n      generateComponentTrace = function (vm) {\n          if (vm._isVue && vm.$parent) {\n              var tree = [];\n              var currentRecursiveSequence = 0;\n              while (vm) {\n                  if (tree.length > 0) {\n                      var last = tree[tree.length - 1];\n                      if (last.constructor === vm.constructor) {\n                          currentRecursiveSequence++;\n                          vm = vm.$parent;\n                          continue;\n                      }\n                      else if (currentRecursiveSequence > 0) {\n                          tree[tree.length - 1] = [last, currentRecursiveSequence];\n                          currentRecursiveSequence = 0;\n                      }\n                  }\n                  tree.push(vm);\n                  vm = vm.$parent;\n              }\n              return ('\\n\\nfound in\\n\\n' +\n                  tree\n                      .map(function (vm, i) {\n                      return \"\".concat(i === 0 ? '---> ' : repeat_1(' ', 5 + i * 2)).concat(isArray(vm)\n                          ? \"\".concat(formatComponentName(vm[0]), \"... (\").concat(vm[1], \" recursive calls)\")\n                          : formatComponentName(vm));\n                  })\n                      .join('\\n'));\n          }\n          else {\n              return \"\\n\\n(found in \".concat(formatComponentName(vm), \")\");\n          }\n      };\n  }\n\n  /**\n   * Option overwriting strategies are functions that handle\n   * how to merge a parent option value and a child option\n   * value into the final value.\n   */\n  var strats = config.optionMergeStrategies;\n  /**\n   * Options with restrictions\n   */\n  {\n      strats.el = strats.propsData = function (parent, child, vm, key) {\n          if (!vm) {\n              warn$2(\"option \\\"\".concat(key, \"\\\" can only be used during instance \") +\n                  'creation with the `new` keyword.');\n          }\n          return defaultStrat(parent, child);\n      };\n  }\n  /**\n   * Helper that recursively merges two data objects together.\n   */\n  function mergeData(to, from, recursive) {\n      if (recursive === void 0) { recursive = true; }\n      if (!from)\n          return to;\n      var key, toVal, fromVal;\n      var keys = hasSymbol\n          ? Reflect.ownKeys(from)\n          : Object.keys(from);\n      for (var i = 0; i < keys.length; i++) {\n          key = keys[i];\n          // in case the object is already observed...\n          if (key === '__ob__')\n              continue;\n          toVal = to[key];\n          fromVal = from[key];\n          if (!recursive || !hasOwn(to, key)) {\n              set(to, key, fromVal);\n          }\n          else if (toVal !== fromVal &&\n              isPlainObject(toVal) &&\n              isPlainObject(fromVal)) {\n              mergeData(toVal, fromVal);\n          }\n      }\n      return to;\n  }\n  /**\n   * Data\n   */\n  function mergeDataOrFn(parentVal, childVal, vm) {\n      if (!vm) {\n          // in a Vue.extend merge, both should be functions\n          if (!childVal) {\n              return parentVal;\n          }\n          if (!parentVal) {\n              return childVal;\n          }\n          // when parentVal & childVal are both present,\n          // we need to return a function that returns the\n          // merged result of both functions... no need to\n          // check if parentVal is a function here because\n          // it has to be a function to pass previous merges.\n          return function mergedDataFn() {\n              return mergeData(isFunction(childVal) ? childVal.call(this, this) : childVal, isFunction(parentVal) ? parentVal.call(this, this) : parentVal);\n          };\n      }\n      else {\n          return function mergedInstanceDataFn() {\n              // instance merge\n              var instanceData = isFunction(childVal)\n                  ? childVal.call(vm, vm)\n                  : childVal;\n              var defaultData = isFunction(parentVal)\n                  ? parentVal.call(vm, vm)\n                  : parentVal;\n              if (instanceData) {\n                  return mergeData(instanceData, defaultData);\n              }\n              else {\n                  return defaultData;\n              }\n          };\n      }\n  }\n  strats.data = function (parentVal, childVal, vm) {\n      if (!vm) {\n          if (childVal && typeof childVal !== 'function') {\n              warn$2('The \"data\" option should be a function ' +\n                      'that returns a per-instance value in component ' +\n                      'definitions.', vm);\n              return parentVal;\n          }\n          return mergeDataOrFn(parentVal, childVal);\n      }\n      return mergeDataOrFn(parentVal, childVal, vm);\n  };\n  /**\n   * Hooks and props are merged as arrays.\n   */\n  function mergeLifecycleHook(parentVal, childVal) {\n      var res = childVal\n          ? parentVal\n              ? parentVal.concat(childVal)\n              : isArray(childVal)\n                  ? childVal\n                  : [childVal]\n          : parentVal;\n      return res ? dedupeHooks(res) : res;\n  }\n  function dedupeHooks(hooks) {\n      var res = [];\n      for (var i = 0; i < hooks.length; i++) {\n          if (res.indexOf(hooks[i]) === -1) {\n              res.push(hooks[i]);\n          }\n      }\n      return res;\n  }\n  LIFECYCLE_HOOKS.forEach(function (hook) {\n      strats[hook] = mergeLifecycleHook;\n  });\n  /**\n   * Assets\n   *\n   * When a vm is present (instance creation), we need to do\n   * a three-way merge between constructor options, instance\n   * options and parent options.\n   */\n  function mergeAssets(parentVal, childVal, vm, key) {\n      var res = Object.create(parentVal || null);\n      if (childVal) {\n          assertObjectType(key, childVal, vm);\n          return extend(res, childVal);\n      }\n      else {\n          return res;\n      }\n  }\n  ASSET_TYPES.forEach(function (type) {\n      strats[type + 's'] = mergeAssets;\n  });\n  /**\n   * Watchers.\n   *\n   * Watchers hashes should not overwrite one\n   * another, so we merge them as arrays.\n   */\n  strats.watch = function (parentVal, childVal, vm, key) {\n      // work around Firefox's Object.prototype.watch...\n      //@ts-expect-error work around\n      if (parentVal === nativeWatch)\n          parentVal = undefined;\n      //@ts-expect-error work around\n      if (childVal === nativeWatch)\n          childVal = undefined;\n      /* istanbul ignore if */\n      if (!childVal)\n          return Object.create(parentVal || null);\n      {\n          assertObjectType(key, childVal, vm);\n      }\n      if (!parentVal)\n          return childVal;\n      var ret = {};\n      extend(ret, parentVal);\n      for (var key_1 in childVal) {\n          var parent_1 = ret[key_1];\n          var child = childVal[key_1];\n          if (parent_1 && !isArray(parent_1)) {\n              parent_1 = [parent_1];\n          }\n          ret[key_1] = parent_1 ? parent_1.concat(child) : isArray(child) ? child : [child];\n      }\n      return ret;\n  };\n  /**\n   * Other object hashes.\n   */\n  strats.props =\n      strats.methods =\n          strats.inject =\n              strats.computed =\n                  function (parentVal, childVal, vm, key) {\n                      if (childVal && true) {\n                          assertObjectType(key, childVal, vm);\n                      }\n                      if (!parentVal)\n                          return childVal;\n                      var ret = Object.create(null);\n                      extend(ret, parentVal);\n                      if (childVal)\n                          extend(ret, childVal);\n                      return ret;\n                  };\n  strats.provide = function (parentVal, childVal) {\n      if (!parentVal)\n          return childVal;\n      return function () {\n          var ret = Object.create(null);\n          mergeData(ret, isFunction(parentVal) ? parentVal.call(this) : parentVal);\n          if (childVal) {\n              mergeData(ret, isFunction(childVal) ? childVal.call(this) : childVal, false // non-recursive\n              );\n          }\n          return ret;\n      };\n  };\n  /**\n   * Default strategy.\n   */\n  var defaultStrat = function (parentVal, childVal) {\n      return childVal === undefined ? parentVal : childVal;\n  };\n  /**\n   * Validate component names\n   */\n  function checkComponents(options) {\n      for (var key in options.components) {\n          validateComponentName(key);\n      }\n  }\n  function validateComponentName(name) {\n      if (!new RegExp(\"^[a-zA-Z][\\\\-\\\\.0-9_\".concat(unicodeRegExp.source, \"]*$\")).test(name)) {\n          warn$2('Invalid component name: \"' +\n              name +\n              '\". Component names ' +\n              'should conform to valid custom element name in html5 specification.');\n      }\n      if (isBuiltInTag(name) || config.isReservedTag(name)) {\n          warn$2('Do not use built-in or reserved HTML elements as component ' +\n              'id: ' +\n              name);\n      }\n  }\n  /**\n   * Ensure all props option syntax are normalized into the\n   * Object-based format.\n   */\n  function normalizeProps(options, vm) {\n      var props = options.props;\n      if (!props)\n          return;\n      var res = {};\n      var i, val, name;\n      if (isArray(props)) {\n          i = props.length;\n          while (i--) {\n              val = props[i];\n              if (typeof val === 'string') {\n                  name = camelize(val);\n                  res[name] = { type: null };\n              }\n              else {\n                  warn$2('props must be strings when using array syntax.');\n              }\n          }\n      }\n      else if (isPlainObject(props)) {\n          for (var key in props) {\n              val = props[key];\n              name = camelize(key);\n              res[name] = isPlainObject(val) ? val : { type: val };\n          }\n      }\n      else {\n          warn$2(\"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n              \"but got \".concat(toRawType(props), \".\"), vm);\n      }\n      options.props = res;\n  }\n  /**\n   * Normalize all injections into Object-based format\n   */\n  function normalizeInject(options, vm) {\n      var inject = options.inject;\n      if (!inject)\n          return;\n      var normalized = (options.inject = {});\n      if (isArray(inject)) {\n          for (var i = 0; i < inject.length; i++) {\n              normalized[inject[i]] = { from: inject[i] };\n          }\n      }\n      else if (isPlainObject(inject)) {\n          for (var key in inject) {\n              var val = inject[key];\n              normalized[key] = isPlainObject(val)\n                  ? extend({ from: key }, val)\n                  : { from: val };\n          }\n      }\n      else {\n          warn$2(\"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n              \"but got \".concat(toRawType(inject), \".\"), vm);\n      }\n  }\n  /**\n   * Normalize raw function directives into object format.\n   */\n  function normalizeDirectives$1(options) {\n      var dirs = options.directives;\n      if (dirs) {\n          for (var key in dirs) {\n              var def = dirs[key];\n              if (isFunction(def)) {\n                  dirs[key] = { bind: def, update: def };\n              }\n          }\n      }\n  }\n  function assertObjectType(name, value, vm) {\n      if (!isPlainObject(value)) {\n          warn$2(\"Invalid value for option \\\"\".concat(name, \"\\\": expected an Object, \") +\n              \"but got \".concat(toRawType(value), \".\"), vm);\n      }\n  }\n  /**\n   * Merge two option objects into a new one.\n   * Core utility used in both instantiation and inheritance.\n   */\n  function mergeOptions(parent, child, vm) {\n      {\n          checkComponents(child);\n      }\n      if (isFunction(child)) {\n          // @ts-expect-error\n          child = child.options;\n      }\n      normalizeProps(child, vm);\n      normalizeInject(child, vm);\n      normalizeDirectives$1(child);\n      // Apply extends and mixins on the child options,\n      // but only if it is a raw options object that isn't\n      // the result of another mergeOptions call.\n      // Only merged options has the _base property.\n      if (!child._base) {\n          if (child.extends) {\n              parent = mergeOptions(parent, child.extends, vm);\n          }\n          if (child.mixins) {\n              for (var i = 0, l = child.mixins.length; i < l; i++) {\n                  parent = mergeOptions(parent, child.mixins[i], vm);\n              }\n          }\n      }\n      var options = {};\n      var key;\n      for (key in parent) {\n          mergeField(key);\n      }\n      for (key in child) {\n          if (!hasOwn(parent, key)) {\n              mergeField(key);\n          }\n      }\n      function mergeField(key) {\n          var strat = strats[key] || defaultStrat;\n          options[key] = strat(parent[key], child[key], vm, key);\n      }\n      return options;\n  }\n  /**\n   * Resolve an asset.\n   * This function is used because child instances need access\n   * to assets defined in its ancestor chain.\n   */\n  function resolveAsset(options, type, id, warnMissing) {\n      /* istanbul ignore if */\n      if (typeof id !== 'string') {\n          return;\n      }\n      var assets = options[type];\n      // check local registration variations first\n      if (hasOwn(assets, id))\n          return assets[id];\n      var camelizedId = camelize(id);\n      if (hasOwn(assets, camelizedId))\n          return assets[camelizedId];\n      var PascalCaseId = capitalize(camelizedId);\n      if (hasOwn(assets, PascalCaseId))\n          return assets[PascalCaseId];\n      // fallback to prototype chain\n      var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n      if (warnMissing && !res) {\n          warn$2('Failed to resolve ' + type.slice(0, -1) + ': ' + id);\n      }\n      return res;\n  }\n\n  function validateProp(key, propOptions, propsData, vm) {\n      var prop = propOptions[key];\n      var absent = !hasOwn(propsData, key);\n      var value = propsData[key];\n      // boolean casting\n      var booleanIndex = getTypeIndex(Boolean, prop.type);\n      if (booleanIndex > -1) {\n          if (absent && !hasOwn(prop, 'default')) {\n              value = false;\n          }\n          else if (value === '' || value === hyphenate(key)) {\n              // only cast empty string / same name to boolean if\n              // boolean has higher priority\n              var stringIndex = getTypeIndex(String, prop.type);\n              if (stringIndex < 0 || booleanIndex < stringIndex) {\n                  value = true;\n              }\n          }\n      }\n      // check default value\n      if (value === undefined) {\n          value = getPropDefaultValue(vm, prop, key);\n          // since the default value is a fresh copy,\n          // make sure to observe it.\n          var prevShouldObserve = shouldObserve;\n          toggleObserving(true);\n          observe(value);\n          toggleObserving(prevShouldObserve);\n      }\n      {\n          assertProp(prop, key, value, vm, absent);\n      }\n      return value;\n  }\n  /**\n   * Get the default value of a prop.\n   */\n  function getPropDefaultValue(vm, prop, key) {\n      // no default, return undefined\n      if (!hasOwn(prop, 'default')) {\n          return undefined;\n      }\n      var def = prop.default;\n      // warn against non-factory defaults for Object & Array\n      if (isObject(def)) {\n          warn$2('Invalid default value for prop \"' +\n              key +\n              '\": ' +\n              'Props with type Object/Array must use a factory function ' +\n              'to return the default value.', vm);\n      }\n      // the raw prop value was also undefined from previous render,\n      // return previous default value to avoid unnecessary watcher trigger\n      if (vm &&\n          vm.$options.propsData &&\n          vm.$options.propsData[key] === undefined &&\n          vm._props[key] !== undefined) {\n          return vm._props[key];\n      }\n      // call factory function for non-Function types\n      // a value is Function if its prototype is function even across different execution context\n      return isFunction(def) && getType(prop.type) !== 'Function'\n          ? def.call(vm)\n          : def;\n  }\n  /**\n   * Assert whether a prop is valid.\n   */\n  function assertProp(prop, name, value, vm, absent) {\n      if (prop.required && absent) {\n          warn$2('Missing required prop: \"' + name + '\"', vm);\n          return;\n      }\n      if (value == null && !prop.required) {\n          return;\n      }\n      var type = prop.type;\n      var valid = !type || type === true;\n      var expectedTypes = [];\n      if (type) {\n          if (!isArray(type)) {\n              type = [type];\n          }\n          for (var i = 0; i < type.length && !valid; i++) {\n              var assertedType = assertType(value, type[i], vm);\n              expectedTypes.push(assertedType.expectedType || '');\n              valid = assertedType.valid;\n          }\n      }\n      var haveExpectedTypes = expectedTypes.some(function (t) { return t; });\n      if (!valid && haveExpectedTypes) {\n          warn$2(getInvalidTypeMessage(name, value, expectedTypes), vm);\n          return;\n      }\n      var validator = prop.validator;\n      if (validator) {\n          if (!validator(value)) {\n              warn$2('Invalid prop: custom validator check failed for prop \"' + name + '\".', vm);\n          }\n      }\n  }\n  var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;\n  function assertType(value, type, vm) {\n      var valid;\n      var expectedType = getType(type);\n      if (simpleCheckRE.test(expectedType)) {\n          var t = typeof value;\n          valid = t === expectedType.toLowerCase();\n          // for primitive wrapper objects\n          if (!valid && t === 'object') {\n              valid = value instanceof type;\n          }\n      }\n      else if (expectedType === 'Object') {\n          valid = isPlainObject(value);\n      }\n      else if (expectedType === 'Array') {\n          valid = isArray(value);\n      }\n      else {\n          try {\n              valid = value instanceof type;\n          }\n          catch (e) {\n              warn$2('Invalid prop type: \"' + String(type) + '\" is not a constructor', vm);\n              valid = false;\n          }\n      }\n      return {\n          valid: valid,\n          expectedType: expectedType\n      };\n  }\n  var functionTypeCheckRE = /^\\s*function (\\w+)/;\n  /**\n   * Use function string name to check built-in types,\n   * because a simple equality check will fail when running\n   * across different vms / iframes.\n   */\n  function getType(fn) {\n      var match = fn && fn.toString().match(functionTypeCheckRE);\n      return match ? match[1] : '';\n  }\n  function isSameType(a, b) {\n      return getType(a) === getType(b);\n  }\n  function getTypeIndex(type, expectedTypes) {\n      if (!isArray(expectedTypes)) {\n          return isSameType(expectedTypes, type) ? 0 : -1;\n      }\n      for (var i = 0, len = expectedTypes.length; i < len; i++) {\n          if (isSameType(expectedTypes[i], type)) {\n              return i;\n          }\n      }\n      return -1;\n  }\n  function getInvalidTypeMessage(name, value, expectedTypes) {\n      var message = \"Invalid prop: type check failed for prop \\\"\".concat(name, \"\\\".\") +\n          \" Expected \".concat(expectedTypes.map(capitalize).join(', '));\n      var expectedType = expectedTypes[0];\n      var receivedType = toRawType(value);\n      // check if we need to specify expected value\n      if (expectedTypes.length === 1 &&\n          isExplicable(expectedType) &&\n          isExplicable(typeof value) &&\n          !isBoolean(expectedType, receivedType)) {\n          message += \" with value \".concat(styleValue(value, expectedType));\n      }\n      message += \", got \".concat(receivedType, \" \");\n      // check if we need to specify received value\n      if (isExplicable(receivedType)) {\n          message += \"with value \".concat(styleValue(value, receivedType), \".\");\n      }\n      return message;\n  }\n  function styleValue(value, type) {\n      if (type === 'String') {\n          return \"\\\"\".concat(value, \"\\\"\");\n      }\n      else if (type === 'Number') {\n          return \"\".concat(Number(value));\n      }\n      else {\n          return \"\".concat(value);\n      }\n  }\n  var EXPLICABLE_TYPES = ['string', 'number', 'boolean'];\n  function isExplicable(value) {\n      return EXPLICABLE_TYPES.some(function (elem) { return value.toLowerCase() === elem; });\n  }\n  function isBoolean() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n      }\n      return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; });\n  }\n\n  function Vue(options) {\n      if (!(this instanceof Vue)) {\n          warn$2('Vue is a constructor and should be called with the `new` keyword');\n      }\n      this._init(options);\n  }\n  //@ts-expect-error Vue has function type\n  initMixin$1(Vue);\n  //@ts-expect-error Vue has function type\n  stateMixin(Vue);\n  //@ts-expect-error Vue has function type\n  eventsMixin(Vue);\n  //@ts-expect-error Vue has function type\n  lifecycleMixin(Vue);\n  //@ts-expect-error Vue has function type\n  renderMixin(Vue);\n\n  function initUse(Vue) {\n      Vue.use = function (plugin) {\n          var installedPlugins = this._installedPlugins || (this._installedPlugins = []);\n          if (installedPlugins.indexOf(plugin) > -1) {\n              return this;\n          }\n          // additional parameters\n          var args = toArray(arguments, 1);\n          args.unshift(this);\n          if (isFunction(plugin.install)) {\n              plugin.install.apply(plugin, args);\n          }\n          else if (isFunction(plugin)) {\n              plugin.apply(null, args);\n          }\n          installedPlugins.push(plugin);\n          return this;\n      };\n  }\n\n  function initMixin(Vue) {\n      Vue.mixin = function (mixin) {\n          this.options = mergeOptions(this.options, mixin);\n          return this;\n      };\n  }\n\n  function initExtend(Vue) {\n      /**\n       * Each instance constructor, including Vue, has a unique\n       * cid. This enables us to create wrapped \"child\n       * constructors\" for prototypal inheritance and cache them.\n       */\n      Vue.cid = 0;\n      var cid = 1;\n      /**\n       * Class inheritance\n       */\n      Vue.extend = function (extendOptions) {\n          extendOptions = extendOptions || {};\n          var Super = this;\n          var SuperId = Super.cid;\n          var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n          if (cachedCtors[SuperId]) {\n              return cachedCtors[SuperId];\n          }\n          var name = getComponentName(extendOptions) || getComponentName(Super.options);\n          if (name) {\n              validateComponentName(name);\n          }\n          var Sub = function VueComponent(options) {\n              this._init(options);\n          };\n          Sub.prototype = Object.create(Super.prototype);\n          Sub.prototype.constructor = Sub;\n          Sub.cid = cid++;\n          Sub.options = mergeOptions(Super.options, extendOptions);\n          Sub['super'] = Super;\n          // For props and computed properties, we define the proxy getters on\n          // the Vue instances at extension time, on the extended prototype. This\n          // avoids Object.defineProperty calls for each instance created.\n          if (Sub.options.props) {\n              initProps(Sub);\n          }\n          if (Sub.options.computed) {\n              initComputed(Sub);\n          }\n          // allow further extension/mixin/plugin usage\n          Sub.extend = Super.extend;\n          Sub.mixin = Super.mixin;\n          Sub.use = Super.use;\n          // create asset registers, so extended classes\n          // can have their private assets too.\n          ASSET_TYPES.forEach(function (type) {\n              Sub[type] = Super[type];\n          });\n          // enable recursive self-lookup\n          if (name) {\n              Sub.options.components[name] = Sub;\n          }\n          // keep a reference to the super options at extension time.\n          // later at instantiation we can check if Super's options have\n          // been updated.\n          Sub.superOptions = Super.options;\n          Sub.extendOptions = extendOptions;\n          Sub.sealedOptions = extend({}, Sub.options);\n          // cache constructor\n          cachedCtors[SuperId] = Sub;\n          return Sub;\n      };\n  }\n  function initProps(Comp) {\n      var props = Comp.options.props;\n      for (var key in props) {\n          proxy(Comp.prototype, \"_props\", key);\n      }\n  }\n  function initComputed(Comp) {\n      var computed = Comp.options.computed;\n      for (var key in computed) {\n          defineComputed(Comp.prototype, key, computed[key]);\n      }\n  }\n\n  function initAssetRegisters(Vue) {\n      /**\n       * Create asset registration methods.\n       */\n      ASSET_TYPES.forEach(function (type) {\n          // @ts-expect-error function is not exact same type\n          Vue[type] = function (id, definition) {\n              if (!definition) {\n                  return this.options[type + 's'][id];\n              }\n              else {\n                  /* istanbul ignore if */\n                  if (type === 'component') {\n                      validateComponentName(id);\n                  }\n                  if (type === 'component' && isPlainObject(definition)) {\n                      // @ts-expect-error\n                      definition.name = definition.name || id;\n                      definition = this.options._base.extend(definition);\n                  }\n                  if (type === 'directive' && isFunction(definition)) {\n                      definition = { bind: definition, update: definition };\n                  }\n                  this.options[type + 's'][id] = definition;\n                  return definition;\n              }\n          };\n      });\n  }\n\n  function _getComponentName(opts) {\n      return opts && (getComponentName(opts.Ctor.options) || opts.tag);\n  }\n  function matches(pattern, name) {\n      if (isArray(pattern)) {\n          return pattern.indexOf(name) > -1;\n      }\n      else if (typeof pattern === 'string') {\n          return pattern.split(',').indexOf(name) > -1;\n      }\n      else if (isRegExp(pattern)) {\n          return pattern.test(name);\n      }\n      /* istanbul ignore next */\n      return false;\n  }\n  function pruneCache(keepAliveInstance, filter) {\n      var cache = keepAliveInstance.cache, keys = keepAliveInstance.keys, _vnode = keepAliveInstance._vnode;\n      for (var key in cache) {\n          var entry = cache[key];\n          if (entry) {\n              var name_1 = entry.name;\n              if (name_1 && !filter(name_1)) {\n                  pruneCacheEntry(cache, key, keys, _vnode);\n              }\n          }\n      }\n  }\n  function pruneCacheEntry(cache, key, keys, current) {\n      var entry = cache[key];\n      if (entry && (!current || entry.tag !== current.tag)) {\n          // @ts-expect-error can be undefined\n          entry.componentInstance.$destroy();\n      }\n      cache[key] = null;\n      remove$2(keys, key);\n  }\n  var patternTypes = [String, RegExp, Array];\n  // TODO defineComponent\n  var KeepAlive = {\n      name: 'keep-alive',\n      abstract: true,\n      props: {\n          include: patternTypes,\n          exclude: patternTypes,\n          max: [String, Number]\n      },\n      methods: {\n          cacheVNode: function () {\n              var _a = this, cache = _a.cache, keys = _a.keys, vnodeToCache = _a.vnodeToCache, keyToCache = _a.keyToCache;\n              if (vnodeToCache) {\n                  var tag = vnodeToCache.tag, componentInstance = vnodeToCache.componentInstance, componentOptions = vnodeToCache.componentOptions;\n                  cache[keyToCache] = {\n                      name: _getComponentName(componentOptions),\n                      tag: tag,\n                      componentInstance: componentInstance\n                  };\n                  keys.push(keyToCache);\n                  // prune oldest entry\n                  if (this.max && keys.length > parseInt(this.max)) {\n                      pruneCacheEntry(cache, keys[0], keys, this._vnode);\n                  }\n                  this.vnodeToCache = null;\n              }\n          }\n      },\n      created: function () {\n          this.cache = Object.create(null);\n          this.keys = [];\n      },\n      destroyed: function () {\n          for (var key in this.cache) {\n              pruneCacheEntry(this.cache, key, this.keys);\n          }\n      },\n      mounted: function () {\n          var _this = this;\n          this.cacheVNode();\n          this.$watch('include', function (val) {\n              pruneCache(_this, function (name) { return matches(val, name); });\n          });\n          this.$watch('exclude', function (val) {\n              pruneCache(_this, function (name) { return !matches(val, name); });\n          });\n      },\n      updated: function () {\n          this.cacheVNode();\n      },\n      render: function () {\n          var slot = this.$slots.default;\n          var vnode = getFirstComponentChild(slot);\n          var componentOptions = vnode && vnode.componentOptions;\n          if (componentOptions) {\n              // check pattern\n              var name_2 = _getComponentName(componentOptions);\n              var _a = this, include = _a.include, exclude = _a.exclude;\n              if (\n              // not included\n              (include && (!name_2 || !matches(include, name_2))) ||\n                  // excluded\n                  (exclude && name_2 && matches(exclude, name_2))) {\n                  return vnode;\n              }\n              var _b = this, cache = _b.cache, keys = _b.keys;\n              var key = vnode.key == null\n                  ? // same constructor may get registered as different local components\n                      // so cid alone is not enough (#3269)\n                      componentOptions.Ctor.cid +\n                          (componentOptions.tag ? \"::\".concat(componentOptions.tag) : '')\n                  : vnode.key;\n              if (cache[key]) {\n                  vnode.componentInstance = cache[key].componentInstance;\n                  // make current key freshest\n                  remove$2(keys, key);\n                  keys.push(key);\n              }\n              else {\n                  // delay setting the cache until update\n                  this.vnodeToCache = vnode;\n                  this.keyToCache = key;\n              }\n              // @ts-expect-error can vnode.data can be undefined\n              vnode.data.keepAlive = true;\n          }\n          return vnode || (slot && slot[0]);\n      }\n  };\n\n  var builtInComponents = {\n      KeepAlive: KeepAlive\n  };\n\n  function initGlobalAPI(Vue) {\n      // config\n      var configDef = {};\n      configDef.get = function () { return config; };\n      {\n          configDef.set = function () {\n              warn$2('Do not replace the Vue.config object, set individual fields instead.');\n          };\n      }\n      Object.defineProperty(Vue, 'config', configDef);\n      // exposed util methods.\n      // NOTE: these are not considered part of the public API - avoid relying on\n      // them unless you are aware of the risk.\n      Vue.util = {\n          warn: warn$2,\n          extend: extend,\n          mergeOptions: mergeOptions,\n          defineReactive: defineReactive\n      };\n      Vue.set = set;\n      Vue.delete = del;\n      Vue.nextTick = nextTick;\n      // 2.6 explicit observable API\n      Vue.observable = function (obj) {\n          observe(obj);\n          return obj;\n      };\n      Vue.options = Object.create(null);\n      ASSET_TYPES.forEach(function (type) {\n          Vue.options[type + 's'] = Object.create(null);\n      });\n      // this is used to identify the \"base\" constructor to extend all plain-object\n      // components with in Weex's multi-instance scenarios.\n      Vue.options._base = Vue;\n      extend(Vue.options.components, builtInComponents);\n      initUse(Vue);\n      initMixin(Vue);\n      initExtend(Vue);\n      initAssetRegisters(Vue);\n  }\n\n  initGlobalAPI(Vue);\n  Object.defineProperty(Vue.prototype, '$isServer', {\n      get: isServerRendering\n  });\n  Object.defineProperty(Vue.prototype, '$ssrContext', {\n      get: function () {\n          /* istanbul ignore next */\n          return this.$vnode && this.$vnode.ssrContext;\n      }\n  });\n  // expose FunctionalRenderContext for ssr runtime helper installation\n  Object.defineProperty(Vue, 'FunctionalRenderContext', {\n      value: FunctionalRenderContext\n  });\n  Vue.version = version;\n\n  // these are reserved for web because they are directly compiled away\n  // during template compilation\n  var isReservedAttr = makeMap('style,class');\n  // attributes that should be using props for binding\n  var acceptValue = makeMap('input,textarea,option,select,progress');\n  var mustUseProp = function (tag, type, attr) {\n      return ((attr === 'value' && acceptValue(tag) && type !== 'button') ||\n          (attr === 'selected' && tag === 'option') ||\n          (attr === 'checked' && tag === 'input') ||\n          (attr === 'muted' && tag === 'video'));\n  };\n  var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n  var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');\n  var convertEnumeratedValue = function (key, value) {\n      return isFalsyAttrValue(value) || value === 'false'\n          ? 'false'\n          : // allow arbitrary string value for contenteditable\n              key === 'contenteditable' && isValidContentEditableValue(value)\n                  ? value\n                  : 'true';\n  };\n  var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n      'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n      'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n      'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n      'required,reversed,scoped,seamless,selected,sortable,' +\n      'truespeed,typemustmatch,visible');\n  var xlinkNS = 'http://www.w3.org/1999/xlink';\n  var isXlink = function (name) {\n      return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';\n  };\n  var getXlinkProp = function (name) {\n      return isXlink(name) ? name.slice(6, name.length) : '';\n  };\n  var isFalsyAttrValue = function (val) {\n      return val == null || val === false;\n  };\n\n  function genClassForVnode(vnode) {\n      var data = vnode.data;\n      var parentNode = vnode;\n      var childNode = vnode;\n      while (isDef(childNode.componentInstance)) {\n          childNode = childNode.componentInstance._vnode;\n          if (childNode && childNode.data) {\n              data = mergeClassData(childNode.data, data);\n          }\n      }\n      // @ts-expect-error parentNode.parent not VNodeWithData\n      while (isDef((parentNode = parentNode.parent))) {\n          if (parentNode && parentNode.data) {\n              data = mergeClassData(data, parentNode.data);\n          }\n      }\n      return renderClass(data.staticClass, data.class);\n  }\n  function mergeClassData(child, parent) {\n      return {\n          staticClass: concat(child.staticClass, parent.staticClass),\n          class: isDef(child.class) ? [child.class, parent.class] : parent.class\n      };\n  }\n  function renderClass(staticClass, dynamicClass) {\n      if (isDef(staticClass) || isDef(dynamicClass)) {\n          return concat(staticClass, stringifyClass(dynamicClass));\n      }\n      /* istanbul ignore next */\n      return '';\n  }\n  function concat(a, b) {\n      return a ? (b ? a + ' ' + b : a) : b || '';\n  }\n  function stringifyClass(value) {\n      if (Array.isArray(value)) {\n          return stringifyArray(value);\n      }\n      if (isObject(value)) {\n          return stringifyObject(value);\n      }\n      if (typeof value === 'string') {\n          return value;\n      }\n      /* istanbul ignore next */\n      return '';\n  }\n  function stringifyArray(value) {\n      var res = '';\n      var stringified;\n      for (var i = 0, l = value.length; i < l; i++) {\n          if (isDef((stringified = stringifyClass(value[i]))) && stringified !== '') {\n              if (res)\n                  res += ' ';\n              res += stringified;\n          }\n      }\n      return res;\n  }\n  function stringifyObject(value) {\n      var res = '';\n      for (var key in value) {\n          if (value[key]) {\n              if (res)\n                  res += ' ';\n              res += key;\n          }\n      }\n      return res;\n  }\n\n  var namespaceMap = {\n      svg: 'http://www.w3.org/2000/svg',\n      math: 'http://www.w3.org/1998/Math/MathML'\n  };\n  var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' +\n      'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n      'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n      'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n      's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n      'embed,object,param,source,canvas,script,noscript,del,ins,' +\n      'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n      'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n      'output,progress,select,textarea,' +\n      'details,dialog,menu,menuitem,summary,' +\n      'content,element,shadow,template,blockquote,iframe,tfoot');\n  // this map is intentionally selective, only covering SVG elements that may\n  // contain child elements.\n  var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n      'foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n      'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);\n  var isPreTag = function (tag) { return tag === 'pre'; };\n  var isReservedTag = function (tag) {\n      return isHTMLTag(tag) || isSVG(tag);\n  };\n  function getTagNamespace(tag) {\n      if (isSVG(tag)) {\n          return 'svg';\n      }\n      // basic support for MathML\n      // note it doesn't support other MathML elements being component roots\n      if (tag === 'math') {\n          return 'math';\n      }\n  }\n  var unknownElementCache = Object.create(null);\n  function isUnknownElement(tag) {\n      /* istanbul ignore if */\n      if (!inBrowser) {\n          return true;\n      }\n      if (isReservedTag(tag)) {\n          return false;\n      }\n      tag = tag.toLowerCase();\n      /* istanbul ignore if */\n      if (unknownElementCache[tag] != null) {\n          return unknownElementCache[tag];\n      }\n      var el = document.createElement(tag);\n      if (tag.indexOf('-') > -1) {\n          // http://stackoverflow.com/a/28210364/1070244\n          return (unknownElementCache[tag] =\n              el.constructor === window.HTMLUnknownElement ||\n                  el.constructor === window.HTMLElement);\n      }\n      else {\n          return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()));\n      }\n  }\n  var isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n  /**\n   * Query an element selector if it's not an element already.\n   */\n  function query(el) {\n      if (typeof el === 'string') {\n          var selected = document.querySelector(el);\n          if (!selected) {\n              warn$2('Cannot find element: ' + el);\n              return document.createElement('div');\n          }\n          return selected;\n      }\n      else {\n          return el;\n      }\n  }\n\n  function createElement(tagName, vnode) {\n      var elm = document.createElement(tagName);\n      if (tagName !== 'select') {\n          return elm;\n      }\n      // false or null will remove the attribute but undefined will not\n      if (vnode.data &&\n          vnode.data.attrs &&\n          vnode.data.attrs.multiple !== undefined) {\n          elm.setAttribute('multiple', 'multiple');\n      }\n      return elm;\n  }\n  function createElementNS(namespace, tagName) {\n      return document.createElementNS(namespaceMap[namespace], tagName);\n  }\n  function createTextNode(text) {\n      return document.createTextNode(text);\n  }\n  function createComment(text) {\n      return document.createComment(text);\n  }\n  function insertBefore(parentNode, newNode, referenceNode) {\n      parentNode.insertBefore(newNode, referenceNode);\n  }\n  function removeChild(node, child) {\n      node.removeChild(child);\n  }\n  function appendChild(node, child) {\n      node.appendChild(child);\n  }\n  function parentNode(node) {\n      return node.parentNode;\n  }\n  function nextSibling(node) {\n      return node.nextSibling;\n  }\n  function tagName(node) {\n      return node.tagName;\n  }\n  function setTextContent(node, text) {\n      node.textContent = text;\n  }\n  function setStyleScope(node, scopeId) {\n      node.setAttribute(scopeId, '');\n  }\n\n  var nodeOps = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    createElement: createElement,\n    createElementNS: createElementNS,\n    createTextNode: createTextNode,\n    createComment: createComment,\n    insertBefore: insertBefore,\n    removeChild: removeChild,\n    appendChild: appendChild,\n    parentNode: parentNode,\n    nextSibling: nextSibling,\n    tagName: tagName,\n    setTextContent: setTextContent,\n    setStyleScope: setStyleScope\n  });\n\n  var ref = {\n      create: function (_, vnode) {\n          registerRef(vnode);\n      },\n      update: function (oldVnode, vnode) {\n          if (oldVnode.data.ref !== vnode.data.ref) {\n              registerRef(oldVnode, true);\n              registerRef(vnode);\n          }\n      },\n      destroy: function (vnode) {\n          registerRef(vnode, true);\n      }\n  };\n  function registerRef(vnode, isRemoval) {\n      var ref = vnode.data.ref;\n      if (!isDef(ref))\n          return;\n      var vm = vnode.context;\n      var refValue = vnode.componentInstance || vnode.elm;\n      var value = isRemoval ? null : refValue;\n      var $refsValue = isRemoval ? undefined : refValue;\n      if (isFunction(ref)) {\n          invokeWithErrorHandling(ref, vm, [value], vm, \"template ref function\");\n          return;\n      }\n      var isFor = vnode.data.refInFor;\n      var _isString = typeof ref === 'string' || typeof ref === 'number';\n      var _isRef = isRef(ref);\n      var refs = vm.$refs;\n      if (_isString || _isRef) {\n          if (isFor) {\n              var existing = _isString ? refs[ref] : ref.value;\n              if (isRemoval) {\n                  isArray(existing) && remove$2(existing, refValue);\n              }\n              else {\n                  if (!isArray(existing)) {\n                      if (_isString) {\n                          refs[ref] = [refValue];\n                          setSetupRef(vm, ref, refs[ref]);\n                      }\n                      else {\n                          ref.value = [refValue];\n                      }\n                  }\n                  else if (!existing.includes(refValue)) {\n                      existing.push(refValue);\n                  }\n              }\n          }\n          else if (_isString) {\n              if (isRemoval && refs[ref] !== refValue) {\n                  return;\n              }\n              refs[ref] = $refsValue;\n              setSetupRef(vm, ref, value);\n          }\n          else if (_isRef) {\n              if (isRemoval && ref.value !== refValue) {\n                  return;\n              }\n              ref.value = value;\n          }\n          else {\n              warn$2(\"Invalid template ref type: \".concat(typeof ref));\n          }\n      }\n  }\n  function setSetupRef(_a, key, val) {\n      var _setupState = _a._setupState;\n      if (_setupState && hasOwn(_setupState, key)) {\n          if (isRef(_setupState[key])) {\n              _setupState[key].value = val;\n          }\n          else {\n              _setupState[key] = val;\n          }\n      }\n  }\n\n  /**\n   * Virtual DOM patching algorithm based on Snabbdom by\n   * Simon Friis Vindum (@paldepind)\n   * Licensed under the MIT License\n   * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n   *\n   * modified by Evan You (@yyx990803)\n   *\n   * Not type-checking this because this file is perf-critical and the cost\n   * of making flow understand it is not worth it.\n   */\n  var emptyNode = new VNode('', {}, []);\n  var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n  function sameVnode(a, b) {\n      return (a.key === b.key &&\n          a.asyncFactory === b.asyncFactory &&\n          ((a.tag === b.tag &&\n              a.isComment === b.isComment &&\n              isDef(a.data) === isDef(b.data) &&\n              sameInputType(a, b)) ||\n              (isTrue(a.isAsyncPlaceholder) && isUndef(b.asyncFactory.error))));\n  }\n  function sameInputType(a, b) {\n      if (a.tag !== 'input')\n          return true;\n      var i;\n      var typeA = isDef((i = a.data)) && isDef((i = i.attrs)) && i.type;\n      var typeB = isDef((i = b.data)) && isDef((i = i.attrs)) && i.type;\n      return typeA === typeB || (isTextInputType(typeA) && isTextInputType(typeB));\n  }\n  function createKeyToOldIdx(children, beginIdx, endIdx) {\n      var i, key;\n      var map = {};\n      for (i = beginIdx; i <= endIdx; ++i) {\n          key = children[i].key;\n          if (isDef(key))\n              map[key] = i;\n      }\n      return map;\n  }\n  function createPatchFunction(backend) {\n      var i, j;\n      var cbs = {};\n      var modules = backend.modules, nodeOps = backend.nodeOps;\n      for (i = 0; i < hooks.length; ++i) {\n          cbs[hooks[i]] = [];\n          for (j = 0; j < modules.length; ++j) {\n              if (isDef(modules[j][hooks[i]])) {\n                  cbs[hooks[i]].push(modules[j][hooks[i]]);\n              }\n          }\n      }\n      function emptyNodeAt(elm) {\n          return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);\n      }\n      function createRmCb(childElm, listeners) {\n          function remove() {\n              if (--remove.listeners === 0) {\n                  removeNode(childElm);\n              }\n          }\n          remove.listeners = listeners;\n          return remove;\n      }\n      function removeNode(el) {\n          var parent = nodeOps.parentNode(el);\n          // element may have already been removed due to v-html / v-text\n          if (isDef(parent)) {\n              nodeOps.removeChild(parent, el);\n          }\n      }\n      function isUnknownElement(vnode, inVPre) {\n          return (!inVPre &&\n              !vnode.ns &&\n              !(config.ignoredElements.length &&\n                  config.ignoredElements.some(function (ignore) {\n                      return isRegExp(ignore)\n                          ? ignore.test(vnode.tag)\n                          : ignore === vnode.tag;\n                  })) &&\n              config.isUnknownElement(vnode.tag));\n      }\n      var creatingElmInVPre = 0;\n      function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {\n          if (isDef(vnode.elm) && isDef(ownerArray)) {\n              // This vnode was used in a previous render!\n              // now it's used as a new node, overwriting its elm would cause\n              // potential patch errors down the road when it's used as an insertion\n              // reference node. Instead, we clone the node on-demand before creating\n              // associated DOM element for it.\n              vnode = ownerArray[index] = cloneVNode(vnode);\n          }\n          vnode.isRootInsert = !nested; // for transition enter check\n          if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n              return;\n          }\n          var data = vnode.data;\n          var children = vnode.children;\n          var tag = vnode.tag;\n          if (isDef(tag)) {\n              {\n                  if (data && data.pre) {\n                      creatingElmInVPre++;\n                  }\n                  if (isUnknownElement(vnode, creatingElmInVPre)) {\n                      warn$2('Unknown custom element: <' +\n                          tag +\n                          '> - did you ' +\n                          'register the component correctly? For recursive components, ' +\n                          'make sure to provide the \"name\" option.', vnode.context);\n                  }\n              }\n              vnode.elm = vnode.ns\n                  ? nodeOps.createElementNS(vnode.ns, tag)\n                  : nodeOps.createElement(tag, vnode);\n              setScope(vnode);\n              createChildren(vnode, children, insertedVnodeQueue);\n              if (isDef(data)) {\n                  invokeCreateHooks(vnode, insertedVnodeQueue);\n              }\n              insert(parentElm, vnode.elm, refElm);\n              if (data && data.pre) {\n                  creatingElmInVPre--;\n              }\n          }\n          else if (isTrue(vnode.isComment)) {\n              vnode.elm = nodeOps.createComment(vnode.text);\n              insert(parentElm, vnode.elm, refElm);\n          }\n          else {\n              vnode.elm = nodeOps.createTextNode(vnode.text);\n              insert(parentElm, vnode.elm, refElm);\n          }\n      }\n      function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\n          var i = vnode.data;\n          if (isDef(i)) {\n              var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n              if (isDef((i = i.hook)) && isDef((i = i.init))) {\n                  i(vnode, false /* hydrating */);\n              }\n              // after calling the init hook, if the vnode is a child component\n              // it should've created a child instance and mounted it. the child\n              // component also has set the placeholder vnode's elm.\n              // in that case we can just return the element and be done.\n              if (isDef(vnode.componentInstance)) {\n                  initComponent(vnode, insertedVnodeQueue);\n                  insert(parentElm, vnode.elm, refElm);\n                  if (isTrue(isReactivated)) {\n                      reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n                  }\n                  return true;\n              }\n          }\n      }\n      function initComponent(vnode, insertedVnodeQueue) {\n          if (isDef(vnode.data.pendingInsert)) {\n              insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n              vnode.data.pendingInsert = null;\n          }\n          vnode.elm = vnode.componentInstance.$el;\n          if (isPatchable(vnode)) {\n              invokeCreateHooks(vnode, insertedVnodeQueue);\n              setScope(vnode);\n          }\n          else {\n              // empty component root.\n              // skip all element-related modules except for ref (#3455)\n              registerRef(vnode);\n              // make sure to invoke the insert hook\n              insertedVnodeQueue.push(vnode);\n          }\n      }\n      function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\n          var i;\n          // hack for #4339: a reactivated component with inner transition\n          // does not trigger because the inner node's created hooks are not called\n          // again. It's not ideal to involve module-specific logic in here but\n          // there doesn't seem to be a better way to do it.\n          var innerNode = vnode;\n          while (innerNode.componentInstance) {\n              innerNode = innerNode.componentInstance._vnode;\n              if (isDef((i = innerNode.data)) && isDef((i = i.transition))) {\n                  for (i = 0; i < cbs.activate.length; ++i) {\n                      cbs.activate[i](emptyNode, innerNode);\n                  }\n                  insertedVnodeQueue.push(innerNode);\n                  break;\n              }\n          }\n          // unlike a newly created component,\n          // a reactivated keep-alive component doesn't insert itself\n          insert(parentElm, vnode.elm, refElm);\n      }\n      function insert(parent, elm, ref) {\n          if (isDef(parent)) {\n              if (isDef(ref)) {\n                  if (nodeOps.parentNode(ref) === parent) {\n                      nodeOps.insertBefore(parent, elm, ref);\n                  }\n              }\n              else {\n                  nodeOps.appendChild(parent, elm);\n              }\n          }\n      }\n      function createChildren(vnode, children, insertedVnodeQueue) {\n          if (isArray(children)) {\n              {\n                  checkDuplicateKeys(children);\n              }\n              for (var i_1 = 0; i_1 < children.length; ++i_1) {\n                  createElm(children[i_1], insertedVnodeQueue, vnode.elm, null, true, children, i_1);\n              }\n          }\n          else if (isPrimitive(vnode.text)) {\n              nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n          }\n      }\n      function isPatchable(vnode) {\n          while (vnode.componentInstance) {\n              vnode = vnode.componentInstance._vnode;\n          }\n          return isDef(vnode.tag);\n      }\n      function invokeCreateHooks(vnode, insertedVnodeQueue) {\n          for (var i_2 = 0; i_2 < cbs.create.length; ++i_2) {\n              cbs.create[i_2](emptyNode, vnode);\n          }\n          i = vnode.data.hook; // Reuse variable\n          if (isDef(i)) {\n              if (isDef(i.create))\n                  i.create(emptyNode, vnode);\n              if (isDef(i.insert))\n                  insertedVnodeQueue.push(vnode);\n          }\n      }\n      // set scope id attribute for scoped CSS.\n      // this is implemented as a special case to avoid the overhead\n      // of going through the normal attribute patching process.\n      function setScope(vnode) {\n          var i;\n          if (isDef((i = vnode.fnScopeId))) {\n              nodeOps.setStyleScope(vnode.elm, i);\n          }\n          else {\n              var ancestor = vnode;\n              while (ancestor) {\n                  if (isDef((i = ancestor.context)) && isDef((i = i.$options._scopeId))) {\n                      nodeOps.setStyleScope(vnode.elm, i);\n                  }\n                  ancestor = ancestor.parent;\n              }\n          }\n          // for slot content they should also get the scopeId from the host instance.\n          if (isDef((i = activeInstance)) &&\n              i !== vnode.context &&\n              i !== vnode.fnContext &&\n              isDef((i = i.$options._scopeId))) {\n              nodeOps.setStyleScope(vnode.elm, i);\n          }\n      }\n      function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n          for (; startIdx <= endIdx; ++startIdx) {\n              createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n          }\n      }\n      function invokeDestroyHook(vnode) {\n          var i, j;\n          var data = vnode.data;\n          if (isDef(data)) {\n              if (isDef((i = data.hook)) && isDef((i = i.destroy)))\n                  i(vnode);\n              for (i = 0; i < cbs.destroy.length; ++i)\n                  cbs.destroy[i](vnode);\n          }\n          if (isDef((i = vnode.children))) {\n              for (j = 0; j < vnode.children.length; ++j) {\n                  invokeDestroyHook(vnode.children[j]);\n              }\n          }\n      }\n      function removeVnodes(vnodes, startIdx, endIdx) {\n          for (; startIdx <= endIdx; ++startIdx) {\n              var ch = vnodes[startIdx];\n              if (isDef(ch)) {\n                  if (isDef(ch.tag)) {\n                      removeAndInvokeRemoveHook(ch);\n                      invokeDestroyHook(ch);\n                  }\n                  else {\n                      // Text node\n                      removeNode(ch.elm);\n                  }\n              }\n          }\n      }\n      function removeAndInvokeRemoveHook(vnode, rm) {\n          if (isDef(rm) || isDef(vnode.data)) {\n              var i_3;\n              var listeners = cbs.remove.length + 1;\n              if (isDef(rm)) {\n                  // we have a recursively passed down rm callback\n                  // increase the listeners count\n                  rm.listeners += listeners;\n              }\n              else {\n                  // directly removing\n                  rm = createRmCb(vnode.elm, listeners);\n              }\n              // recursively invoke hooks on child component root node\n              if (isDef((i_3 = vnode.componentInstance)) &&\n                  isDef((i_3 = i_3._vnode)) &&\n                  isDef(i_3.data)) {\n                  removeAndInvokeRemoveHook(i_3, rm);\n              }\n              for (i_3 = 0; i_3 < cbs.remove.length; ++i_3) {\n                  cbs.remove[i_3](vnode, rm);\n              }\n              if (isDef((i_3 = vnode.data.hook)) && isDef((i_3 = i_3.remove))) {\n                  i_3(vnode, rm);\n              }\n              else {\n                  rm();\n              }\n          }\n          else {\n              removeNode(vnode.elm);\n          }\n      }\n      function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n          var oldStartIdx = 0;\n          var newStartIdx = 0;\n          var oldEndIdx = oldCh.length - 1;\n          var oldStartVnode = oldCh[0];\n          var oldEndVnode = oldCh[oldEndIdx];\n          var newEndIdx = newCh.length - 1;\n          var newStartVnode = newCh[0];\n          var newEndVnode = newCh[newEndIdx];\n          var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n          // removeOnly is a special flag used only by <transition-group>\n          // to ensure removed elements stay in correct relative positions\n          // during leaving transitions\n          var canMove = !removeOnly;\n          {\n              checkDuplicateKeys(newCh);\n          }\n          while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n              if (isUndef(oldStartVnode)) {\n                  oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n              }\n              else if (isUndef(oldEndVnode)) {\n                  oldEndVnode = oldCh[--oldEndIdx];\n              }\n              else if (sameVnode(oldStartVnode, newStartVnode)) {\n                  patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n                  oldStartVnode = oldCh[++oldStartIdx];\n                  newStartVnode = newCh[++newStartIdx];\n              }\n              else if (sameVnode(oldEndVnode, newEndVnode)) {\n                  patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n                  oldEndVnode = oldCh[--oldEndIdx];\n                  newEndVnode = newCh[--newEndIdx];\n              }\n              else if (sameVnode(oldStartVnode, newEndVnode)) {\n                  // Vnode moved right\n                  patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n                  canMove &&\n                      nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n                  oldStartVnode = oldCh[++oldStartIdx];\n                  newEndVnode = newCh[--newEndIdx];\n              }\n              else if (sameVnode(oldEndVnode, newStartVnode)) {\n                  // Vnode moved left\n                  patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n                  canMove &&\n                      nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n                  oldEndVnode = oldCh[--oldEndIdx];\n                  newStartVnode = newCh[++newStartIdx];\n              }\n              else {\n                  if (isUndef(oldKeyToIdx))\n                      oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n                  idxInOld = isDef(newStartVnode.key)\n                      ? oldKeyToIdx[newStartVnode.key]\n                      : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n                  if (isUndef(idxInOld)) {\n                      // New element\n                      createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n                  }\n                  else {\n                      vnodeToMove = oldCh[idxInOld];\n                      if (sameVnode(vnodeToMove, newStartVnode)) {\n                          patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n                          oldCh[idxInOld] = undefined;\n                          canMove &&\n                              nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n                      }\n                      else {\n                          // same key but different element. treat as new element\n                          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n                      }\n                  }\n                  newStartVnode = newCh[++newStartIdx];\n              }\n          }\n          if (oldStartIdx > oldEndIdx) {\n              refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n              addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n          }\n          else if (newStartIdx > newEndIdx) {\n              removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n          }\n      }\n      function checkDuplicateKeys(children) {\n          var seenKeys = {};\n          for (var i_4 = 0; i_4 < children.length; i_4++) {\n              var vnode = children[i_4];\n              var key = vnode.key;\n              if (isDef(key)) {\n                  if (seenKeys[key]) {\n                      warn$2(\"Duplicate keys detected: '\".concat(key, \"'. This may cause an update error.\"), vnode.context);\n                  }\n                  else {\n                      seenKeys[key] = true;\n                  }\n              }\n          }\n      }\n      function findIdxInOld(node, oldCh, start, end) {\n          for (var i_5 = start; i_5 < end; i_5++) {\n              var c = oldCh[i_5];\n              if (isDef(c) && sameVnode(node, c))\n                  return i_5;\n          }\n      }\n      function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {\n          if (oldVnode === vnode) {\n              return;\n          }\n          if (isDef(vnode.elm) && isDef(ownerArray)) {\n              // clone reused vnode\n              vnode = ownerArray[index] = cloneVNode(vnode);\n          }\n          var elm = (vnode.elm = oldVnode.elm);\n          if (isTrue(oldVnode.isAsyncPlaceholder)) {\n              if (isDef(vnode.asyncFactory.resolved)) {\n                  hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n              }\n              else {\n                  vnode.isAsyncPlaceholder = true;\n              }\n              return;\n          }\n          // reuse element for static trees.\n          // note we only do this if the vnode is cloned -\n          // if the new node is not cloned it means the render functions have been\n          // reset by the hot-reload-api and we need to do a proper re-render.\n          if (isTrue(vnode.isStatic) &&\n              isTrue(oldVnode.isStatic) &&\n              vnode.key === oldVnode.key &&\n              (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {\n              vnode.componentInstance = oldVnode.componentInstance;\n              return;\n          }\n          var i;\n          var data = vnode.data;\n          if (isDef(data) && isDef((i = data.hook)) && isDef((i = i.prepatch))) {\n              i(oldVnode, vnode);\n          }\n          var oldCh = oldVnode.children;\n          var ch = vnode.children;\n          if (isDef(data) && isPatchable(vnode)) {\n              for (i = 0; i < cbs.update.length; ++i)\n                  cbs.update[i](oldVnode, vnode);\n              if (isDef((i = data.hook)) && isDef((i = i.update)))\n                  i(oldVnode, vnode);\n          }\n          if (isUndef(vnode.text)) {\n              if (isDef(oldCh) && isDef(ch)) {\n                  if (oldCh !== ch)\n                      updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);\n              }\n              else if (isDef(ch)) {\n                  {\n                      checkDuplicateKeys(ch);\n                  }\n                  if (isDef(oldVnode.text))\n                      nodeOps.setTextContent(elm, '');\n                  addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n              }\n              else if (isDef(oldCh)) {\n                  removeVnodes(oldCh, 0, oldCh.length - 1);\n              }\n              else if (isDef(oldVnode.text)) {\n                  nodeOps.setTextContent(elm, '');\n              }\n          }\n          else if (oldVnode.text !== vnode.text) {\n              nodeOps.setTextContent(elm, vnode.text);\n          }\n          if (isDef(data)) {\n              if (isDef((i = data.hook)) && isDef((i = i.postpatch)))\n                  i(oldVnode, vnode);\n          }\n      }\n      function invokeInsertHook(vnode, queue, initial) {\n          // delay insert hooks for component root nodes, invoke them after the\n          // element is really inserted\n          if (isTrue(initial) && isDef(vnode.parent)) {\n              vnode.parent.data.pendingInsert = queue;\n          }\n          else {\n              for (var i_6 = 0; i_6 < queue.length; ++i_6) {\n                  queue[i_6].data.hook.insert(queue[i_6]);\n              }\n          }\n      }\n      var hydrationBailed = false;\n      // list of modules that can skip create hook during hydration because they\n      // are already rendered on the client or has no need for initialization\n      // Note: style is excluded because it relies on initial clone for future\n      // deep updates (#7063).\n      var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n      // Note: this is a browser-only function so we can assume elms are DOM nodes.\n      function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {\n          var i;\n          var tag = vnode.tag, data = vnode.data, children = vnode.children;\n          inVPre = inVPre || (data && data.pre);\n          vnode.elm = elm;\n          if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n              vnode.isAsyncPlaceholder = true;\n              return true;\n          }\n          // assert node match\n          {\n              if (!assertNodeMatch(elm, vnode, inVPre)) {\n                  return false;\n              }\n          }\n          if (isDef(data)) {\n              if (isDef((i = data.hook)) && isDef((i = i.init)))\n                  i(vnode, true /* hydrating */);\n              if (isDef((i = vnode.componentInstance))) {\n                  // child component. it should have hydrated its own tree.\n                  initComponent(vnode, insertedVnodeQueue);\n                  return true;\n              }\n          }\n          if (isDef(tag)) {\n              if (isDef(children)) {\n                  // empty element, allow client to pick up and populate children\n                  if (!elm.hasChildNodes()) {\n                      createChildren(vnode, children, insertedVnodeQueue);\n                  }\n                  else {\n                      // v-html and domProps: innerHTML\n                      if (isDef((i = data)) &&\n                          isDef((i = i.domProps)) &&\n                          isDef((i = i.innerHTML))) {\n                          if (i !== elm.innerHTML) {\n                              /* istanbul ignore if */\n                              if (typeof console !== 'undefined' &&\n                                  !hydrationBailed) {\n                                  hydrationBailed = true;\n                                  console.warn('Parent: ', elm);\n                                  console.warn('server innerHTML: ', i);\n                                  console.warn('client innerHTML: ', elm.innerHTML);\n                              }\n                              return false;\n                          }\n                      }\n                      else {\n                          // iterate and compare children lists\n                          var childrenMatch = true;\n                          var childNode = elm.firstChild;\n                          for (var i_7 = 0; i_7 < children.length; i_7++) {\n                              if (!childNode ||\n                                  !hydrate(childNode, children[i_7], insertedVnodeQueue, inVPre)) {\n                                  childrenMatch = false;\n                                  break;\n                              }\n                              childNode = childNode.nextSibling;\n                          }\n                          // if childNode is not null, it means the actual childNodes list is\n                          // longer than the virtual children list.\n                          if (!childrenMatch || childNode) {\n                              /* istanbul ignore if */\n                              if (typeof console !== 'undefined' &&\n                                  !hydrationBailed) {\n                                  hydrationBailed = true;\n                                  console.warn('Parent: ', elm);\n                                  console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n                              }\n                              return false;\n                          }\n                      }\n                  }\n              }\n              if (isDef(data)) {\n                  var fullInvoke = false;\n                  for (var key in data) {\n                      if (!isRenderedModule(key)) {\n                          fullInvoke = true;\n                          invokeCreateHooks(vnode, insertedVnodeQueue);\n                          break;\n                      }\n                  }\n                  if (!fullInvoke && data['class']) {\n                      // ensure collecting deps for deep class bindings for future updates\n                      traverse(data['class']);\n                  }\n              }\n          }\n          else if (elm.data !== vnode.text) {\n              elm.data = vnode.text;\n          }\n          return true;\n      }\n      function assertNodeMatch(node, vnode, inVPre) {\n          if (isDef(vnode.tag)) {\n              return (vnode.tag.indexOf('vue-component') === 0 ||\n                  (!isUnknownElement(vnode, inVPre) &&\n                      vnode.tag.toLowerCase() ===\n                          (node.tagName && node.tagName.toLowerCase())));\n          }\n          else {\n              return node.nodeType === (vnode.isComment ? 8 : 3);\n          }\n      }\n      return function patch(oldVnode, vnode, hydrating, removeOnly) {\n          if (isUndef(vnode)) {\n              if (isDef(oldVnode))\n                  invokeDestroyHook(oldVnode);\n              return;\n          }\n          var isInitialPatch = false;\n          var insertedVnodeQueue = [];\n          if (isUndef(oldVnode)) {\n              // empty mount (likely as component), create new root element\n              isInitialPatch = true;\n              createElm(vnode, insertedVnodeQueue);\n          }\n          else {\n              var isRealElement = isDef(oldVnode.nodeType);\n              if (!isRealElement && sameVnode(oldVnode, vnode)) {\n                  // patch existing root node\n                  patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\n              }\n              else {\n                  if (isRealElement) {\n                      // mounting to a real element\n                      // check if this is server-rendered content and if we can perform\n                      // a successful hydration.\n                      if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n                          oldVnode.removeAttribute(SSR_ATTR);\n                          hydrating = true;\n                      }\n                      if (isTrue(hydrating)) {\n                          if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n                              invokeInsertHook(vnode, insertedVnodeQueue, true);\n                              return oldVnode;\n                          }\n                          else {\n                              warn$2('The client-side rendered virtual DOM tree is not matching ' +\n                                  'server-rendered content. This is likely caused by incorrect ' +\n                                  'HTML markup, for example nesting block-level elements inside ' +\n                                  '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                                  'full client-side render.');\n                          }\n                      }\n                      // either not server-rendered, or hydration failed.\n                      // create an empty node and replace it\n                      oldVnode = emptyNodeAt(oldVnode);\n                  }\n                  // replacing existing element\n                  var oldElm = oldVnode.elm;\n                  var parentElm = nodeOps.parentNode(oldElm);\n                  // create new node\n                  createElm(vnode, insertedVnodeQueue, \n                  // extremely rare edge case: do not insert if old element is in a\n                  // leaving transition. Only happens when combining transition +\n                  // keep-alive + HOCs. (#4590)\n                  oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm));\n                  // update parent placeholder node element, recursively\n                  if (isDef(vnode.parent)) {\n                      var ancestor = vnode.parent;\n                      var patchable = isPatchable(vnode);\n                      while (ancestor) {\n                          for (var i_8 = 0; i_8 < cbs.destroy.length; ++i_8) {\n                              cbs.destroy[i_8](ancestor);\n                          }\n                          ancestor.elm = vnode.elm;\n                          if (patchable) {\n                              for (var i_9 = 0; i_9 < cbs.create.length; ++i_9) {\n                                  cbs.create[i_9](emptyNode, ancestor);\n                              }\n                              // #6513\n                              // invoke insert hooks that may have been merged by create hooks.\n                              // e.g. for directives that uses the \"inserted\" hook.\n                              var insert_1 = ancestor.data.hook.insert;\n                              if (insert_1.merged) {\n                                  // start at index 1 to avoid re-invoking component mounted hook\n                                  for (var i_10 = 1; i_10 < insert_1.fns.length; i_10++) {\n                                      insert_1.fns[i_10]();\n                                  }\n                              }\n                          }\n                          else {\n                              registerRef(ancestor);\n                          }\n                          ancestor = ancestor.parent;\n                      }\n                  }\n                  // destroy old node\n                  if (isDef(parentElm)) {\n                      removeVnodes([oldVnode], 0, 0);\n                  }\n                  else if (isDef(oldVnode.tag)) {\n                      invokeDestroyHook(oldVnode);\n                  }\n              }\n          }\n          invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n          return vnode.elm;\n      };\n  }\n\n  var directives$1 = {\n      create: updateDirectives,\n      update: updateDirectives,\n      destroy: function unbindDirectives(vnode) {\n          // @ts-expect-error emptyNode is not VNodeWithData\n          updateDirectives(vnode, emptyNode);\n      }\n  };\n  function updateDirectives(oldVnode, vnode) {\n      if (oldVnode.data.directives || vnode.data.directives) {\n          _update(oldVnode, vnode);\n      }\n  }\n  function _update(oldVnode, vnode) {\n      var isCreate = oldVnode === emptyNode;\n      var isDestroy = vnode === emptyNode;\n      var oldDirs = normalizeDirectives(oldVnode.data.directives, oldVnode.context);\n      var newDirs = normalizeDirectives(vnode.data.directives, vnode.context);\n      var dirsWithInsert = [];\n      var dirsWithPostpatch = [];\n      var key, oldDir, dir;\n      for (key in newDirs) {\n          oldDir = oldDirs[key];\n          dir = newDirs[key];\n          if (!oldDir) {\n              // new directive, bind\n              callHook(dir, 'bind', vnode, oldVnode);\n              if (dir.def && dir.def.inserted) {\n                  dirsWithInsert.push(dir);\n              }\n          }\n          else {\n              // existing directive, update\n              dir.oldValue = oldDir.value;\n              dir.oldArg = oldDir.arg;\n              callHook(dir, 'update', vnode, oldVnode);\n              if (dir.def && dir.def.componentUpdated) {\n                  dirsWithPostpatch.push(dir);\n              }\n          }\n      }\n      if (dirsWithInsert.length) {\n          var callInsert = function () {\n              for (var i = 0; i < dirsWithInsert.length; i++) {\n                  callHook(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n              }\n          };\n          if (isCreate) {\n              mergeVNodeHook(vnode, 'insert', callInsert);\n          }\n          else {\n              callInsert();\n          }\n      }\n      if (dirsWithPostpatch.length) {\n          mergeVNodeHook(vnode, 'postpatch', function () {\n              for (var i = 0; i < dirsWithPostpatch.length; i++) {\n                  callHook(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n              }\n          });\n      }\n      if (!isCreate) {\n          for (key in oldDirs) {\n              if (!newDirs[key]) {\n                  // no longer present, unbind\n                  callHook(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n              }\n          }\n      }\n  }\n  var emptyModifiers = Object.create(null);\n  function normalizeDirectives(dirs, vm) {\n      var res = Object.create(null);\n      if (!dirs) {\n          // $flow-disable-line\n          return res;\n      }\n      var i, dir;\n      for (i = 0; i < dirs.length; i++) {\n          dir = dirs[i];\n          if (!dir.modifiers) {\n              // $flow-disable-line\n              dir.modifiers = emptyModifiers;\n          }\n          res[getRawDirName(dir)] = dir;\n          if (vm._setupState && vm._setupState.__sfc) {\n              var setupDef = dir.def || resolveAsset(vm, '_setupState', 'v-' + dir.name);\n              if (typeof setupDef === 'function') {\n                  dir.def = {\n                      bind: setupDef,\n                      update: setupDef,\n                  };\n              }\n              else {\n                  dir.def = setupDef;\n              }\n          }\n          dir.def = dir.def || resolveAsset(vm.$options, 'directives', dir.name, true);\n      }\n      // $flow-disable-line\n      return res;\n  }\n  function getRawDirName(dir) {\n      return (dir.rawName || \"\".concat(dir.name, \".\").concat(Object.keys(dir.modifiers || {}).join('.')));\n  }\n  function callHook(dir, hook, vnode, oldVnode, isDestroy) {\n      var fn = dir.def && dir.def[hook];\n      if (fn) {\n          try {\n              fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n          }\n          catch (e) {\n              handleError(e, vnode.context, \"directive \".concat(dir.name, \" \").concat(hook, \" hook\"));\n          }\n      }\n  }\n\n  var baseModules = [ref, directives$1];\n\n  function updateAttrs(oldVnode, vnode) {\n      var opts = vnode.componentOptions;\n      if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n          return;\n      }\n      if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n          return;\n      }\n      var key, cur, old;\n      var elm = vnode.elm;\n      var oldAttrs = oldVnode.data.attrs || {};\n      var attrs = vnode.data.attrs || {};\n      // clone observed objects, as the user probably wants to mutate it\n      if (isDef(attrs.__ob__) || isTrue(attrs._v_attr_proxy)) {\n          attrs = vnode.data.attrs = extend({}, attrs);\n      }\n      for (key in attrs) {\n          cur = attrs[key];\n          old = oldAttrs[key];\n          if (old !== cur) {\n              setAttr(elm, key, cur, vnode.data.pre);\n          }\n      }\n      // #4391: in IE9, setting type can reset value for input[type=radio]\n      // #6666: IE/Edge forces progress value down to 1 before setting a max\n      /* istanbul ignore if */\n      if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n          setAttr(elm, 'value', attrs.value);\n      }\n      for (key in oldAttrs) {\n          if (isUndef(attrs[key])) {\n              if (isXlink(key)) {\n                  elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n              }\n              else if (!isEnumeratedAttr(key)) {\n                  elm.removeAttribute(key);\n              }\n          }\n      }\n  }\n  function setAttr(el, key, value, isInPre) {\n      if (isInPre || el.tagName.indexOf('-') > -1) {\n          baseSetAttr(el, key, value);\n      }\n      else if (isBooleanAttr(key)) {\n          // set attribute for blank value\n          // e.g. <option disabled>Select one</option>\n          if (isFalsyAttrValue(value)) {\n              el.removeAttribute(key);\n          }\n          else {\n              // technically allowfullscreen is a boolean attribute for <iframe>,\n              // but Flash expects a value of \"true\" when used on <embed> tag\n              value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;\n              el.setAttribute(key, value);\n          }\n      }\n      else if (isEnumeratedAttr(key)) {\n          el.setAttribute(key, convertEnumeratedValue(key, value));\n      }\n      else if (isXlink(key)) {\n          if (isFalsyAttrValue(value)) {\n              el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n          }\n          else {\n              el.setAttributeNS(xlinkNS, key, value);\n          }\n      }\n      else {\n          baseSetAttr(el, key, value);\n      }\n  }\n  function baseSetAttr(el, key, value) {\n      if (isFalsyAttrValue(value)) {\n          el.removeAttribute(key);\n      }\n      else {\n          // #7138: IE10 & 11 fires input event when setting placeholder on\n          // <textarea>... block the first input event and remove the blocker\n          // immediately.\n          /* istanbul ignore if */\n          if (isIE &&\n              !isIE9 &&\n              el.tagName === 'TEXTAREA' &&\n              key === 'placeholder' &&\n              value !== '' &&\n              !el.__ieph) {\n              var blocker_1 = function (e) {\n                  e.stopImmediatePropagation();\n                  el.removeEventListener('input', blocker_1);\n              };\n              el.addEventListener('input', blocker_1);\n              // $flow-disable-line\n              el.__ieph = true; /* IE placeholder patched */\n          }\n          el.setAttribute(key, value);\n      }\n  }\n  var attrs = {\n      create: updateAttrs,\n      update: updateAttrs\n  };\n\n  function updateClass(oldVnode, vnode) {\n      var el = vnode.elm;\n      var data = vnode.data;\n      var oldData = oldVnode.data;\n      if (isUndef(data.staticClass) &&\n          isUndef(data.class) &&\n          (isUndef(oldData) ||\n              (isUndef(oldData.staticClass) && isUndef(oldData.class)))) {\n          return;\n      }\n      var cls = genClassForVnode(vnode);\n      // handle transition classes\n      var transitionClass = el._transitionClasses;\n      if (isDef(transitionClass)) {\n          cls = concat(cls, stringifyClass(transitionClass));\n      }\n      // set the class\n      if (cls !== el._prevClass) {\n          el.setAttribute('class', cls);\n          el._prevClass = cls;\n      }\n  }\n  var klass$1 = {\n      create: updateClass,\n      update: updateClass\n  };\n\n  var validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n  function parseFilters(exp) {\n      var inSingle = false;\n      var inDouble = false;\n      var inTemplateString = false;\n      var inRegex = false;\n      var curly = 0;\n      var square = 0;\n      var paren = 0;\n      var lastFilterIndex = 0;\n      var c, prev, i, expression, filters;\n      for (i = 0; i < exp.length; i++) {\n          prev = c;\n          c = exp.charCodeAt(i);\n          if (inSingle) {\n              if (c === 0x27 && prev !== 0x5c)\n                  inSingle = false;\n          }\n          else if (inDouble) {\n              if (c === 0x22 && prev !== 0x5c)\n                  inDouble = false;\n          }\n          else if (inTemplateString) {\n              if (c === 0x60 && prev !== 0x5c)\n                  inTemplateString = false;\n          }\n          else if (inRegex) {\n              if (c === 0x2f && prev !== 0x5c)\n                  inRegex = false;\n          }\n          else if (c === 0x7c && // pipe\n              exp.charCodeAt(i + 1) !== 0x7c &&\n              exp.charCodeAt(i - 1) !== 0x7c &&\n              !curly &&\n              !square &&\n              !paren) {\n              if (expression === undefined) {\n                  // first filter, end of expression\n                  lastFilterIndex = i + 1;\n                  expression = exp.slice(0, i).trim();\n              }\n              else {\n                  pushFilter();\n              }\n          }\n          else {\n              switch (c) {\n                  case 0x22:\n                      inDouble = true;\n                      break; // \"\n                  case 0x27:\n                      inSingle = true;\n                      break; // '\n                  case 0x60:\n                      inTemplateString = true;\n                      break; // `\n                  case 0x28:\n                      paren++;\n                      break; // (\n                  case 0x29:\n                      paren--;\n                      break; // )\n                  case 0x5b:\n                      square++;\n                      break; // [\n                  case 0x5d:\n                      square--;\n                      break; // ]\n                  case 0x7b:\n                      curly++;\n                      break; // {\n                  case 0x7d:\n                      curly--;\n                      break; // }\n              }\n              if (c === 0x2f) {\n                  // /\n                  var j = i - 1;\n                  var p \n                  // find first non-whitespace prev char\n                  = void 0;\n                  // find first non-whitespace prev char\n                  for (; j >= 0; j--) {\n                      p = exp.charAt(j);\n                      if (p !== ' ')\n                          break;\n                  }\n                  if (!p || !validDivisionCharRE.test(p)) {\n                      inRegex = true;\n                  }\n              }\n          }\n      }\n      if (expression === undefined) {\n          expression = exp.slice(0, i).trim();\n      }\n      else if (lastFilterIndex !== 0) {\n          pushFilter();\n      }\n      function pushFilter() {\n          (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n          lastFilterIndex = i + 1;\n      }\n      if (filters) {\n          for (i = 0; i < filters.length; i++) {\n              expression = wrapFilter(expression, filters[i]);\n          }\n      }\n      return expression;\n  }\n  function wrapFilter(exp, filter) {\n      var i = filter.indexOf('(');\n      if (i < 0) {\n          // _f: resolveFilter\n          return \"_f(\\\"\".concat(filter, \"\\\")(\").concat(exp, \")\");\n      }\n      else {\n          var name_1 = filter.slice(0, i);\n          var args = filter.slice(i + 1);\n          return \"_f(\\\"\".concat(name_1, \"\\\")(\").concat(exp).concat(args !== ')' ? ',' + args : args);\n      }\n  }\n\n  /* eslint-disable no-unused-vars */\n  function baseWarn(msg, range) {\n      console.error(\"[Vue compiler]: \".concat(msg));\n  }\n  /* eslint-enable no-unused-vars */\n  function pluckModuleFunction(modules, key) {\n      return modules ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; }) : [];\n  }\n  function addProp(el, name, value, range, dynamic) {\n      (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n      el.plain = false;\n  }\n  function addAttr(el, name, value, range, dynamic) {\n      var attrs = dynamic\n          ? el.dynamicAttrs || (el.dynamicAttrs = [])\n          : el.attrs || (el.attrs = []);\n      attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n      el.plain = false;\n  }\n  // add a raw attr (use this in preTransforms)\n  function addRawAttr(el, name, value, range) {\n      el.attrsMap[name] = value;\n      el.attrsList.push(rangeSetItem({ name: name, value: value }, range));\n  }\n  function addDirective(el, name, rawName, value, arg, isDynamicArg, modifiers, range) {\n      (el.directives || (el.directives = [])).push(rangeSetItem({\n          name: name,\n          rawName: rawName,\n          value: value,\n          arg: arg,\n          isDynamicArg: isDynamicArg,\n          modifiers: modifiers\n      }, range));\n      el.plain = false;\n  }\n  function prependModifierMarker(symbol, name, dynamic) {\n      return dynamic ? \"_p(\".concat(name, \",\\\"\").concat(symbol, \"\\\")\") : symbol + name; // mark the event as captured\n  }\n  function addHandler(el, name, value, modifiers, important, warn, range, dynamic) {\n      modifiers = modifiers || emptyObject;\n      // warn prevent and passive modifier\n      /* istanbul ignore if */\n      if (warn && modifiers.prevent && modifiers.passive) {\n          warn(\"passive and prevent can't be used together. \" +\n              \"Passive handler can't prevent default event.\", range);\n      }\n      // normalize click.right and click.middle since they don't actually fire\n      // this is technically browser-specific, but at least for now browsers are\n      // the only target envs that have right/middle clicks.\n      if (modifiers.right) {\n          if (dynamic) {\n              name = \"(\".concat(name, \")==='click'?'contextmenu':(\").concat(name, \")\");\n          }\n          else if (name === 'click') {\n              name = 'contextmenu';\n              delete modifiers.right;\n          }\n      }\n      else if (modifiers.middle) {\n          if (dynamic) {\n              name = \"(\".concat(name, \")==='click'?'mouseup':(\").concat(name, \")\");\n          }\n          else if (name === 'click') {\n              name = 'mouseup';\n          }\n      }\n      // check capture modifier\n      if (modifiers.capture) {\n          delete modifiers.capture;\n          name = prependModifierMarker('!', name, dynamic);\n      }\n      if (modifiers.once) {\n          delete modifiers.once;\n          name = prependModifierMarker('~', name, dynamic);\n      }\n      /* istanbul ignore if */\n      if (modifiers.passive) {\n          delete modifiers.passive;\n          name = prependModifierMarker('&', name, dynamic);\n      }\n      var events;\n      if (modifiers.native) {\n          delete modifiers.native;\n          events = el.nativeEvents || (el.nativeEvents = {});\n      }\n      else {\n          events = el.events || (el.events = {});\n      }\n      var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);\n      if (modifiers !== emptyObject) {\n          newHandler.modifiers = modifiers;\n      }\n      var handlers = events[name];\n      /* istanbul ignore if */\n      if (Array.isArray(handlers)) {\n          important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n      }\n      else if (handlers) {\n          events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n      }\n      else {\n          events[name] = newHandler;\n      }\n      el.plain = false;\n  }\n  function getRawBindingAttr(el, name) {\n      return (el.rawAttrsMap[':' + name] ||\n          el.rawAttrsMap['v-bind:' + name] ||\n          el.rawAttrsMap[name]);\n  }\n  function getBindingAttr(el, name, getStatic) {\n      var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);\n      if (dynamicValue != null) {\n          return parseFilters(dynamicValue);\n      }\n      else if (getStatic !== false) {\n          var staticValue = getAndRemoveAttr(el, name);\n          if (staticValue != null) {\n              return JSON.stringify(staticValue);\n          }\n      }\n  }\n  // note: this only removes the attr from the Array (attrsList) so that it\n  // doesn't get processed by processAttrs.\n  // By default it does NOT remove it from the map (attrsMap) because the map is\n  // needed during codegen.\n  function getAndRemoveAttr(el, name, removeFromMap) {\n      var val;\n      if ((val = el.attrsMap[name]) != null) {\n          var list = el.attrsList;\n          for (var i = 0, l = list.length; i < l; i++) {\n              if (list[i].name === name) {\n                  list.splice(i, 1);\n                  break;\n              }\n          }\n      }\n      if (removeFromMap) {\n          delete el.attrsMap[name];\n      }\n      return val;\n  }\n  function getAndRemoveAttrByRegex(el, name) {\n      var list = el.attrsList;\n      for (var i = 0, l = list.length; i < l; i++) {\n          var attr = list[i];\n          if (name.test(attr.name)) {\n              list.splice(i, 1);\n              return attr;\n          }\n      }\n  }\n  function rangeSetItem(item, range) {\n      if (range) {\n          if (range.start != null) {\n              item.start = range.start;\n          }\n          if (range.end != null) {\n              item.end = range.end;\n          }\n      }\n      return item;\n  }\n\n  /**\n   * Cross-platform code generation for component v-model\n   */\n  function genComponentModel(el, value, modifiers) {\n      var _a = modifiers || {}, number = _a.number, trim = _a.trim;\n      var baseValueExpression = '$$v';\n      var valueExpression = baseValueExpression;\n      if (trim) {\n          valueExpression =\n              \"(typeof \".concat(baseValueExpression, \" === 'string'\") +\n                  \"? \".concat(baseValueExpression, \".trim()\") +\n                  \": \".concat(baseValueExpression, \")\");\n      }\n      if (number) {\n          valueExpression = \"_n(\".concat(valueExpression, \")\");\n      }\n      var assignment = genAssignmentCode(value, valueExpression);\n      el.model = {\n          value: \"(\".concat(value, \")\"),\n          expression: JSON.stringify(value),\n          callback: \"function (\".concat(baseValueExpression, \") {\").concat(assignment, \"}\")\n      };\n  }\n  /**\n   * Cross-platform codegen helper for generating v-model value assignment code.\n   */\n  function genAssignmentCode(value, assignment) {\n      var res = parseModel(value);\n      if (res.key === null) {\n          return \"\".concat(value, \"=\").concat(assignment);\n      }\n      else {\n          return \"$set(\".concat(res.exp, \", \").concat(res.key, \", \").concat(assignment, \")\");\n      }\n  }\n  /**\n   * Parse a v-model expression into a base path and a final key segment.\n   * Handles both dot-path and possible square brackets.\n   *\n   * Possible cases:\n   *\n   * - test\n   * - test[key]\n   * - test[test1[key]]\n   * - test[\"a\"][key]\n   * - xxx.test[a[a].test1[key]]\n   * - test.xxx.a[\"asa\"][test1[key]]\n   *\n   */\n  var len, str, chr, index, expressionPos, expressionEndPos;\n  function parseModel(val) {\n      // Fix https://github.com/vuejs/vue/pull/7730\n      // allow v-model=\"obj.val \" (trailing whitespace)\n      val = val.trim();\n      len = val.length;\n      if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n          index = val.lastIndexOf('.');\n          if (index > -1) {\n              return {\n                  exp: val.slice(0, index),\n                  key: '\"' + val.slice(index + 1) + '\"'\n              };\n          }\n          else {\n              return {\n                  exp: val,\n                  key: null\n              };\n          }\n      }\n      str = val;\n      index = expressionPos = expressionEndPos = 0;\n      while (!eof()) {\n          chr = next();\n          /* istanbul ignore if */\n          if (isStringStart(chr)) {\n              parseString(chr);\n          }\n          else if (chr === 0x5b) {\n              parseBracket(chr);\n          }\n      }\n      return {\n          exp: val.slice(0, expressionPos),\n          key: val.slice(expressionPos + 1, expressionEndPos)\n      };\n  }\n  function next() {\n      return str.charCodeAt(++index);\n  }\n  function eof() {\n      return index >= len;\n  }\n  function isStringStart(chr) {\n      return chr === 0x22 || chr === 0x27;\n  }\n  function parseBracket(chr) {\n      var inBracket = 1;\n      expressionPos = index;\n      while (!eof()) {\n          chr = next();\n          if (isStringStart(chr)) {\n              parseString(chr);\n              continue;\n          }\n          if (chr === 0x5b)\n              inBracket++;\n          if (chr === 0x5d)\n              inBracket--;\n          if (inBracket === 0) {\n              expressionEndPos = index;\n              break;\n          }\n      }\n  }\n  function parseString(chr) {\n      var stringQuote = chr;\n      while (!eof()) {\n          chr = next();\n          if (chr === stringQuote) {\n              break;\n          }\n      }\n  }\n\n  var warn$1;\n  // in some cases, the event used has to be determined at runtime\n  // so we used some reserved tokens during compile.\n  var RANGE_TOKEN = '__r';\n  var CHECKBOX_RADIO_TOKEN = '__c';\n  function model$1(el, dir, _warn) {\n      warn$1 = _warn;\n      var value = dir.value;\n      var modifiers = dir.modifiers;\n      var tag = el.tag;\n      var type = el.attrsMap.type;\n      {\n          // inputs with type=\"file\" are read only and setting the input's\n          // value will throw an error.\n          if (tag === 'input' && type === 'file') {\n              warn$1(\"<\".concat(el.tag, \" v-model=\\\"\").concat(value, \"\\\" type=\\\"file\\\">:\\n\") +\n                  \"File inputs are read only. Use a v-on:change listener instead.\", el.rawAttrsMap['v-model']);\n          }\n      }\n      if (el.component) {\n          genComponentModel(el, value, modifiers);\n          // component v-model doesn't need extra runtime\n          return false;\n      }\n      else if (tag === 'select') {\n          genSelect(el, value, modifiers);\n      }\n      else if (tag === 'input' && type === 'checkbox') {\n          genCheckboxModel(el, value, modifiers);\n      }\n      else if (tag === 'input' && type === 'radio') {\n          genRadioModel(el, value, modifiers);\n      }\n      else if (tag === 'input' || tag === 'textarea') {\n          genDefaultModel(el, value, modifiers);\n      }\n      else if (!config.isReservedTag(tag)) {\n          genComponentModel(el, value, modifiers);\n          // component v-model doesn't need extra runtime\n          return false;\n      }\n      else {\n          warn$1(\"<\".concat(el.tag, \" v-model=\\\"\").concat(value, \"\\\">: \") +\n              \"v-model is not supported on this element type. \" +\n              \"If you are working with contenteditable, it's recommended to \" +\n              'wrap a library dedicated for that purpose inside a custom component.', el.rawAttrsMap['v-model']);\n      }\n      // ensure runtime directive metadata\n      return true;\n  }\n  function genCheckboxModel(el, value, modifiers) {\n      var number = modifiers && modifiers.number;\n      var valueBinding = getBindingAttr(el, 'value') || 'null';\n      var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n      var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n      addProp(el, 'checked', \"Array.isArray(\".concat(value, \")\") +\n          \"?_i(\".concat(value, \",\").concat(valueBinding, \")>-1\") +\n          (trueValueBinding === 'true'\n              ? \":(\".concat(value, \")\")\n              : \":_q(\".concat(value, \",\").concat(trueValueBinding, \")\")));\n      addHandler(el, 'change', \"var $$a=\".concat(value, \",\") +\n          '$$el=$event.target,' +\n          \"$$c=$$el.checked?(\".concat(trueValueBinding, \"):(\").concat(falseValueBinding, \");\") +\n          'if(Array.isArray($$a)){' +\n          \"var $$v=\".concat(number ? '_n(' + valueBinding + ')' : valueBinding, \",\") +\n          '$$i=_i($$a,$$v);' +\n          \"if($$el.checked){$$i<0&&(\".concat(genAssignmentCode(value, '$$a.concat([$$v])'), \")}\") +\n          \"else{$$i>-1&&(\".concat(genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))'), \")}\") +\n          \"}else{\".concat(genAssignmentCode(value, '$$c'), \"}\"), null, true);\n  }\n  function genRadioModel(el, value, modifiers) {\n      var number = modifiers && modifiers.number;\n      var valueBinding = getBindingAttr(el, 'value') || 'null';\n      valueBinding = number ? \"_n(\".concat(valueBinding, \")\") : valueBinding;\n      addProp(el, 'checked', \"_q(\".concat(value, \",\").concat(valueBinding, \")\"));\n      addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n  }\n  function genSelect(el, value, modifiers) {\n      var number = modifiers && modifiers.number;\n      var selectedVal = \"Array.prototype.filter\" +\n          \".call($event.target.options,function(o){return o.selected})\" +\n          \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n          \"return \".concat(number ? '_n(val)' : 'val', \"})\");\n      var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n      var code = \"var $$selectedVal = \".concat(selectedVal, \";\");\n      code = \"\".concat(code, \" \").concat(genAssignmentCode(value, assignment));\n      addHandler(el, 'change', code, null, true);\n  }\n  function genDefaultModel(el, value, modifiers) {\n      var type = el.attrsMap.type;\n      // warn if v-bind:value conflicts with v-model\n      // except for inputs with v-bind:type\n      {\n          var value_1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n          var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n          if (value_1 && !typeBinding) {\n              var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n              warn$1(\"\".concat(binding, \"=\\\"\").concat(value_1, \"\\\" conflicts with v-model on the same element \") +\n                  'because the latter already expands to a value binding internally', el.rawAttrsMap[binding]);\n          }\n      }\n      var _a = modifiers || {}, lazy = _a.lazy, number = _a.number, trim = _a.trim;\n      var needCompositionGuard = !lazy && type !== 'range';\n      var event = lazy ? 'change' : type === 'range' ? RANGE_TOKEN : 'input';\n      var valueExpression = '$event.target.value';\n      if (trim) {\n          valueExpression = \"$event.target.value.trim()\";\n      }\n      if (number) {\n          valueExpression = \"_n(\".concat(valueExpression, \")\");\n      }\n      var code = genAssignmentCode(value, valueExpression);\n      if (needCompositionGuard) {\n          code = \"if($event.target.composing)return;\".concat(code);\n      }\n      addProp(el, 'value', \"(\".concat(value, \")\"));\n      addHandler(el, event, code, null, true);\n      if (trim || number) {\n          addHandler(el, 'blur', '$forceUpdate()');\n      }\n  }\n\n  // normalize v-model event tokens that can only be determined at runtime.\n  // it's important to place the event as the first in the array because\n  // the whole point is ensuring the v-model callback gets called before\n  // user-attached handlers.\n  function normalizeEvents(on) {\n      /* istanbul ignore if */\n      if (isDef(on[RANGE_TOKEN])) {\n          // IE input[type=range] only supports `change` event\n          var event_1 = isIE ? 'change' : 'input';\n          on[event_1] = [].concat(on[RANGE_TOKEN], on[event_1] || []);\n          delete on[RANGE_TOKEN];\n      }\n      // This was originally intended to fix #4521 but no longer necessary\n      // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n      /* istanbul ignore if */\n      if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n          on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n          delete on[CHECKBOX_RADIO_TOKEN];\n      }\n  }\n  var target;\n  function createOnceHandler(event, handler, capture) {\n      var _target = target; // save current target element in closure\n      return function onceHandler() {\n          var res = handler.apply(null, arguments);\n          if (res !== null) {\n              remove(event, onceHandler, capture, _target);\n          }\n      };\n  }\n  // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp\n  // implementation and does not fire microtasks in between event propagation, so\n  // safe to exclude.\n  var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);\n  function add(name, handler, capture, passive) {\n      // async edge case #6566: inner click event triggers patch, event handler\n      // attached to outer element during patch, and triggered again. This\n      // happens because browsers fire microtask ticks between event propagation.\n      // the solution is simple: we save the timestamp when a handler is attached,\n      // and the handler would only fire if the event passed to it was fired\n      // AFTER it was attached.\n      if (useMicrotaskFix) {\n          var attachedTimestamp_1 = currentFlushTimestamp;\n          var original_1 = handler;\n          //@ts-expect-error\n          handler = original_1._wrapper = function (e) {\n              if (\n              // no bubbling, should always fire.\n              // this is just a safety net in case event.timeStamp is unreliable in\n              // certain weird environments...\n              e.target === e.currentTarget ||\n                  // event is fired after handler attachment\n                  e.timeStamp >= attachedTimestamp_1 ||\n                  // bail for environments that have buggy event.timeStamp implementations\n                  // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState\n                  // #9681 QtWebEngine event.timeStamp is negative value\n                  e.timeStamp <= 0 ||\n                  // #9448 bail if event is fired in another document in a multi-page\n                  // electron/nw.js app, since event.timeStamp will be using a different\n                  // starting reference\n                  e.target.ownerDocument !== document) {\n                  return original_1.apply(this, arguments);\n              }\n          };\n      }\n      target.addEventListener(name, handler, supportsPassive ? { capture: capture, passive: passive } : capture);\n  }\n  function remove(name, handler, capture, _target) {\n      (_target || target).removeEventListener(name, \n      //@ts-expect-error\n      handler._wrapper || handler, capture);\n  }\n  function updateDOMListeners(oldVnode, vnode) {\n      if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n          return;\n      }\n      var on = vnode.data.on || {};\n      var oldOn = oldVnode.data.on || {};\n      // vnode is empty when removing all listeners,\n      // and use old vnode dom element\n      target = vnode.elm || oldVnode.elm;\n      normalizeEvents(on);\n      updateListeners(on, oldOn, add, remove, createOnceHandler, vnode.context);\n      target = undefined;\n  }\n  var events = {\n      create: updateDOMListeners,\n      update: updateDOMListeners,\n      // @ts-expect-error emptyNode has actually data\n      destroy: function (vnode) { return updateDOMListeners(vnode, emptyNode); }\n  };\n\n  var svgContainer;\n  function updateDOMProps(oldVnode, vnode) {\n      if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n          return;\n      }\n      var key, cur;\n      var elm = vnode.elm;\n      var oldProps = oldVnode.data.domProps || {};\n      var props = vnode.data.domProps || {};\n      // clone observed objects, as the user probably wants to mutate it\n      if (isDef(props.__ob__) || isTrue(props._v_attr_proxy)) {\n          props = vnode.data.domProps = extend({}, props);\n      }\n      for (key in oldProps) {\n          if (!(key in props)) {\n              elm[key] = '';\n          }\n      }\n      for (key in props) {\n          cur = props[key];\n          // ignore children if the node has textContent or innerHTML,\n          // as these will throw away existing DOM nodes and cause removal errors\n          // on subsequent patches (#3360)\n          if (key === 'textContent' || key === 'innerHTML') {\n              if (vnode.children)\n                  vnode.children.length = 0;\n              if (cur === oldProps[key])\n                  continue;\n              // #6601 work around Chrome version <= 55 bug where single textNode\n              // replaced by innerHTML/textContent retains its parentNode property\n              if (elm.childNodes.length === 1) {\n                  elm.removeChild(elm.childNodes[0]);\n              }\n          }\n          if (key === 'value' && elm.tagName !== 'PROGRESS') {\n              // store value as _value as well since\n              // non-string values will be stringified\n              elm._value = cur;\n              // avoid resetting cursor position when value is the same\n              var strCur = isUndef(cur) ? '' : String(cur);\n              if (shouldUpdateValue(elm, strCur)) {\n                  elm.value = strCur;\n              }\n          }\n          else if (key === 'innerHTML' &&\n              isSVG(elm.tagName) &&\n              isUndef(elm.innerHTML)) {\n              // IE doesn't support innerHTML for SVG elements\n              svgContainer = svgContainer || document.createElement('div');\n              svgContainer.innerHTML = \"<svg>\".concat(cur, \"</svg>\");\n              var svg = svgContainer.firstChild;\n              while (elm.firstChild) {\n                  elm.removeChild(elm.firstChild);\n              }\n              while (svg.firstChild) {\n                  elm.appendChild(svg.firstChild);\n              }\n          }\n          else if (\n          // skip the update if old and new VDOM state is the same.\n          // `value` is handled separately because the DOM value may be temporarily\n          // out of sync with VDOM state due to focus, composition and modifiers.\n          // This  #4521 by skipping the unnecessary `checked` update.\n          cur !== oldProps[key]) {\n              // some property updates can throw\n              // e.g. `value` on <progress> w/ non-finite value\n              try {\n                  elm[key] = cur;\n              }\n              catch (e) { }\n          }\n      }\n  }\n  function shouldUpdateValue(elm, checkVal) {\n      return (\n      //@ts-expect-error\n      !elm.composing &&\n          (elm.tagName === 'OPTION' ||\n              isNotInFocusAndDirty(elm, checkVal) ||\n              isDirtyWithModifiers(elm, checkVal)));\n  }\n  function isNotInFocusAndDirty(elm, checkVal) {\n      // return true when textbox (.number and .trim) loses focus and its value is\n      // not equal to the updated value\n      var notInFocus = true;\n      // #6157\n      // work around IE bug when accessing document.activeElement in an iframe\n      try {\n          notInFocus = document.activeElement !== elm;\n      }\n      catch (e) { }\n      return notInFocus && elm.value !== checkVal;\n  }\n  function isDirtyWithModifiers(elm, newVal) {\n      var value = elm.value;\n      var modifiers = elm._vModifiers; // injected by v-model runtime\n      if (isDef(modifiers)) {\n          if (modifiers.number) {\n              return toNumber(value) !== toNumber(newVal);\n          }\n          if (modifiers.trim) {\n              return value.trim() !== newVal.trim();\n          }\n      }\n      return value !== newVal;\n  }\n  var domProps = {\n      create: updateDOMProps,\n      update: updateDOMProps\n  };\n\n  var parseStyleText = cached(function (cssText) {\n      var res = {};\n      var listDelimiter = /;(?![^(]*\\))/g;\n      var propertyDelimiter = /:(.+)/;\n      cssText.split(listDelimiter).forEach(function (item) {\n          if (item) {\n              var tmp = item.split(propertyDelimiter);\n              tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n          }\n      });\n      return res;\n  });\n  // merge static and dynamic style data on the same vnode\n  function normalizeStyleData(data) {\n      var style = normalizeStyleBinding(data.style);\n      // static style is pre-processed into an object during compilation\n      // and is always a fresh object, so it's safe to merge into it\n      return data.staticStyle ? extend(data.staticStyle, style) : style;\n  }\n  // normalize possible array / string values into Object\n  function normalizeStyleBinding(bindingStyle) {\n      if (Array.isArray(bindingStyle)) {\n          return toObject(bindingStyle);\n      }\n      if (typeof bindingStyle === 'string') {\n          return parseStyleText(bindingStyle);\n      }\n      return bindingStyle;\n  }\n  /**\n   * parent component style should be after child's\n   * so that parent component's style could override it\n   */\n  function getStyle(vnode, checkChild) {\n      var res = {};\n      var styleData;\n      if (checkChild) {\n          var childNode = vnode;\n          while (childNode.componentInstance) {\n              childNode = childNode.componentInstance._vnode;\n              if (childNode &&\n                  childNode.data &&\n                  (styleData = normalizeStyleData(childNode.data))) {\n                  extend(res, styleData);\n              }\n          }\n      }\n      if ((styleData = normalizeStyleData(vnode.data))) {\n          extend(res, styleData);\n      }\n      var parentNode = vnode;\n      // @ts-expect-error parentNode.parent not VNodeWithData\n      while ((parentNode = parentNode.parent)) {\n          if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n              extend(res, styleData);\n          }\n      }\n      return res;\n  }\n\n  var cssVarRE = /^--/;\n  var importantRE = /\\s*!important$/;\n  var setProp = function (el, name, val) {\n      /* istanbul ignore if */\n      if (cssVarRE.test(name)) {\n          el.style.setProperty(name, val);\n      }\n      else if (importantRE.test(val)) {\n          el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');\n      }\n      else {\n          var normalizedName = normalize(name);\n          if (Array.isArray(val)) {\n              // Support values array created by autoprefixer, e.g.\n              // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n              // Set them one by one, and the browser will only set those it can recognize\n              for (var i = 0, len = val.length; i < len; i++) {\n                  el.style[normalizedName] = val[i];\n              }\n          }\n          else {\n              el.style[normalizedName] = val;\n          }\n      }\n  };\n  var vendorNames = ['Webkit', 'Moz', 'ms'];\n  var emptyStyle;\n  var normalize = cached(function (prop) {\n      emptyStyle = emptyStyle || document.createElement('div').style;\n      prop = camelize(prop);\n      if (prop !== 'filter' && prop in emptyStyle) {\n          return prop;\n      }\n      var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n      for (var i = 0; i < vendorNames.length; i++) {\n          var name_1 = vendorNames[i] + capName;\n          if (name_1 in emptyStyle) {\n              return name_1;\n          }\n      }\n  });\n  function updateStyle(oldVnode, vnode) {\n      var data = vnode.data;\n      var oldData = oldVnode.data;\n      if (isUndef(data.staticStyle) &&\n          isUndef(data.style) &&\n          isUndef(oldData.staticStyle) &&\n          isUndef(oldData.style)) {\n          return;\n      }\n      var cur, name;\n      var el = vnode.elm;\n      var oldStaticStyle = oldData.staticStyle;\n      var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n      // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n      var oldStyle = oldStaticStyle || oldStyleBinding;\n      var style = normalizeStyleBinding(vnode.data.style) || {};\n      // store normalized style under a different key for next diff\n      // make sure to clone it if it's reactive, since the user likely wants\n      // to mutate it.\n      vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;\n      var newStyle = getStyle(vnode, true);\n      for (name in oldStyle) {\n          if (isUndef(newStyle[name])) {\n              setProp(el, name, '');\n          }\n      }\n      for (name in newStyle) {\n          cur = newStyle[name];\n          if (cur !== oldStyle[name]) {\n              // ie9 setting to null has no effect, must use empty string\n              setProp(el, name, cur == null ? '' : cur);\n          }\n      }\n  }\n  var style$1 = {\n      create: updateStyle,\n      update: updateStyle\n  };\n\n  var whitespaceRE$1 = /\\s+/;\n  /**\n   * Add class with compatibility for SVG since classList is not supported on\n   * SVG elements in IE\n   */\n  function addClass(el, cls) {\n      /* istanbul ignore if */\n      if (!cls || !(cls = cls.trim())) {\n          return;\n      }\n      /* istanbul ignore else */\n      if (el.classList) {\n          if (cls.indexOf(' ') > -1) {\n              cls.split(whitespaceRE$1).forEach(function (c) { return el.classList.add(c); });\n          }\n          else {\n              el.classList.add(cls);\n          }\n      }\n      else {\n          var cur = \" \".concat(el.getAttribute('class') || '', \" \");\n          if (cur.indexOf(' ' + cls + ' ') < 0) {\n              el.setAttribute('class', (cur + cls).trim());\n          }\n      }\n  }\n  /**\n   * Remove class with compatibility for SVG since classList is not supported on\n   * SVG elements in IE\n   */\n  function removeClass(el, cls) {\n      /* istanbul ignore if */\n      if (!cls || !(cls = cls.trim())) {\n          return;\n      }\n      /* istanbul ignore else */\n      if (el.classList) {\n          if (cls.indexOf(' ') > -1) {\n              cls.split(whitespaceRE$1).forEach(function (c) { return el.classList.remove(c); });\n          }\n          else {\n              el.classList.remove(cls);\n          }\n          if (!el.classList.length) {\n              el.removeAttribute('class');\n          }\n      }\n      else {\n          var cur = \" \".concat(el.getAttribute('class') || '', \" \");\n          var tar = ' ' + cls + ' ';\n          while (cur.indexOf(tar) >= 0) {\n              cur = cur.replace(tar, ' ');\n          }\n          cur = cur.trim();\n          if (cur) {\n              el.setAttribute('class', cur);\n          }\n          else {\n              el.removeAttribute('class');\n          }\n      }\n  }\n\n  function resolveTransition(def) {\n      if (!def) {\n          return;\n      }\n      /* istanbul ignore else */\n      if (typeof def === 'object') {\n          var res = {};\n          if (def.css !== false) {\n              extend(res, autoCssTransition(def.name || 'v'));\n          }\n          extend(res, def);\n          return res;\n      }\n      else if (typeof def === 'string') {\n          return autoCssTransition(def);\n      }\n  }\n  var autoCssTransition = cached(function (name) {\n      return {\n          enterClass: \"\".concat(name, \"-enter\"),\n          enterToClass: \"\".concat(name, \"-enter-to\"),\n          enterActiveClass: \"\".concat(name, \"-enter-active\"),\n          leaveClass: \"\".concat(name, \"-leave\"),\n          leaveToClass: \"\".concat(name, \"-leave-to\"),\n          leaveActiveClass: \"\".concat(name, \"-leave-active\")\n      };\n  });\n  var hasTransition = inBrowser && !isIE9;\n  var TRANSITION = 'transition';\n  var ANIMATION = 'animation';\n  // Transition property/event sniffing\n  var transitionProp = 'transition';\n  var transitionEndEvent = 'transitionend';\n  var animationProp = 'animation';\n  var animationEndEvent = 'animationend';\n  if (hasTransition) {\n      /* istanbul ignore if */\n      if (window.ontransitionend === undefined &&\n          window.onwebkittransitionend !== undefined) {\n          transitionProp = 'WebkitTransition';\n          transitionEndEvent = 'webkitTransitionEnd';\n      }\n      if (window.onanimationend === undefined &&\n          window.onwebkitanimationend !== undefined) {\n          animationProp = 'WebkitAnimation';\n          animationEndEvent = 'webkitAnimationEnd';\n      }\n  }\n  // binding to window is necessary to make hot reload work in IE in strict mode\n  var raf = inBrowser\n      ? window.requestAnimationFrame\n          ? window.requestAnimationFrame.bind(window)\n          : setTimeout\n      : /* istanbul ignore next */ function (/* istanbul ignore next */ fn) { return fn(); };\n  function nextFrame(fn) {\n      raf(function () {\n          // @ts-expect-error\n          raf(fn);\n      });\n  }\n  function addTransitionClass(el, cls) {\n      var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n      if (transitionClasses.indexOf(cls) < 0) {\n          transitionClasses.push(cls);\n          addClass(el, cls);\n      }\n  }\n  function removeTransitionClass(el, cls) {\n      if (el._transitionClasses) {\n          remove$2(el._transitionClasses, cls);\n      }\n      removeClass(el, cls);\n  }\n  function whenTransitionEnds(el, expectedType, cb) {\n      var _a = getTransitionInfo(el, expectedType), type = _a.type, timeout = _a.timeout, propCount = _a.propCount;\n      if (!type)\n          return cb();\n      var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n      var ended = 0;\n      var end = function () {\n          el.removeEventListener(event, onEnd);\n          cb();\n      };\n      var onEnd = function (e) {\n          if (e.target === el) {\n              if (++ended >= propCount) {\n                  end();\n              }\n          }\n      };\n      setTimeout(function () {\n          if (ended < propCount) {\n              end();\n          }\n      }, timeout + 1);\n      el.addEventListener(event, onEnd);\n  }\n  var transformRE = /\\b(transform|all)(,|$)/;\n  function getTransitionInfo(el, expectedType) {\n      var styles = window.getComputedStyle(el);\n      // JSDOM may return undefined for transition properties\n      var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');\n      var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');\n      var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n      var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');\n      var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');\n      var animationTimeout = getTimeout(animationDelays, animationDurations);\n      var type;\n      var timeout = 0;\n      var propCount = 0;\n      /* istanbul ignore if */\n      if (expectedType === TRANSITION) {\n          if (transitionTimeout > 0) {\n              type = TRANSITION;\n              timeout = transitionTimeout;\n              propCount = transitionDurations.length;\n          }\n      }\n      else if (expectedType === ANIMATION) {\n          if (animationTimeout > 0) {\n              type = ANIMATION;\n              timeout = animationTimeout;\n              propCount = animationDurations.length;\n          }\n      }\n      else {\n          timeout = Math.max(transitionTimeout, animationTimeout);\n          type =\n              timeout > 0\n                  ? transitionTimeout > animationTimeout\n                      ? TRANSITION\n                      : ANIMATION\n                  : null;\n          propCount = type\n              ? type === TRANSITION\n                  ? transitionDurations.length\n                  : animationDurations.length\n              : 0;\n      }\n      var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);\n      return {\n          type: type,\n          timeout: timeout,\n          propCount: propCount,\n          hasTransform: hasTransform\n      };\n  }\n  function getTimeout(delays, durations) {\n      /* istanbul ignore next */\n      while (delays.length < durations.length) {\n          delays = delays.concat(delays);\n      }\n      return Math.max.apply(null, durations.map(function (d, i) {\n          return toMs(d) + toMs(delays[i]);\n      }));\n  }\n  // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers\n  // in a locale-dependent way, using a comma instead of a dot.\n  // If comma is not replaced with a dot, the input will be rounded down (i.e. acting\n  // as a floor function) causing unexpected behaviors\n  function toMs(s) {\n      return Number(s.slice(0, -1).replace(',', '.')) * 1000;\n  }\n\n  function enter(vnode, toggleDisplay) {\n      var el = vnode.elm;\n      // call leave callback now\n      if (isDef(el._leaveCb)) {\n          el._leaveCb.cancelled = true;\n          el._leaveCb();\n      }\n      var data = resolveTransition(vnode.data.transition);\n      if (isUndef(data)) {\n          return;\n      }\n      /* istanbul ignore if */\n      if (isDef(el._enterCb) || el.nodeType !== 1) {\n          return;\n      }\n      var css = data.css, type = data.type, enterClass = data.enterClass, enterToClass = data.enterToClass, enterActiveClass = data.enterActiveClass, appearClass = data.appearClass, appearToClass = data.appearToClass, appearActiveClass = data.appearActiveClass, beforeEnter = data.beforeEnter, enter = data.enter, afterEnter = data.afterEnter, enterCancelled = data.enterCancelled, beforeAppear = data.beforeAppear, appear = data.appear, afterAppear = data.afterAppear, appearCancelled = data.appearCancelled, duration = data.duration;\n      // activeInstance will always be the <transition> component managing this\n      // transition. One edge case to check is when the <transition> is placed\n      // as the root node of a child component. In that case we need to check\n      // <transition>'s parent for appear check.\n      var context = activeInstance;\n      var transitionNode = activeInstance.$vnode;\n      while (transitionNode && transitionNode.parent) {\n          context = transitionNode.context;\n          transitionNode = transitionNode.parent;\n      }\n      var isAppear = !context._isMounted || !vnode.isRootInsert;\n      if (isAppear && !appear && appear !== '') {\n          return;\n      }\n      var startClass = isAppear && appearClass ? appearClass : enterClass;\n      var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;\n      var toClass = isAppear && appearToClass ? appearToClass : enterToClass;\n      var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;\n      var enterHook = isAppear ? (isFunction(appear) ? appear : enter) : enter;\n      var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;\n      var enterCancelledHook = isAppear\n          ? appearCancelled || enterCancelled\n          : enterCancelled;\n      var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);\n      if (explicitEnterDuration != null) {\n          checkDuration(explicitEnterDuration, 'enter', vnode);\n      }\n      var expectsCSS = css !== false && !isIE9;\n      var userWantsControl = getHookArgumentsLength(enterHook);\n      var cb = (el._enterCb = once(function () {\n          if (expectsCSS) {\n              removeTransitionClass(el, toClass);\n              removeTransitionClass(el, activeClass);\n          }\n          // @ts-expect-error\n          if (cb.cancelled) {\n              if (expectsCSS) {\n                  removeTransitionClass(el, startClass);\n              }\n              enterCancelledHook && enterCancelledHook(el);\n          }\n          else {\n              afterEnterHook && afterEnterHook(el);\n          }\n          el._enterCb = null;\n      }));\n      if (!vnode.data.show) {\n          // remove pending leave element on enter by injecting an insert hook\n          mergeVNodeHook(vnode, 'insert', function () {\n              var parent = el.parentNode;\n              var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n              if (pendingNode &&\n                  pendingNode.tag === vnode.tag &&\n                  pendingNode.elm._leaveCb) {\n                  pendingNode.elm._leaveCb();\n              }\n              enterHook && enterHook(el, cb);\n          });\n      }\n      // start enter transition\n      beforeEnterHook && beforeEnterHook(el);\n      if (expectsCSS) {\n          addTransitionClass(el, startClass);\n          addTransitionClass(el, activeClass);\n          nextFrame(function () {\n              removeTransitionClass(el, startClass);\n              // @ts-expect-error\n              if (!cb.cancelled) {\n                  addTransitionClass(el, toClass);\n                  if (!userWantsControl) {\n                      if (isValidDuration(explicitEnterDuration)) {\n                          setTimeout(cb, explicitEnterDuration);\n                      }\n                      else {\n                          whenTransitionEnds(el, type, cb);\n                      }\n                  }\n              }\n          });\n      }\n      if (vnode.data.show) {\n          toggleDisplay && toggleDisplay();\n          enterHook && enterHook(el, cb);\n      }\n      if (!expectsCSS && !userWantsControl) {\n          cb();\n      }\n  }\n  function leave(vnode, rm) {\n      var el = vnode.elm;\n      // call enter callback now\n      if (isDef(el._enterCb)) {\n          el._enterCb.cancelled = true;\n          el._enterCb();\n      }\n      var data = resolveTransition(vnode.data.transition);\n      if (isUndef(data) || el.nodeType !== 1) {\n          return rm();\n      }\n      /* istanbul ignore if */\n      if (isDef(el._leaveCb)) {\n          return;\n      }\n      var css = data.css, type = data.type, leaveClass = data.leaveClass, leaveToClass = data.leaveToClass, leaveActiveClass = data.leaveActiveClass, beforeLeave = data.beforeLeave, leave = data.leave, afterLeave = data.afterLeave, leaveCancelled = data.leaveCancelled, delayLeave = data.delayLeave, duration = data.duration;\n      var expectsCSS = css !== false && !isIE9;\n      var userWantsControl = getHookArgumentsLength(leave);\n      var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);\n      if (isDef(explicitLeaveDuration)) {\n          checkDuration(explicitLeaveDuration, 'leave', vnode);\n      }\n      var cb = (el._leaveCb = once(function () {\n          if (el.parentNode && el.parentNode._pending) {\n              el.parentNode._pending[vnode.key] = null;\n          }\n          if (expectsCSS) {\n              removeTransitionClass(el, leaveToClass);\n              removeTransitionClass(el, leaveActiveClass);\n          }\n          // @ts-expect-error\n          if (cb.cancelled) {\n              if (expectsCSS) {\n                  removeTransitionClass(el, leaveClass);\n              }\n              leaveCancelled && leaveCancelled(el);\n          }\n          else {\n              rm();\n              afterLeave && afterLeave(el);\n          }\n          el._leaveCb = null;\n      }));\n      if (delayLeave) {\n          delayLeave(performLeave);\n      }\n      else {\n          performLeave();\n      }\n      function performLeave() {\n          // the delayed leave may have already been cancelled\n          // @ts-expect-error\n          if (cb.cancelled) {\n              return;\n          }\n          // record leaving element\n          if (!vnode.data.show && el.parentNode) {\n              (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] =\n                  vnode;\n          }\n          beforeLeave && beforeLeave(el);\n          if (expectsCSS) {\n              addTransitionClass(el, leaveClass);\n              addTransitionClass(el, leaveActiveClass);\n              nextFrame(function () {\n                  removeTransitionClass(el, leaveClass);\n                  // @ts-expect-error\n                  if (!cb.cancelled) {\n                      addTransitionClass(el, leaveToClass);\n                      if (!userWantsControl) {\n                          if (isValidDuration(explicitLeaveDuration)) {\n                              setTimeout(cb, explicitLeaveDuration);\n                          }\n                          else {\n                              whenTransitionEnds(el, type, cb);\n                          }\n                      }\n                  }\n              });\n          }\n          leave && leave(el, cb);\n          if (!expectsCSS && !userWantsControl) {\n              cb();\n          }\n      }\n  }\n  // only used in dev mode\n  function checkDuration(val, name, vnode) {\n      if (typeof val !== 'number') {\n          warn$2(\"<transition> explicit \".concat(name, \" duration is not a valid number - \") +\n              \"got \".concat(JSON.stringify(val), \".\"), vnode.context);\n      }\n      else if (isNaN(val)) {\n          warn$2(\"<transition> explicit \".concat(name, \" duration is NaN - \") +\n              'the duration expression might be incorrect.', vnode.context);\n      }\n  }\n  function isValidDuration(val) {\n      return typeof val === 'number' && !isNaN(val);\n  }\n  /**\n   * Normalize a transition hook's argument length. The hook may be:\n   * - a merged hook (invoker) with the original in .fns\n   * - a wrapped component method (check ._length)\n   * - a plain function (.length)\n   */\n  function getHookArgumentsLength(fn) {\n      if (isUndef(fn)) {\n          return false;\n      }\n      // @ts-expect-error\n      var invokerFns = fn.fns;\n      if (isDef(invokerFns)) {\n          // invoker\n          return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);\n      }\n      else {\n          // @ts-expect-error\n          return (fn._length || fn.length) > 1;\n      }\n  }\n  function _enter(_, vnode) {\n      if (vnode.data.show !== true) {\n          enter(vnode);\n      }\n  }\n  var transition = inBrowser\n      ? {\n          create: _enter,\n          activate: _enter,\n          remove: function (vnode, rm) {\n              /* istanbul ignore else */\n              if (vnode.data.show !== true) {\n                  // @ts-expect-error\n                  leave(vnode, rm);\n              }\n              else {\n                  rm();\n              }\n          }\n      }\n      : {};\n\n  var platformModules = [attrs, klass$1, events, domProps, style$1, transition];\n\n  // the directive module should be applied last, after all\n  // built-in modules have been applied.\n  var modules$1 = platformModules.concat(baseModules);\n  var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules$1 });\n\n  /**\n   * Not type checking this file because flow doesn't like attaching\n   * properties to Elements.\n   */\n  /* istanbul ignore if */\n  if (isIE9) {\n      // http://www.matts411.com/post/internet-explorer-9-oninput/\n      document.addEventListener('selectionchange', function () {\n          var el = document.activeElement;\n          // @ts-expect-error\n          if (el && el.vmodel) {\n              trigger(el, 'input');\n          }\n      });\n  }\n  var directive = {\n      inserted: function (el, binding, vnode, oldVnode) {\n          if (vnode.tag === 'select') {\n              // #6903\n              if (oldVnode.elm && !oldVnode.elm._vOptions) {\n                  mergeVNodeHook(vnode, 'postpatch', function () {\n                      directive.componentUpdated(el, binding, vnode);\n                  });\n              }\n              else {\n                  setSelected(el, binding, vnode.context);\n              }\n              el._vOptions = [].map.call(el.options, getValue);\n          }\n          else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n              el._vModifiers = binding.modifiers;\n              if (!binding.modifiers.lazy) {\n                  el.addEventListener('compositionstart', onCompositionStart);\n                  el.addEventListener('compositionend', onCompositionEnd);\n                  // Safari < 10.2 & UIWebView doesn't fire compositionend when\n                  // switching focus before confirming composition choice\n                  // this also fixes the issue where some browsers e.g. iOS Chrome\n                  // fires \"change\" instead of \"input\" on autocomplete.\n                  el.addEventListener('change', onCompositionEnd);\n                  /* istanbul ignore if */\n                  if (isIE9) {\n                      el.vmodel = true;\n                  }\n              }\n          }\n      },\n      componentUpdated: function (el, binding, vnode) {\n          if (vnode.tag === 'select') {\n              setSelected(el, binding, vnode.context);\n              // in case the options rendered by v-for have changed,\n              // it's possible that the value is out-of-sync with the rendered options.\n              // detect such cases and filter out values that no longer has a matching\n              // option in the DOM.\n              var prevOptions_1 = el._vOptions;\n              var curOptions_1 = (el._vOptions = [].map.call(el.options, getValue));\n              if (curOptions_1.some(function (o, i) { return !looseEqual(o, prevOptions_1[i]); })) {\n                  // trigger change event if\n                  // no matching option found for at least one value\n                  var needReset = el.multiple\n                      ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions_1); })\n                      : binding.value !== binding.oldValue &&\n                          hasNoMatchingOption(binding.value, curOptions_1);\n                  if (needReset) {\n                      trigger(el, 'change');\n                  }\n              }\n          }\n      }\n  };\n  function setSelected(el, binding, vm) {\n      actuallySetSelected(el, binding, vm);\n      /* istanbul ignore if */\n      if (isIE || isEdge) {\n          setTimeout(function () {\n              actuallySetSelected(el, binding, vm);\n          }, 0);\n      }\n  }\n  function actuallySetSelected(el, binding, vm) {\n      var value = binding.value;\n      var isMultiple = el.multiple;\n      if (isMultiple && !Array.isArray(value)) {\n          warn$2(\"<select multiple v-model=\\\"\".concat(binding.expression, \"\\\"> \") +\n                  \"expects an Array value for its binding, but got \".concat(Object.prototype.toString\n                      .call(value)\n                      .slice(8, -1)), vm);\n          return;\n      }\n      var selected, option;\n      for (var i = 0, l = el.options.length; i < l; i++) {\n          option = el.options[i];\n          if (isMultiple) {\n              selected = looseIndexOf(value, getValue(option)) > -1;\n              if (option.selected !== selected) {\n                  option.selected = selected;\n              }\n          }\n          else {\n              if (looseEqual(getValue(option), value)) {\n                  if (el.selectedIndex !== i) {\n                      el.selectedIndex = i;\n                  }\n                  return;\n              }\n          }\n      }\n      if (!isMultiple) {\n          el.selectedIndex = -1;\n      }\n  }\n  function hasNoMatchingOption(value, options) {\n      return options.every(function (o) { return !looseEqual(o, value); });\n  }\n  function getValue(option) {\n      return '_value' in option ? option._value : option.value;\n  }\n  function onCompositionStart(e) {\n      e.target.composing = true;\n  }\n  function onCompositionEnd(e) {\n      // prevent triggering an input event for no reason\n      if (!e.target.composing)\n          return;\n      e.target.composing = false;\n      trigger(e.target, 'input');\n  }\n  function trigger(el, type) {\n      var e = document.createEvent('HTMLEvents');\n      e.initEvent(type, true, true);\n      el.dispatchEvent(e);\n  }\n\n  // recursively search for possible transition defined inside the component root\n  function locateNode(vnode) {\n      // @ts-expect-error\n      return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n          ? locateNode(vnode.componentInstance._vnode)\n          : vnode;\n  }\n  var show = {\n      bind: function (el, _a, vnode) {\n          var value = _a.value;\n          vnode = locateNode(vnode);\n          var transition = vnode.data && vnode.data.transition;\n          var originalDisplay = (el.__vOriginalDisplay =\n              el.style.display === 'none' ? '' : el.style.display);\n          if (value && transition) {\n              vnode.data.show = true;\n              enter(vnode, function () {\n                  el.style.display = originalDisplay;\n              });\n          }\n          else {\n              el.style.display = value ? originalDisplay : 'none';\n          }\n      },\n      update: function (el, _a, vnode) {\n          var value = _a.value, oldValue = _a.oldValue;\n          /* istanbul ignore if */\n          if (!value === !oldValue)\n              return;\n          vnode = locateNode(vnode);\n          var transition = vnode.data && vnode.data.transition;\n          if (transition) {\n              vnode.data.show = true;\n              if (value) {\n                  enter(vnode, function () {\n                      el.style.display = el.__vOriginalDisplay;\n                  });\n              }\n              else {\n                  leave(vnode, function () {\n                      el.style.display = 'none';\n                  });\n              }\n          }\n          else {\n              el.style.display = value ? el.__vOriginalDisplay : 'none';\n          }\n      },\n      unbind: function (el, binding, vnode, oldVnode, isDestroy) {\n          if (!isDestroy) {\n              el.style.display = el.__vOriginalDisplay;\n          }\n      }\n  };\n\n  var platformDirectives = {\n      model: directive,\n      show: show\n  };\n\n  // Provides transition support for a single element/component.\n  var transitionProps = {\n      name: String,\n      appear: Boolean,\n      css: Boolean,\n      mode: String,\n      type: String,\n      enterClass: String,\n      leaveClass: String,\n      enterToClass: String,\n      leaveToClass: String,\n      enterActiveClass: String,\n      leaveActiveClass: String,\n      appearClass: String,\n      appearActiveClass: String,\n      appearToClass: String,\n      duration: [Number, String, Object]\n  };\n  // in case the child is also an abstract component, e.g. <keep-alive>\n  // we want to recursively retrieve the real component to be rendered\n  function getRealChild(vnode) {\n      var compOptions = vnode && vnode.componentOptions;\n      if (compOptions && compOptions.Ctor.options.abstract) {\n          return getRealChild(getFirstComponentChild(compOptions.children));\n      }\n      else {\n          return vnode;\n      }\n  }\n  function extractTransitionData(comp) {\n      var data = {};\n      var options = comp.$options;\n      // props\n      for (var key in options.propsData) {\n          data[key] = comp[key];\n      }\n      // events.\n      // extract listeners and pass them directly to the transition methods\n      var listeners = options._parentListeners;\n      for (var key in listeners) {\n          data[camelize(key)] = listeners[key];\n      }\n      return data;\n  }\n  function placeholder(h, rawChild) {\n      // @ts-expect-error\n      if (/\\d-keep-alive$/.test(rawChild.tag)) {\n          return h('keep-alive', {\n              props: rawChild.componentOptions.propsData\n          });\n      }\n  }\n  function hasParentTransition(vnode) {\n      while ((vnode = vnode.parent)) {\n          if (vnode.data.transition) {\n              return true;\n          }\n      }\n  }\n  function isSameChild(child, oldChild) {\n      return oldChild.key === child.key && oldChild.tag === child.tag;\n  }\n  var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };\n  var isVShowDirective = function (d) { return d.name === 'show'; };\n  var Transition = {\n      name: 'transition',\n      props: transitionProps,\n      abstract: true,\n      render: function (h) {\n          var _this = this;\n          var children = this.$slots.default;\n          if (!children) {\n              return;\n          }\n          // filter out text nodes (possible whitespaces)\n          children = children.filter(isNotTextNode);\n          /* istanbul ignore if */\n          if (!children.length) {\n              return;\n          }\n          // warn multiple elements\n          if (children.length > 1) {\n              warn$2('<transition> can only be used on a single element. Use ' +\n                  '<transition-group> for lists.', this.$parent);\n          }\n          var mode = this.mode;\n          // warn invalid mode\n          if (mode && mode !== 'in-out' && mode !== 'out-in') {\n              warn$2('invalid <transition> mode: ' + mode, this.$parent);\n          }\n          var rawChild = children[0];\n          // if this is a component root node and the component's\n          // parent container node also has transition, skip.\n          if (hasParentTransition(this.$vnode)) {\n              return rawChild;\n          }\n          // apply transition data to child\n          // use getRealChild() to ignore abstract components e.g. keep-alive\n          var child = getRealChild(rawChild);\n          /* istanbul ignore if */\n          if (!child) {\n              return rawChild;\n          }\n          if (this._leaving) {\n              return placeholder(h, rawChild);\n          }\n          // ensure a key that is unique to the vnode type and to this transition\n          // component instance. This key will be used to remove pending leaving nodes\n          // during entering.\n          var id = \"__transition-\".concat(this._uid, \"-\");\n          child.key =\n              child.key == null\n                  ? child.isComment\n                      ? id + 'comment'\n                      : id + child.tag\n                  : isPrimitive(child.key)\n                      ? String(child.key).indexOf(id) === 0\n                          ? child.key\n                          : id + child.key\n                      : child.key;\n          var data = ((child.data || (child.data = {})).transition =\n              extractTransitionData(this));\n          var oldRawChild = this._vnode;\n          var oldChild = getRealChild(oldRawChild);\n          // mark v-show\n          // so that the transition module can hand over the control to the directive\n          if (child.data.directives && child.data.directives.some(isVShowDirective)) {\n              child.data.show = true;\n          }\n          if (oldChild &&\n              oldChild.data &&\n              !isSameChild(child, oldChild) &&\n              !isAsyncPlaceholder(oldChild) &&\n              // #6687 component root is a comment node\n              !(oldChild.componentInstance &&\n                  oldChild.componentInstance._vnode.isComment)) {\n              // replace old child transition data with fresh one\n              // important for dynamic transitions!\n              var oldData = (oldChild.data.transition = extend({}, data));\n              // handle transition mode\n              if (mode === 'out-in') {\n                  // return placeholder node and queue update when leave finishes\n                  this._leaving = true;\n                  mergeVNodeHook(oldData, 'afterLeave', function () {\n                      _this._leaving = false;\n                      _this.$forceUpdate();\n                  });\n                  return placeholder(h, rawChild);\n              }\n              else if (mode === 'in-out') {\n                  if (isAsyncPlaceholder(child)) {\n                      return oldRawChild;\n                  }\n                  var delayedLeave_1;\n                  var performLeave = function () {\n                      delayedLeave_1();\n                  };\n                  mergeVNodeHook(data, 'afterEnter', performLeave);\n                  mergeVNodeHook(data, 'enterCancelled', performLeave);\n                  mergeVNodeHook(oldData, 'delayLeave', function (leave) {\n                      delayedLeave_1 = leave;\n                  });\n              }\n          }\n          return rawChild;\n      }\n  };\n\n  // Provides transition support for list items.\n  var props = extend({\n      tag: String,\n      moveClass: String\n  }, transitionProps);\n  delete props.mode;\n  var TransitionGroup = {\n      props: props,\n      beforeMount: function () {\n          var _this = this;\n          var update = this._update;\n          this._update = function (vnode, hydrating) {\n              var restoreActiveInstance = setActiveInstance(_this);\n              // force removing pass\n              _this.__patch__(_this._vnode, _this.kept, false, // hydrating\n              true // removeOnly (!important, avoids unnecessary moves)\n              );\n              _this._vnode = _this.kept;\n              restoreActiveInstance();\n              update.call(_this, vnode, hydrating);\n          };\n      },\n      render: function (h) {\n          var tag = this.tag || this.$vnode.data.tag || 'span';\n          var map = Object.create(null);\n          var prevChildren = (this.prevChildren = this.children);\n          var rawChildren = this.$slots.default || [];\n          var children = (this.children = []);\n          var transitionData = extractTransitionData(this);\n          for (var i = 0; i < rawChildren.length; i++) {\n              var c = rawChildren[i];\n              if (c.tag) {\n                  if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n                      children.push(c);\n                      map[c.key] = c;\n                      (c.data || (c.data = {})).transition = transitionData;\n                  }\n                  else {\n                      var opts = c.componentOptions;\n                      var name_1 = opts\n                          ? getComponentName(opts.Ctor.options) || opts.tag || ''\n                          : c.tag;\n                      warn$2(\"<transition-group> children must be keyed: <\".concat(name_1, \">\"));\n                  }\n              }\n          }\n          if (prevChildren) {\n              var kept = [];\n              var removed = [];\n              for (var i = 0; i < prevChildren.length; i++) {\n                  var c = prevChildren[i];\n                  c.data.transition = transitionData;\n                  // @ts-expect-error .getBoundingClientRect is not typed in Node\n                  c.data.pos = c.elm.getBoundingClientRect();\n                  if (map[c.key]) {\n                      kept.push(c);\n                  }\n                  else {\n                      removed.push(c);\n                  }\n              }\n              this.kept = h(tag, null, kept);\n              this.removed = removed;\n          }\n          return h(tag, null, children);\n      },\n      updated: function () {\n          var children = this.prevChildren;\n          var moveClass = this.moveClass || (this.name || 'v') + '-move';\n          if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n              return;\n          }\n          // we divide the work into three loops to avoid mixing DOM reads and writes\n          // in each iteration - which helps prevent layout thrashing.\n          children.forEach(callPendingCbs);\n          children.forEach(recordPosition);\n          children.forEach(applyTranslation);\n          // force reflow to put everything in position\n          // assign to this to avoid being removed in tree-shaking\n          // $flow-disable-line\n          this._reflow = document.body.offsetHeight;\n          children.forEach(function (c) {\n              if (c.data.moved) {\n                  var el_1 = c.elm;\n                  var s = el_1.style;\n                  addTransitionClass(el_1, moveClass);\n                  s.transform = s.WebkitTransform = s.transitionDuration = '';\n                  el_1.addEventListener(transitionEndEvent, (el_1._moveCb = function cb(e) {\n                      if (e && e.target !== el_1) {\n                          return;\n                      }\n                      if (!e || /transform$/.test(e.propertyName)) {\n                          el_1.removeEventListener(transitionEndEvent, cb);\n                          el_1._moveCb = null;\n                          removeTransitionClass(el_1, moveClass);\n                      }\n                  }));\n              }\n          });\n      },\n      methods: {\n          hasMove: function (el, moveClass) {\n              /* istanbul ignore if */\n              if (!hasTransition) {\n                  return false;\n              }\n              /* istanbul ignore if */\n              if (this._hasMove) {\n                  return this._hasMove;\n              }\n              // Detect whether an element with the move class applied has\n              // CSS transitions. Since the element may be inside an entering\n              // transition at this very moment, we make a clone of it and remove\n              // all other transition classes applied to ensure only the move class\n              // is applied.\n              var clone = el.cloneNode();\n              if (el._transitionClasses) {\n                  el._transitionClasses.forEach(function (cls) {\n                      removeClass(clone, cls);\n                  });\n              }\n              addClass(clone, moveClass);\n              clone.style.display = 'none';\n              this.$el.appendChild(clone);\n              var info = getTransitionInfo(clone);\n              this.$el.removeChild(clone);\n              return (this._hasMove = info.hasTransform);\n          }\n      }\n  };\n  function callPendingCbs(c) {\n      /* istanbul ignore if */\n      if (c.elm._moveCb) {\n          c.elm._moveCb();\n      }\n      /* istanbul ignore if */\n      if (c.elm._enterCb) {\n          c.elm._enterCb();\n      }\n  }\n  function recordPosition(c) {\n      c.data.newPos = c.elm.getBoundingClientRect();\n  }\n  function applyTranslation(c) {\n      var oldPos = c.data.pos;\n      var newPos = c.data.newPos;\n      var dx = oldPos.left - newPos.left;\n      var dy = oldPos.top - newPos.top;\n      if (dx || dy) {\n          c.data.moved = true;\n          var s = c.elm.style;\n          s.transform = s.WebkitTransform = \"translate(\".concat(dx, \"px,\").concat(dy, \"px)\");\n          s.transitionDuration = '0s';\n      }\n  }\n\n  var platformComponents = {\n      Transition: Transition,\n      TransitionGroup: TransitionGroup\n  };\n\n  // install platform specific utils\n  Vue.config.mustUseProp = mustUseProp;\n  Vue.config.isReservedTag = isReservedTag;\n  Vue.config.isReservedAttr = isReservedAttr;\n  Vue.config.getTagNamespace = getTagNamespace;\n  Vue.config.isUnknownElement = isUnknownElement;\n  // install platform runtime directives & components\n  extend(Vue.options.directives, platformDirectives);\n  extend(Vue.options.components, platformComponents);\n  // install platform patch function\n  Vue.prototype.__patch__ = inBrowser ? patch : noop;\n  // public mount method\n  Vue.prototype.$mount = function (el, hydrating) {\n      el = el && inBrowser ? query(el) : undefined;\n      return mountComponent(this, el, hydrating);\n  };\n  // devtools global hook\n  /* istanbul ignore next */\n  if (inBrowser) {\n      setTimeout(function () {\n          if (config.devtools) {\n              if (devtools) {\n                  devtools.emit('init', Vue);\n              }\n              else {\n                  // @ts-expect-error\n                  console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\\n' +\n                      'https://github.com/vuejs/vue-devtools');\n              }\n          }\n          if (config.productionTip !== false &&\n              typeof console !== 'undefined') {\n              // @ts-expect-error\n              console[console.info ? 'info' : 'log'](\"You are running Vue in development mode.\\n\" +\n                  \"Make sure to turn on production mode when deploying for production.\\n\" +\n                  \"See more tips at https://vuejs.org/guide/deployment.html\");\n          }\n      }, 0);\n  }\n\n  var defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\n  var regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n  var buildRegex = cached(function (delimiters) {\n      var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n      var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n      return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g');\n  });\n  function parseText(text, delimiters) {\n      //@ts-expect-error\n      var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n      if (!tagRE.test(text)) {\n          return;\n      }\n      var tokens = [];\n      var rawTokens = [];\n      var lastIndex = (tagRE.lastIndex = 0);\n      var match, index, tokenValue;\n      while ((match = tagRE.exec(text))) {\n          index = match.index;\n          // push text token\n          if (index > lastIndex) {\n              rawTokens.push((tokenValue = text.slice(lastIndex, index)));\n              tokens.push(JSON.stringify(tokenValue));\n          }\n          // tag token\n          var exp = parseFilters(match[1].trim());\n          tokens.push(\"_s(\".concat(exp, \")\"));\n          rawTokens.push({ '@binding': exp });\n          lastIndex = index + match[0].length;\n      }\n      if (lastIndex < text.length) {\n          rawTokens.push((tokenValue = text.slice(lastIndex)));\n          tokens.push(JSON.stringify(tokenValue));\n      }\n      return {\n          expression: tokens.join('+'),\n          tokens: rawTokens\n      };\n  }\n\n  function transformNode$1(el, options) {\n      var warn = options.warn || baseWarn;\n      var staticClass = getAndRemoveAttr(el, 'class');\n      if (staticClass) {\n          var res = parseText(staticClass, options.delimiters);\n          if (res) {\n              warn(\"class=\\\"\".concat(staticClass, \"\\\": \") +\n                  'Interpolation inside attributes has been removed. ' +\n                  'Use v-bind or the colon shorthand instead. For example, ' +\n                  'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.', el.rawAttrsMap['class']);\n          }\n      }\n      if (staticClass) {\n          el.staticClass = JSON.stringify(staticClass.replace(/\\s+/g, ' ').trim());\n      }\n      var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n      if (classBinding) {\n          el.classBinding = classBinding;\n      }\n  }\n  function genData$2(el) {\n      var data = '';\n      if (el.staticClass) {\n          data += \"staticClass:\".concat(el.staticClass, \",\");\n      }\n      if (el.classBinding) {\n          data += \"class:\".concat(el.classBinding, \",\");\n      }\n      return data;\n  }\n  var klass = {\n      staticKeys: ['staticClass'],\n      transformNode: transformNode$1,\n      genData: genData$2\n  };\n\n  function transformNode(el, options) {\n      var warn = options.warn || baseWarn;\n      var staticStyle = getAndRemoveAttr(el, 'style');\n      if (staticStyle) {\n          /* istanbul ignore if */\n          {\n              var res = parseText(staticStyle, options.delimiters);\n              if (res) {\n                  warn(\"style=\\\"\".concat(staticStyle, \"\\\": \") +\n                      'Interpolation inside attributes has been removed. ' +\n                      'Use v-bind or the colon shorthand instead. For example, ' +\n                      'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.', el.rawAttrsMap['style']);\n              }\n          }\n          el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n      }\n      var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n      if (styleBinding) {\n          el.styleBinding = styleBinding;\n      }\n  }\n  function genData$1(el) {\n      var data = '';\n      if (el.staticStyle) {\n          data += \"staticStyle:\".concat(el.staticStyle, \",\");\n      }\n      if (el.styleBinding) {\n          data += \"style:(\".concat(el.styleBinding, \"),\");\n      }\n      return data;\n  }\n  var style = {\n      staticKeys: ['staticStyle'],\n      transformNode: transformNode,\n      genData: genData$1\n  };\n\n  var decoder;\n  var he = {\n      decode: function (html) {\n          decoder = decoder || document.createElement('div');\n          decoder.innerHTML = html;\n          return decoder.textContent;\n      }\n  };\n\n  var isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n      'link,meta,param,source,track,wbr');\n  // Elements that you can, intentionally, leave open\n  // (and which close themselves)\n  var canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source');\n  // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n  // Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\n  var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n      'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n      'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n      'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n      'title,tr,track');\n\n  /**\n   * Not type-checking this file because it's mostly vendor code.\n   */\n  // Regular Expressions for parsing tags and attributes\n  var attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n  var dynamicArgAttribute = /^\\s*((?:v-[\\w-]+:|@|:|#)\\[[^=]+?\\][^\\s\"'<>\\/=]*)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n  var ncname = \"[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z\".concat(unicodeRegExp.source, \"]*\");\n  var qnameCapture = \"((?:\".concat(ncname, \"\\\\:)?\").concat(ncname, \")\");\n  var startTagOpen = new RegExp(\"^<\".concat(qnameCapture));\n  var startTagClose = /^\\s*(\\/?)>/;\n  var endTag = new RegExp(\"^<\\\\/\".concat(qnameCapture, \"[^>]*>\"));\n  var doctype = /^<!DOCTYPE [^>]+>/i;\n  // #7298: escape - to avoid being passed as HTML comment when inlined in page\n  var comment = /^<!\\--/;\n  var conditionalComment = /^<!\\[/;\n  // Special Elements (can contain anything)\n  var isPlainTextElement = makeMap('script,style,textarea', true);\n  var reCache = {};\n  var decodingMap = {\n      '&lt;': '<',\n      '&gt;': '>',\n      '&quot;': '\"',\n      '&amp;': '&',\n      '&#10;': '\\n',\n      '&#9;': '\\t',\n      '&#39;': \"'\"\n  };\n  var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;\n  var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;\n  // #5992\n  var isIgnoreNewlineTag = makeMap('pre,textarea', true);\n  var shouldIgnoreFirstNewline = function (tag, html) {\n      return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n';\n  };\n  function decodeAttr(value, shouldDecodeNewlines) {\n      var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n      return value.replace(re, function (match) { return decodingMap[match]; });\n  }\n  function parseHTML(html, options) {\n      var stack = [];\n      var expectHTML = options.expectHTML;\n      var isUnaryTag = options.isUnaryTag || no;\n      var canBeLeftOpenTag = options.canBeLeftOpenTag || no;\n      var index = 0;\n      var last, lastTag;\n      var _loop_1 = function () {\n          last = html;\n          // Make sure we're not in a plaintext content element like script/style\n          if (!lastTag || !isPlainTextElement(lastTag)) {\n              var textEnd = html.indexOf('<');\n              if (textEnd === 0) {\n                  // Comment:\n                  if (comment.test(html)) {\n                      var commentEnd = html.indexOf('-->');\n                      if (commentEnd >= 0) {\n                          if (options.shouldKeepComment && options.comment) {\n                              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);\n                          }\n                          advance(commentEnd + 3);\n                          return \"continue\";\n                      }\n                  }\n                  // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n                  if (conditionalComment.test(html)) {\n                      var conditionalEnd = html.indexOf(']>');\n                      if (conditionalEnd >= 0) {\n                          advance(conditionalEnd + 2);\n                          return \"continue\";\n                      }\n                  }\n                  // Doctype:\n                  var doctypeMatch = html.match(doctype);\n                  if (doctypeMatch) {\n                      advance(doctypeMatch[0].length);\n                      return \"continue\";\n                  }\n                  // End tag:\n                  var endTagMatch = html.match(endTag);\n                  if (endTagMatch) {\n                      var curIndex = index;\n                      advance(endTagMatch[0].length);\n                      parseEndTag(endTagMatch[1], curIndex, index);\n                      return \"continue\";\n                  }\n                  // Start tag:\n                  var startTagMatch = parseStartTag();\n                  if (startTagMatch) {\n                      handleStartTag(startTagMatch);\n                      if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {\n                          advance(1);\n                      }\n                      return \"continue\";\n                  }\n              }\n              var text = void 0, rest = void 0, next = void 0;\n              if (textEnd >= 0) {\n                  rest = html.slice(textEnd);\n                  while (!endTag.test(rest) &&\n                      !startTagOpen.test(rest) &&\n                      !comment.test(rest) &&\n                      !conditionalComment.test(rest)) {\n                      // < in plain text, be forgiving and treat it as text\n                      next = rest.indexOf('<', 1);\n                      if (next < 0)\n                          break;\n                      textEnd += next;\n                      rest = html.slice(textEnd);\n                  }\n                  text = html.substring(0, textEnd);\n              }\n              if (textEnd < 0) {\n                  text = html;\n              }\n              if (text) {\n                  advance(text.length);\n              }\n              if (options.chars && text) {\n                  options.chars(text, index - text.length, index);\n              }\n          }\n          else {\n              var endTagLength_1 = 0;\n              var stackedTag_1 = lastTag.toLowerCase();\n              var reStackedTag = reCache[stackedTag_1] ||\n                  (reCache[stackedTag_1] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag_1 + '[^>]*>)', 'i'));\n              var rest = html.replace(reStackedTag, function (all, text, endTag) {\n                  endTagLength_1 = endTag.length;\n                  if (!isPlainTextElement(stackedTag_1) && stackedTag_1 !== 'noscript') {\n                      text = text\n                          .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\n                          .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n                  }\n                  if (shouldIgnoreFirstNewline(stackedTag_1, text)) {\n                      text = text.slice(1);\n                  }\n                  if (options.chars) {\n                      options.chars(text);\n                  }\n                  return '';\n              });\n              index += html.length - rest.length;\n              html = rest;\n              parseEndTag(stackedTag_1, index - endTagLength_1, index);\n          }\n          if (html === last) {\n              options.chars && options.chars(html);\n              if (!stack.length && options.warn) {\n                  options.warn(\"Mal-formatted tag at end of template: \\\"\".concat(html, \"\\\"\"), {\n                      start: index + html.length\n                  });\n              }\n              return \"break\";\n          }\n      };\n      while (html) {\n          var state_1 = _loop_1();\n          if (state_1 === \"break\")\n              break;\n      }\n      // Clean up any remaining tags\n      parseEndTag();\n      function advance(n) {\n          index += n;\n          html = html.substring(n);\n      }\n      function parseStartTag() {\n          var start = html.match(startTagOpen);\n          if (start) {\n              var match = {\n                  tagName: start[1],\n                  attrs: [],\n                  start: index\n              };\n              advance(start[0].length);\n              var end = void 0, attr = void 0;\n              while (!(end = html.match(startTagClose)) &&\n                  (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {\n                  attr.start = index;\n                  advance(attr[0].length);\n                  attr.end = index;\n                  match.attrs.push(attr);\n              }\n              if (end) {\n                  match.unarySlash = end[1];\n                  advance(end[0].length);\n                  match.end = index;\n                  return match;\n              }\n          }\n      }\n      function handleStartTag(match) {\n          var tagName = match.tagName;\n          var unarySlash = match.unarySlash;\n          if (expectHTML) {\n              if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n                  parseEndTag(lastTag);\n              }\n              if (canBeLeftOpenTag(tagName) && lastTag === tagName) {\n                  parseEndTag(tagName);\n              }\n          }\n          var unary = isUnaryTag(tagName) || !!unarySlash;\n          var l = match.attrs.length;\n          var attrs = new Array(l);\n          for (var i = 0; i < l; i++) {\n              var args = match.attrs[i];\n              var value = args[3] || args[4] || args[5] || '';\n              var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n                  ? options.shouldDecodeNewlinesForHref\n                  : options.shouldDecodeNewlines;\n              attrs[i] = {\n                  name: args[1],\n                  value: decodeAttr(value, shouldDecodeNewlines)\n              };\n              if (options.outputSourceRange) {\n                  attrs[i].start = args.start + args[0].match(/^\\s*/).length;\n                  attrs[i].end = args.end;\n              }\n          }\n          if (!unary) {\n              stack.push({\n                  tag: tagName,\n                  lowerCasedTag: tagName.toLowerCase(),\n                  attrs: attrs,\n                  start: match.start,\n                  end: match.end\n              });\n              lastTag = tagName;\n          }\n          if (options.start) {\n              options.start(tagName, attrs, unary, match.start, match.end);\n          }\n      }\n      function parseEndTag(tagName, start, end) {\n          var pos, lowerCasedTagName;\n          if (start == null)\n              start = index;\n          if (end == null)\n              end = index;\n          // Find the closest opened tag of the same type\n          if (tagName) {\n              lowerCasedTagName = tagName.toLowerCase();\n              for (pos = stack.length - 1; pos >= 0; pos--) {\n                  if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n                      break;\n                  }\n              }\n          }\n          else {\n              // If no tag name is provided, clean shop\n              pos = 0;\n          }\n          if (pos >= 0) {\n              // Close all the open elements, up the stack\n              for (var i = stack.length - 1; i >= pos; i--) {\n                  if ((i > pos || !tagName) && options.warn) {\n                      options.warn(\"tag <\".concat(stack[i].tag, \"> has no matching end tag.\"), {\n                          start: stack[i].start,\n                          end: stack[i].end\n                      });\n                  }\n                  if (options.end) {\n                      options.end(stack[i].tag, start, end);\n                  }\n              }\n              // Remove the open elements from the stack\n              stack.length = pos;\n              lastTag = pos && stack[pos - 1].tag;\n          }\n          else if (lowerCasedTagName === 'br') {\n              if (options.start) {\n                  options.start(tagName, [], true, start, end);\n              }\n          }\n          else if (lowerCasedTagName === 'p') {\n              if (options.start) {\n                  options.start(tagName, [], false, start, end);\n              }\n              if (options.end) {\n                  options.end(tagName, start, end);\n              }\n          }\n      }\n  }\n\n  var onRE = /^@|^v-on:/;\n  var dirRE = /^v-|^@|^:|^#/;\n  var forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\n  var forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\n  var stripParensRE = /^\\(|\\)$/g;\n  var dynamicArgRE = /^\\[.*\\]$/;\n  var argRE = /:(.*)$/;\n  var bindRE = /^:|^\\.|^v-bind:/;\n  var modifierRE = /\\.[^.\\]]+(?=[^\\]]*$)/g;\n  var slotRE = /^v-slot(:|$)|^#/;\n  var lineBreakRE = /[\\r\\n]/;\n  var whitespaceRE = /[ \\f\\t\\r\\n]+/g;\n  var invalidAttributeRE = /[\\s\"'<>\\/=]/;\n  var decodeHTMLCached = cached(he.decode);\n  var emptySlotScopeToken = \"_empty_\";\n  // configurable state\n  var warn;\n  var delimiters;\n  var transforms;\n  var preTransforms;\n  var postTransforms;\n  var platformIsPreTag;\n  var platformMustUseProp;\n  var platformGetTagNamespace;\n  var maybeComponent;\n  function createASTElement(tag, attrs, parent) {\n      return {\n          type: 1,\n          tag: tag,\n          attrsList: attrs,\n          attrsMap: makeAttrsMap(attrs),\n          rawAttrsMap: {},\n          parent: parent,\n          children: []\n      };\n  }\n  /**\n   * Convert HTML string to AST.\n   */\n  function parse(template, options) {\n      warn = options.warn || baseWarn;\n      platformIsPreTag = options.isPreTag || no;\n      platformMustUseProp = options.mustUseProp || no;\n      platformGetTagNamespace = options.getTagNamespace || no;\n      var isReservedTag = options.isReservedTag || no;\n      maybeComponent = function (el) {\n          return !!(el.component ||\n              el.attrsMap[':is'] ||\n              el.attrsMap['v-bind:is'] ||\n              !(el.attrsMap.is ? isReservedTag(el.attrsMap.is) : isReservedTag(el.tag)));\n      };\n      transforms = pluckModuleFunction(options.modules, 'transformNode');\n      preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n      postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n      delimiters = options.delimiters;\n      var stack = [];\n      var preserveWhitespace = options.preserveWhitespace !== false;\n      var whitespaceOption = options.whitespace;\n      var root;\n      var currentParent;\n      var inVPre = false;\n      var inPre = false;\n      var warned = false;\n      function warnOnce(msg, range) {\n          if (!warned) {\n              warned = true;\n              warn(msg, range);\n          }\n      }\n      function closeElement(element) {\n          trimEndingWhitespace(element);\n          if (!inVPre && !element.processed) {\n              element = processElement(element, options);\n          }\n          // tree management\n          if (!stack.length && element !== root) {\n              // allow root elements with v-if, v-else-if and v-else\n              if (root.if && (element.elseif || element.else)) {\n                  {\n                      checkRootConstraints(element);\n                  }\n                  addIfCondition(root, {\n                      exp: element.elseif,\n                      block: element\n                  });\n              }\n              else {\n                  warnOnce(\"Component template should contain exactly one root element. \" +\n                      \"If you are using v-if on multiple elements, \" +\n                      \"use v-else-if to chain them instead.\", { start: element.start });\n              }\n          }\n          if (currentParent && !element.forbidden) {\n              if (element.elseif || element.else) {\n                  processIfConditions(element, currentParent);\n              }\n              else {\n                  if (element.slotScope) {\n                      // scoped slot\n                      // keep it in the children list so that v-else(-if) conditions can\n                      // find it as the prev node.\n                      var name_1 = element.slotTarget || '\"default\"';\n                      (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name_1] = element;\n                  }\n                  currentParent.children.push(element);\n                  element.parent = currentParent;\n              }\n          }\n          // final children cleanup\n          // filter out scoped slots\n          element.children = element.children.filter(function (c) { return !c.slotScope; });\n          // remove trailing whitespace node again\n          trimEndingWhitespace(element);\n          // check pre state\n          if (element.pre) {\n              inVPre = false;\n          }\n          if (platformIsPreTag(element.tag)) {\n              inPre = false;\n          }\n          // apply post-transforms\n          for (var i = 0; i < postTransforms.length; i++) {\n              postTransforms[i](element, options);\n          }\n      }\n      function trimEndingWhitespace(el) {\n          // remove trailing whitespace node\n          if (!inPre) {\n              var lastNode = void 0;\n              while ((lastNode = el.children[el.children.length - 1]) &&\n                  lastNode.type === 3 &&\n                  lastNode.text === ' ') {\n                  el.children.pop();\n              }\n          }\n      }\n      function checkRootConstraints(el) {\n          if (el.tag === 'slot' || el.tag === 'template') {\n              warnOnce(\"Cannot use <\".concat(el.tag, \"> as component root element because it may \") +\n                  'contain multiple nodes.', { start: el.start });\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n              warnOnce('Cannot use v-for on stateful component root element because ' +\n                  'it renders multiple elements.', el.rawAttrsMap['v-for']);\n          }\n      }\n      parseHTML(template, {\n          warn: warn,\n          expectHTML: options.expectHTML,\n          isUnaryTag: options.isUnaryTag,\n          canBeLeftOpenTag: options.canBeLeftOpenTag,\n          shouldDecodeNewlines: options.shouldDecodeNewlines,\n          shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n          shouldKeepComment: options.comments,\n          outputSourceRange: options.outputSourceRange,\n          start: function (tag, attrs, unary, start, end) {\n              // check namespace.\n              // inherit parent ns if there is one\n              var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n              // handle IE svg bug\n              /* istanbul ignore if */\n              if (isIE && ns === 'svg') {\n                  attrs = guardIESVGBug(attrs);\n              }\n              var element = createASTElement(tag, attrs, currentParent);\n              if (ns) {\n                  element.ns = ns;\n              }\n              {\n                  if (options.outputSourceRange) {\n                      element.start = start;\n                      element.end = end;\n                      element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {\n                          cumulated[attr.name] = attr;\n                          return cumulated;\n                      }, {});\n                  }\n                  attrs.forEach(function (attr) {\n                      if (invalidAttributeRE.test(attr.name)) {\n                          warn(\"Invalid dynamic argument expression: attribute names cannot contain \" +\n                              \"spaces, quotes, <, >, / or =.\", options.outputSourceRange\n                              ? {\n                                  start: attr.start + attr.name.indexOf(\"[\"),\n                                  end: attr.start + attr.name.length\n                              }\n                              : undefined);\n                      }\n                  });\n              }\n              if (isForbiddenTag(element) && !isServerRendering()) {\n                  element.forbidden = true;\n                  warn('Templates should only be responsible for mapping the state to the ' +\n                          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n                          \"<\".concat(tag, \">\") +\n                          ', as they will not be parsed.', { start: element.start });\n              }\n              // apply pre-transforms\n              for (var i = 0; i < preTransforms.length; i++) {\n                  element = preTransforms[i](element, options) || element;\n              }\n              if (!inVPre) {\n                  processPre(element);\n                  if (element.pre) {\n                      inVPre = true;\n                  }\n              }\n              if (platformIsPreTag(element.tag)) {\n                  inPre = true;\n              }\n              if (inVPre) {\n                  processRawAttrs(element);\n              }\n              else if (!element.processed) {\n                  // structural directives\n                  processFor(element);\n                  processIf(element);\n                  processOnce(element);\n              }\n              if (!root) {\n                  root = element;\n                  {\n                      checkRootConstraints(root);\n                  }\n              }\n              if (!unary) {\n                  currentParent = element;\n                  stack.push(element);\n              }\n              else {\n                  closeElement(element);\n              }\n          },\n          end: function (tag, start, end) {\n              var element = stack[stack.length - 1];\n              // pop stack\n              stack.length -= 1;\n              currentParent = stack[stack.length - 1];\n              if (options.outputSourceRange) {\n                  element.end = end;\n              }\n              closeElement(element);\n          },\n          chars: function (text, start, end) {\n              if (!currentParent) {\n                  {\n                      if (text === template) {\n                          warnOnce('Component template requires a root element, rather than just text.', { start: start });\n                      }\n                      else if ((text = text.trim())) {\n                          warnOnce(\"text \\\"\".concat(text, \"\\\" outside root element will be ignored.\"), {\n                              start: start\n                          });\n                      }\n                  }\n                  return;\n              }\n              // IE textarea placeholder bug\n              /* istanbul ignore if */\n              if (isIE &&\n                  currentParent.tag === 'textarea' &&\n                  currentParent.attrsMap.placeholder === text) {\n                  return;\n              }\n              var children = currentParent.children;\n              if (inPre || text.trim()) {\n                  text = isTextTag(currentParent)\n                      ? text\n                      : decodeHTMLCached(text);\n              }\n              else if (!children.length) {\n                  // remove the whitespace-only node right after an opening tag\n                  text = '';\n              }\n              else if (whitespaceOption) {\n                  if (whitespaceOption === 'condense') {\n                      // in condense mode, remove the whitespace node if it contains\n                      // line break, otherwise condense to a single space\n                      text = lineBreakRE.test(text) ? '' : ' ';\n                  }\n                  else {\n                      text = ' ';\n                  }\n              }\n              else {\n                  text = preserveWhitespace ? ' ' : '';\n              }\n              if (text) {\n                  if (!inPre && whitespaceOption === 'condense') {\n                      // condense consecutive whitespaces into single space\n                      text = text.replace(whitespaceRE, ' ');\n                  }\n                  var res = void 0;\n                  var child = void 0;\n                  if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n                      child = {\n                          type: 2,\n                          expression: res.expression,\n                          tokens: res.tokens,\n                          text: text\n                      };\n                  }\n                  else if (text !== ' ' ||\n                      !children.length ||\n                      children[children.length - 1].text !== ' ') {\n                      child = {\n                          type: 3,\n                          text: text\n                      };\n                  }\n                  if (child) {\n                      if (options.outputSourceRange) {\n                          child.start = start;\n                          child.end = end;\n                      }\n                      children.push(child);\n                  }\n              }\n          },\n          comment: function (text, start, end) {\n              // adding anything as a sibling to the root node is forbidden\n              // comments should still be allowed, but ignored\n              if (currentParent) {\n                  var child = {\n                      type: 3,\n                      text: text,\n                      isComment: true\n                  };\n                  if (options.outputSourceRange) {\n                      child.start = start;\n                      child.end = end;\n                  }\n                  currentParent.children.push(child);\n              }\n          }\n      });\n      return root;\n  }\n  function processPre(el) {\n      if (getAndRemoveAttr(el, 'v-pre') != null) {\n          el.pre = true;\n      }\n  }\n  function processRawAttrs(el) {\n      var list = el.attrsList;\n      var len = list.length;\n      if (len) {\n          var attrs = (el.attrs = new Array(len));\n          for (var i = 0; i < len; i++) {\n              attrs[i] = {\n                  name: list[i].name,\n                  value: JSON.stringify(list[i].value)\n              };\n              if (list[i].start != null) {\n                  attrs[i].start = list[i].start;\n                  attrs[i].end = list[i].end;\n              }\n          }\n      }\n      else if (!el.pre) {\n          // non root node in pre blocks with no attributes\n          el.plain = true;\n      }\n  }\n  function processElement(element, options) {\n      processKey(element);\n      // determine whether this is a plain element after\n      // removing structural attributes\n      element.plain =\n          !element.key && !element.scopedSlots && !element.attrsList.length;\n      processRef(element);\n      processSlotContent(element);\n      processSlotOutlet(element);\n      processComponent(element);\n      for (var i = 0; i < transforms.length; i++) {\n          element = transforms[i](element, options) || element;\n      }\n      processAttrs(element);\n      return element;\n  }\n  function processKey(el) {\n      var exp = getBindingAttr(el, 'key');\n      if (exp) {\n          {\n              if (el.tag === 'template') {\n                  warn(\"<template> cannot be keyed. Place the key on real elements instead.\", getRawBindingAttr(el, 'key'));\n              }\n              if (el.for) {\n                  var iterator = el.iterator2 || el.iterator1;\n                  var parent_1 = el.parent;\n                  if (iterator &&\n                      iterator === exp &&\n                      parent_1 &&\n                      parent_1.tag === 'transition-group') {\n                      warn(\"Do not use v-for index as key on <transition-group> children, \" +\n                          \"this is the same as not using keys.\", getRawBindingAttr(el, 'key'), true /* tip */);\n                  }\n              }\n          }\n          el.key = exp;\n      }\n  }\n  function processRef(el) {\n      var ref = getBindingAttr(el, 'ref');\n      if (ref) {\n          el.ref = ref;\n          el.refInFor = checkInFor(el);\n      }\n  }\n  function processFor(el) {\n      var exp;\n      if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n          var res = parseFor(exp);\n          if (res) {\n              extend(el, res);\n          }\n          else {\n              warn(\"Invalid v-for expression: \".concat(exp), el.rawAttrsMap['v-for']);\n          }\n      }\n  }\n  function parseFor(exp) {\n      var inMatch = exp.match(forAliasRE);\n      if (!inMatch)\n          return;\n      var res = {};\n      res.for = inMatch[2].trim();\n      var alias = inMatch[1].trim().replace(stripParensRE, '');\n      var iteratorMatch = alias.match(forIteratorRE);\n      if (iteratorMatch) {\n          res.alias = alias.replace(forIteratorRE, '').trim();\n          res.iterator1 = iteratorMatch[1].trim();\n          if (iteratorMatch[2]) {\n              res.iterator2 = iteratorMatch[2].trim();\n          }\n      }\n      else {\n          res.alias = alias;\n      }\n      return res;\n  }\n  function processIf(el) {\n      var exp = getAndRemoveAttr(el, 'v-if');\n      if (exp) {\n          el.if = exp;\n          addIfCondition(el, {\n              exp: exp,\n              block: el\n          });\n      }\n      else {\n          if (getAndRemoveAttr(el, 'v-else') != null) {\n              el.else = true;\n          }\n          var elseif = getAndRemoveAttr(el, 'v-else-if');\n          if (elseif) {\n              el.elseif = elseif;\n          }\n      }\n  }\n  function processIfConditions(el, parent) {\n      var prev = findPrevElement(parent.children);\n      if (prev && prev.if) {\n          addIfCondition(prev, {\n              exp: el.elseif,\n              block: el\n          });\n      }\n      else {\n          warn(\"v-\".concat(el.elseif ? 'else-if=\"' + el.elseif + '\"' : 'else', \" \") +\n              \"used on element <\".concat(el.tag, \"> without corresponding v-if.\"), el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']);\n      }\n  }\n  function findPrevElement(children) {\n      var i = children.length;\n      while (i--) {\n          if (children[i].type === 1) {\n              return children[i];\n          }\n          else {\n              if (children[i].text !== ' ') {\n                  warn(\"text \\\"\".concat(children[i].text.trim(), \"\\\" between v-if and v-else(-if) \") +\n                      \"will be ignored.\", children[i]);\n              }\n              children.pop();\n          }\n      }\n  }\n  function addIfCondition(el, condition) {\n      if (!el.ifConditions) {\n          el.ifConditions = [];\n      }\n      el.ifConditions.push(condition);\n  }\n  function processOnce(el) {\n      var once = getAndRemoveAttr(el, 'v-once');\n      if (once != null) {\n          el.once = true;\n      }\n  }\n  // handle content being passed to a component as slot,\n  // e.g. <template slot=\"xxx\">, <div slot-scope=\"xxx\">\n  function processSlotContent(el) {\n      var slotScope;\n      if (el.tag === 'template') {\n          slotScope = getAndRemoveAttr(el, 'scope');\n          /* istanbul ignore if */\n          if (slotScope) {\n              warn(\"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n                  \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n                  \"can also be used on plain elements in addition to <template> to \" +\n                  \"denote scoped slots.\", el.rawAttrsMap['scope'], true);\n          }\n          el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n      }\n      else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n          /* istanbul ignore if */\n          if (el.attrsMap['v-for']) {\n              warn(\"Ambiguous combined usage of slot-scope and v-for on <\".concat(el.tag, \"> \") +\n                  \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n                  \"scoped slot to make it clearer.\", el.rawAttrsMap['slot-scope'], true);\n          }\n          el.slotScope = slotScope;\n      }\n      // slot=\"xxx\"\n      var slotTarget = getBindingAttr(el, 'slot');\n      if (slotTarget) {\n          el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n          el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);\n          // preserve slot as an attribute for native shadow DOM compat\n          // only for non-scoped slots.\n          if (el.tag !== 'template' && !el.slotScope) {\n              addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));\n          }\n      }\n      // 2.6 v-slot syntax\n      {\n          if (el.tag === 'template') {\n              // v-slot on <template>\n              var slotBinding = getAndRemoveAttrByRegex(el, slotRE);\n              if (slotBinding) {\n                  {\n                      if (el.slotTarget || el.slotScope) {\n                          warn(\"Unexpected mixed usage of different slot syntaxes.\", el);\n                      }\n                      if (el.parent && !maybeComponent(el.parent)) {\n                          warn(\"<template v-slot> can only appear at the root level inside \" +\n                              \"the receiving component\", el);\n                      }\n                  }\n                  var _a = getSlotName(slotBinding), name_2 = _a.name, dynamic = _a.dynamic;\n                  el.slotTarget = name_2;\n                  el.slotTargetDynamic = dynamic;\n                  el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf\n              }\n          }\n          else {\n              // v-slot on component, denotes default slot\n              var slotBinding = getAndRemoveAttrByRegex(el, slotRE);\n              if (slotBinding) {\n                  {\n                      if (!maybeComponent(el)) {\n                          warn(\"v-slot can only be used on components or <template>.\", slotBinding);\n                      }\n                      if (el.slotScope || el.slotTarget) {\n                          warn(\"Unexpected mixed usage of different slot syntaxes.\", el);\n                      }\n                      if (el.scopedSlots) {\n                          warn(\"To avoid scope ambiguity, the default slot should also use \" +\n                              \"<template> syntax when there are other named slots.\", slotBinding);\n                      }\n                  }\n                  // add the component's children to its default slot\n                  var slots = el.scopedSlots || (el.scopedSlots = {});\n                  var _b = getSlotName(slotBinding), name_3 = _b.name, dynamic = _b.dynamic;\n                  var slotContainer_1 = (slots[name_3] = createASTElement('template', [], el));\n                  slotContainer_1.slotTarget = name_3;\n                  slotContainer_1.slotTargetDynamic = dynamic;\n                  slotContainer_1.children = el.children.filter(function (c) {\n                      if (!c.slotScope) {\n                          c.parent = slotContainer_1;\n                          return true;\n                      }\n                  });\n                  slotContainer_1.slotScope = slotBinding.value || emptySlotScopeToken;\n                  // remove children as they are returned from scopedSlots now\n                  el.children = [];\n                  // mark el non-plain so data gets generated\n                  el.plain = false;\n              }\n          }\n      }\n  }\n  function getSlotName(binding) {\n      var name = binding.name.replace(slotRE, '');\n      if (!name) {\n          if (binding.name[0] !== '#') {\n              name = 'default';\n          }\n          else {\n              warn(\"v-slot shorthand syntax requires a slot name.\", binding);\n          }\n      }\n      return dynamicArgRE.test(name)\n          ? // dynamic [name]\n              { name: name.slice(1, -1), dynamic: true }\n          : // static name\n              { name: \"\\\"\".concat(name, \"\\\"\"), dynamic: false };\n  }\n  // handle <slot/> outlets\n  function processSlotOutlet(el) {\n      if (el.tag === 'slot') {\n          el.slotName = getBindingAttr(el, 'name');\n          if (el.key) {\n              warn(\"`key` does not work on <slot> because slots are abstract outlets \" +\n                  \"and can possibly expand into multiple elements. \" +\n                  \"Use the key on a wrapping element instead.\", getRawBindingAttr(el, 'key'));\n          }\n      }\n  }\n  function processComponent(el) {\n      var binding;\n      if ((binding = getBindingAttr(el, 'is'))) {\n          el.component = binding;\n      }\n      if (getAndRemoveAttr(el, 'inline-template') != null) {\n          el.inlineTemplate = true;\n      }\n  }\n  function processAttrs(el) {\n      var list = el.attrsList;\n      var i, l, name, rawName, value, modifiers, syncGen, isDynamic;\n      for (i = 0, l = list.length; i < l; i++) {\n          name = rawName = list[i].name;\n          value = list[i].value;\n          if (dirRE.test(name)) {\n              // mark element as dynamic\n              el.hasBindings = true;\n              // modifiers\n              modifiers = parseModifiers(name.replace(dirRE, ''));\n              // support .foo shorthand syntax for the .prop modifier\n              if (modifiers) {\n                  name = name.replace(modifierRE, '');\n              }\n              if (bindRE.test(name)) {\n                  // v-bind\n                  name = name.replace(bindRE, '');\n                  value = parseFilters(value);\n                  isDynamic = dynamicArgRE.test(name);\n                  if (isDynamic) {\n                      name = name.slice(1, -1);\n                  }\n                  if (value.trim().length === 0) {\n                      warn(\"The value for a v-bind expression cannot be empty. Found in \\\"v-bind:\".concat(name, \"\\\"\"));\n                  }\n                  if (modifiers) {\n                      if (modifiers.prop && !isDynamic) {\n                          name = camelize(name);\n                          if (name === 'innerHtml')\n                              name = 'innerHTML';\n                      }\n                      if (modifiers.camel && !isDynamic) {\n                          name = camelize(name);\n                      }\n                      if (modifiers.sync) {\n                          syncGen = genAssignmentCode(value, \"$event\");\n                          if (!isDynamic) {\n                              addHandler(el, \"update:\".concat(camelize(name)), syncGen, null, false, warn, list[i]);\n                              if (hyphenate(name) !== camelize(name)) {\n                                  addHandler(el, \"update:\".concat(hyphenate(name)), syncGen, null, false, warn, list[i]);\n                              }\n                          }\n                          else {\n                              // handler w/ dynamic event name\n                              addHandler(el, \"\\\"update:\\\"+(\".concat(name, \")\"), syncGen, null, false, warn, list[i], true // dynamic\n                              );\n                          }\n                      }\n                  }\n                  if ((modifiers && modifiers.prop) ||\n                      (!el.component && platformMustUseProp(el.tag, el.attrsMap.type, name))) {\n                      addProp(el, name, value, list[i], isDynamic);\n                  }\n                  else {\n                      addAttr(el, name, value, list[i], isDynamic);\n                  }\n              }\n              else if (onRE.test(name)) {\n                  // v-on\n                  name = name.replace(onRE, '');\n                  isDynamic = dynamicArgRE.test(name);\n                  if (isDynamic) {\n                      name = name.slice(1, -1);\n                  }\n                  addHandler(el, name, value, modifiers, false, warn, list[i], isDynamic);\n              }\n              else {\n                  // normal directives\n                  name = name.replace(dirRE, '');\n                  // parse arg\n                  var argMatch = name.match(argRE);\n                  var arg = argMatch && argMatch[1];\n                  isDynamic = false;\n                  if (arg) {\n                      name = name.slice(0, -(arg.length + 1));\n                      if (dynamicArgRE.test(arg)) {\n                          arg = arg.slice(1, -1);\n                          isDynamic = true;\n                      }\n                  }\n                  addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);\n                  if (name === 'model') {\n                      checkForAliasModel(el, value);\n                  }\n              }\n          }\n          else {\n              // literal attribute\n              {\n                  var res = parseText(value, delimiters);\n                  if (res) {\n                      warn(\"\".concat(name, \"=\\\"\").concat(value, \"\\\": \") +\n                          'Interpolation inside attributes has been removed. ' +\n                          'Use v-bind or the colon shorthand instead. For example, ' +\n                          'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.', list[i]);\n                  }\n              }\n              addAttr(el, name, JSON.stringify(value), list[i]);\n              // #6887 firefox doesn't update muted state if set via attribute\n              // even immediately after element creation\n              if (!el.component &&\n                  name === 'muted' &&\n                  platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n                  addProp(el, name, 'true', list[i]);\n              }\n          }\n      }\n  }\n  function checkInFor(el) {\n      var parent = el;\n      while (parent) {\n          if (parent.for !== undefined) {\n              return true;\n          }\n          parent = parent.parent;\n      }\n      return false;\n  }\n  function parseModifiers(name) {\n      var match = name.match(modifierRE);\n      if (match) {\n          var ret_1 = {};\n          match.forEach(function (m) {\n              ret_1[m.slice(1)] = true;\n          });\n          return ret_1;\n      }\n  }\n  function makeAttrsMap(attrs) {\n      var map = {};\n      for (var i = 0, l = attrs.length; i < l; i++) {\n          if (map[attrs[i].name] && !isIE && !isEdge) {\n              warn('duplicate attribute: ' + attrs[i].name, attrs[i]);\n          }\n          map[attrs[i].name] = attrs[i].value;\n      }\n      return map;\n  }\n  // for script (e.g. type=\"x/template\") or style, do not decode content\n  function isTextTag(el) {\n      return el.tag === 'script' || el.tag === 'style';\n  }\n  function isForbiddenTag(el) {\n      return (el.tag === 'style' ||\n          (el.tag === 'script' &&\n              (!el.attrsMap.type || el.attrsMap.type === 'text/javascript')));\n  }\n  var ieNSBug = /^xmlns:NS\\d+/;\n  var ieNSPrefix = /^NS\\d+:/;\n  /* istanbul ignore next */\n  function guardIESVGBug(attrs) {\n      var res = [];\n      for (var i = 0; i < attrs.length; i++) {\n          var attr = attrs[i];\n          if (!ieNSBug.test(attr.name)) {\n              attr.name = attr.name.replace(ieNSPrefix, '');\n              res.push(attr);\n          }\n      }\n      return res;\n  }\n  function checkForAliasModel(el, value) {\n      var _el = el;\n      while (_el) {\n          if (_el.for && _el.alias === value) {\n              warn(\"<\".concat(el.tag, \" v-model=\\\"\").concat(value, \"\\\">: \") +\n                  \"You are binding v-model directly to a v-for iteration alias. \" +\n                  \"This will not be able to modify the v-for source array because \" +\n                  \"writing to the alias is like modifying a function local variable. \" +\n                  \"Consider using an array of objects and use v-model on an object property instead.\", el.rawAttrsMap['v-model']);\n          }\n          _el = _el.parent;\n      }\n  }\n\n  /**\n   * Expand input[v-model] with dynamic type bindings into v-if-else chains\n   * Turn this:\n   *   <input v-model=\"data[type]\" :type=\"type\">\n   * into this:\n   *   <input v-if=\"type === 'checkbox'\" type=\"checkbox\" v-model=\"data[type]\">\n   *   <input v-else-if=\"type === 'radio'\" type=\"radio\" v-model=\"data[type]\">\n   *   <input v-else :type=\"type\" v-model=\"data[type]\">\n   */\n  function preTransformNode(el, options) {\n      if (el.tag === 'input') {\n          var map = el.attrsMap;\n          if (!map['v-model']) {\n              return;\n          }\n          var typeBinding = void 0;\n          if (map[':type'] || map['v-bind:type']) {\n              typeBinding = getBindingAttr(el, 'type');\n          }\n          if (!map.type && !typeBinding && map['v-bind']) {\n              typeBinding = \"(\".concat(map['v-bind'], \").type\");\n          }\n          if (typeBinding) {\n              var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n              var ifConditionExtra = ifCondition ? \"&&(\".concat(ifCondition, \")\") : \"\";\n              var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n              var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n              // 1. checkbox\n              var branch0 = cloneASTElement(el);\n              // process for on the main node\n              processFor(branch0);\n              addRawAttr(branch0, 'type', 'checkbox');\n              processElement(branch0, options);\n              branch0.processed = true; // prevent it from double-processed\n              branch0.if = \"(\".concat(typeBinding, \")==='checkbox'\") + ifConditionExtra;\n              addIfCondition(branch0, {\n                  exp: branch0.if,\n                  block: branch0\n              });\n              // 2. add radio else-if condition\n              var branch1 = cloneASTElement(el);\n              getAndRemoveAttr(branch1, 'v-for', true);\n              addRawAttr(branch1, 'type', 'radio');\n              processElement(branch1, options);\n              addIfCondition(branch0, {\n                  exp: \"(\".concat(typeBinding, \")==='radio'\") + ifConditionExtra,\n                  block: branch1\n              });\n              // 3. other\n              var branch2 = cloneASTElement(el);\n              getAndRemoveAttr(branch2, 'v-for', true);\n              addRawAttr(branch2, ':type', typeBinding);\n              processElement(branch2, options);\n              addIfCondition(branch0, {\n                  exp: ifCondition,\n                  block: branch2\n              });\n              if (hasElse) {\n                  branch0.else = true;\n              }\n              else if (elseIfCondition) {\n                  branch0.elseif = elseIfCondition;\n              }\n              return branch0;\n          }\n      }\n  }\n  function cloneASTElement(el) {\n      return createASTElement(el.tag, el.attrsList.slice(), el.parent);\n  }\n  var model = {\n      preTransformNode: preTransformNode\n  };\n\n  var modules = [klass, style, model];\n\n  function text(el, dir) {\n      if (dir.value) {\n          addProp(el, 'textContent', \"_s(\".concat(dir.value, \")\"), dir);\n      }\n  }\n\n  function html(el, dir) {\n      if (dir.value) {\n          addProp(el, 'innerHTML', \"_s(\".concat(dir.value, \")\"), dir);\n      }\n  }\n\n  var directives = {\n      model: model$1,\n      text: text,\n      html: html\n  };\n\n  var baseOptions = {\n      expectHTML: true,\n      modules: modules,\n      directives: directives,\n      isPreTag: isPreTag,\n      isUnaryTag: isUnaryTag,\n      mustUseProp: mustUseProp,\n      canBeLeftOpenTag: canBeLeftOpenTag,\n      isReservedTag: isReservedTag,\n      getTagNamespace: getTagNamespace,\n      staticKeys: genStaticKeys$1(modules)\n  };\n\n  var isStaticKey;\n  var isPlatformReservedTag;\n  var genStaticKeysCached = cached(genStaticKeys);\n  /**\n   * Goal of the optimizer: walk the generated template AST tree\n   * and detect sub-trees that are purely static, i.e. parts of\n   * the DOM that never needs to change.\n   *\n   * Once we detect these sub-trees, we can:\n   *\n   * 1. Hoist them into constants, so that we no longer need to\n   *    create fresh nodes for them on each re-render;\n   * 2. Completely skip them in the patching process.\n   */\n  function optimize(root, options) {\n      if (!root)\n          return;\n      isStaticKey = genStaticKeysCached(options.staticKeys || '');\n      isPlatformReservedTag = options.isReservedTag || no;\n      // first pass: mark all non-static nodes.\n      markStatic(root);\n      // second pass: mark static roots.\n      markStaticRoots(root, false);\n  }\n  function genStaticKeys(keys) {\n      return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +\n          (keys ? ',' + keys : ''));\n  }\n  function markStatic(node) {\n      node.static = isStatic(node);\n      if (node.type === 1) {\n          // do not make component slot content static. this avoids\n          // 1. components not able to mutate slot nodes\n          // 2. static slot content fails for hot-reloading\n          if (!isPlatformReservedTag(node.tag) &&\n              node.tag !== 'slot' &&\n              node.attrsMap['inline-template'] == null) {\n              return;\n          }\n          for (var i = 0, l = node.children.length; i < l; i++) {\n              var child = node.children[i];\n              markStatic(child);\n              if (!child.static) {\n                  node.static = false;\n              }\n          }\n          if (node.ifConditions) {\n              for (var i = 1, l = node.ifConditions.length; i < l; i++) {\n                  var block = node.ifConditions[i].block;\n                  markStatic(block);\n                  if (!block.static) {\n                      node.static = false;\n                  }\n              }\n          }\n      }\n  }\n  function markStaticRoots(node, isInFor) {\n      if (node.type === 1) {\n          if (node.static || node.once) {\n              node.staticInFor = isInFor;\n          }\n          // For a node to qualify as a static root, it should have children that\n          // are not just static text. Otherwise the cost of hoisting out will\n          // outweigh the benefits and it's better off to just always render it fresh.\n          if (node.static &&\n              node.children.length &&\n              !(node.children.length === 1 && node.children[0].type === 3)) {\n              node.staticRoot = true;\n              return;\n          }\n          else {\n              node.staticRoot = false;\n          }\n          if (node.children) {\n              for (var i = 0, l = node.children.length; i < l; i++) {\n                  markStaticRoots(node.children[i], isInFor || !!node.for);\n              }\n          }\n          if (node.ifConditions) {\n              for (var i = 1, l = node.ifConditions.length; i < l; i++) {\n                  markStaticRoots(node.ifConditions[i].block, isInFor);\n              }\n          }\n      }\n  }\n  function isStatic(node) {\n      if (node.type === 2) {\n          // expression\n          return false;\n      }\n      if (node.type === 3) {\n          // text\n          return true;\n      }\n      return !!(node.pre ||\n          (!node.hasBindings && // no dynamic bindings\n              !node.if &&\n              !node.for && // not v-if or v-for or v-else\n              !isBuiltInTag(node.tag) && // not a built-in\n              isPlatformReservedTag(node.tag) && // not a component\n              !isDirectChildOfTemplateFor(node) &&\n              Object.keys(node).every(isStaticKey)));\n  }\n  function isDirectChildOfTemplateFor(node) {\n      while (node.parent) {\n          node = node.parent;\n          if (node.tag !== 'template') {\n              return false;\n          }\n          if (node.for) {\n              return true;\n          }\n      }\n      return false;\n  }\n\n  var fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function(?:\\s+[\\w$]+)?\\s*\\(/;\n  var fnInvokeRE = /\\([^)]*?\\);*$/;\n  var simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\n  // KeyboardEvent.keyCode aliases\n  var keyCodes = {\n      esc: 27,\n      tab: 9,\n      enter: 13,\n      space: 32,\n      up: 38,\n      left: 37,\n      right: 39,\n      down: 40,\n      delete: [8, 46]\n  };\n  // KeyboardEvent.key aliases\n  var keyNames = {\n      // #7880: IE11 and Edge use `Esc` for Escape key name.\n      esc: ['Esc', 'Escape'],\n      tab: 'Tab',\n      enter: 'Enter',\n      // #9112: IE11 uses `Spacebar` for Space key name.\n      space: [' ', 'Spacebar'],\n      // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\n      up: ['Up', 'ArrowUp'],\n      left: ['Left', 'ArrowLeft'],\n      right: ['Right', 'ArrowRight'],\n      down: ['Down', 'ArrowDown'],\n      // #9112: IE11 uses `Del` for Delete key name.\n      delete: ['Backspace', 'Delete', 'Del']\n  };\n  // #4868: modifiers that prevent the execution of the listener\n  // need to explicitly return null so that we can determine whether to remove\n  // the listener for .once\n  var genGuard = function (condition) { return \"if(\".concat(condition, \")return null;\"); };\n  var modifierCode = {\n      stop: '$event.stopPropagation();',\n      prevent: '$event.preventDefault();',\n      self: genGuard(\"$event.target !== $event.currentTarget\"),\n      ctrl: genGuard(\"!$event.ctrlKey\"),\n      shift: genGuard(\"!$event.shiftKey\"),\n      alt: genGuard(\"!$event.altKey\"),\n      meta: genGuard(\"!$event.metaKey\"),\n      left: genGuard(\"'button' in $event && $event.button !== 0\"),\n      middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n      right: genGuard(\"'button' in $event && $event.button !== 2\")\n  };\n  function genHandlers(events, isNative) {\n      var prefix = isNative ? 'nativeOn:' : 'on:';\n      var staticHandlers = \"\";\n      var dynamicHandlers = \"\";\n      for (var name_1 in events) {\n          var handlerCode = genHandler(events[name_1]);\n          //@ts-expect-error\n          if (events[name_1] && events[name_1].dynamic) {\n              dynamicHandlers += \"\".concat(name_1, \",\").concat(handlerCode, \",\");\n          }\n          else {\n              staticHandlers += \"\\\"\".concat(name_1, \"\\\":\").concat(handlerCode, \",\");\n          }\n      }\n      staticHandlers = \"{\".concat(staticHandlers.slice(0, -1), \"}\");\n      if (dynamicHandlers) {\n          return prefix + \"_d(\".concat(staticHandlers, \",[\").concat(dynamicHandlers.slice(0, -1), \"])\");\n      }\n      else {\n          return prefix + staticHandlers;\n      }\n  }\n  function genHandler(handler) {\n      if (!handler) {\n          return 'function(){}';\n      }\n      if (Array.isArray(handler)) {\n          return \"[\".concat(handler.map(function (handler) { return genHandler(handler); }).join(','), \"]\");\n      }\n      var isMethodPath = simplePathRE.test(handler.value);\n      var isFunctionExpression = fnExpRE.test(handler.value);\n      var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));\n      if (!handler.modifiers) {\n          if (isMethodPath || isFunctionExpression) {\n              return handler.value;\n          }\n          return \"function($event){\".concat(isFunctionInvocation ? \"return \".concat(handler.value) : handler.value, \"}\"); // inline statement\n      }\n      else {\n          var code = '';\n          var genModifierCode = '';\n          var keys = [];\n          var _loop_1 = function (key) {\n              if (modifierCode[key]) {\n                  genModifierCode += modifierCode[key];\n                  // left/right\n                  if (keyCodes[key]) {\n                      keys.push(key);\n                  }\n              }\n              else if (key === 'exact') {\n                  var modifiers_1 = handler.modifiers;\n                  genModifierCode += genGuard(['ctrl', 'shift', 'alt', 'meta']\n                      .filter(function (keyModifier) { return !modifiers_1[keyModifier]; })\n                      .map(function (keyModifier) { return \"$event.\".concat(keyModifier, \"Key\"); })\n                      .join('||'));\n              }\n              else {\n                  keys.push(key);\n              }\n          };\n          for (var key in handler.modifiers) {\n              _loop_1(key);\n          }\n          if (keys.length) {\n              code += genKeyFilter(keys);\n          }\n          // Make sure modifiers like prevent and stop get executed after key filtering\n          if (genModifierCode) {\n              code += genModifierCode;\n          }\n          var handlerCode = isMethodPath\n              ? \"return \".concat(handler.value, \".apply(null, arguments)\")\n              : isFunctionExpression\n                  ? \"return (\".concat(handler.value, \").apply(null, arguments)\")\n                  : isFunctionInvocation\n                      ? \"return \".concat(handler.value)\n                      : handler.value;\n          return \"function($event){\".concat(code).concat(handlerCode, \"}\");\n      }\n  }\n  function genKeyFilter(keys) {\n      return (\n      // make sure the key filters only apply to KeyboardEvents\n      // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake\n      // key events that do not have keyCode property...\n      \"if(!$event.type.indexOf('key')&&\" +\n          \"\".concat(keys.map(genFilterCode).join('&&'), \")return null;\"));\n  }\n  function genFilterCode(key) {\n      var keyVal = parseInt(key, 10);\n      if (keyVal) {\n          return \"$event.keyCode!==\".concat(keyVal);\n      }\n      var keyCode = keyCodes[key];\n      var keyName = keyNames[key];\n      return (\"_k($event.keyCode,\" +\n          \"\".concat(JSON.stringify(key), \",\") +\n          \"\".concat(JSON.stringify(keyCode), \",\") +\n          \"$event.key,\" +\n          \"\".concat(JSON.stringify(keyName)) +\n          \")\");\n  }\n\n  function on(el, dir) {\n      if (dir.modifiers) {\n          warn$2(\"v-on without argument does not support modifiers.\");\n      }\n      el.wrapListeners = function (code) { return \"_g(\".concat(code, \",\").concat(dir.value, \")\"); };\n  }\n\n  function bind(el, dir) {\n      el.wrapData = function (code) {\n          return \"_b(\".concat(code, \",'\").concat(el.tag, \"',\").concat(dir.value, \",\").concat(dir.modifiers && dir.modifiers.prop ? 'true' : 'false').concat(dir.modifiers && dir.modifiers.sync ? ',true' : '', \")\");\n      };\n  }\n\n  var baseDirectives = {\n      on: on,\n      bind: bind,\n      cloak: noop\n  };\n\n  var CodegenState = /** @class */ (function () {\n      function CodegenState(options) {\n          this.options = options;\n          this.warn = options.warn || baseWarn;\n          this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n          this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n          this.directives = extend(extend({}, baseDirectives), options.directives);\n          var isReservedTag = options.isReservedTag || no;\n          this.maybeComponent = function (el) {\n              return !!el.component || !isReservedTag(el.tag);\n          };\n          this.onceId = 0;\n          this.staticRenderFns = [];\n          this.pre = false;\n      }\n      return CodegenState;\n  }());\n  function generate(ast, options) {\n      var state = new CodegenState(options);\n      // fix #11483, Root level <script> tags should not be rendered.\n      var code = ast\n          ? ast.tag === 'script'\n              ? 'null'\n              : genElement(ast, state)\n          : '_c(\"div\")';\n      return {\n          render: \"with(this){return \".concat(code, \"}\"),\n          staticRenderFns: state.staticRenderFns\n      };\n  }\n  function genElement(el, state) {\n      if (el.parent) {\n          el.pre = el.pre || el.parent.pre;\n      }\n      if (el.staticRoot && !el.staticProcessed) {\n          return genStatic(el, state);\n      }\n      else if (el.once && !el.onceProcessed) {\n          return genOnce(el, state);\n      }\n      else if (el.for && !el.forProcessed) {\n          return genFor(el, state);\n      }\n      else if (el.if && !el.ifProcessed) {\n          return genIf(el, state);\n      }\n      else if (el.tag === 'template' && !el.slotTarget && !state.pre) {\n          return genChildren(el, state) || 'void 0';\n      }\n      else if (el.tag === 'slot') {\n          return genSlot(el, state);\n      }\n      else {\n          // component or element\n          var code = void 0;\n          if (el.component) {\n              code = genComponent(el.component, el, state);\n          }\n          else {\n              var data = void 0;\n              var maybeComponent = state.maybeComponent(el);\n              if (!el.plain || (el.pre && maybeComponent)) {\n                  data = genData(el, state);\n              }\n              var tag \n              // check if this is a component in <script setup>\n              = void 0;\n              // check if this is a component in <script setup>\n              var bindings = state.options.bindings;\n              if (maybeComponent && bindings && bindings.__isScriptSetup !== false) {\n                  tag = checkBindingType(bindings, el.tag);\n              }\n              if (!tag)\n                  tag = \"'\".concat(el.tag, \"'\");\n              var children = el.inlineTemplate ? null : genChildren(el, state, true);\n              code = \"_c(\".concat(tag).concat(data ? \",\".concat(data) : '' // data\n              ).concat(children ? \",\".concat(children) : '' // children\n              , \")\");\n          }\n          // module transforms\n          for (var i = 0; i < state.transforms.length; i++) {\n              code = state.transforms[i](el, code);\n          }\n          return code;\n      }\n  }\n  function checkBindingType(bindings, key) {\n      var camelName = camelize(key);\n      var PascalName = capitalize(camelName);\n      var checkType = function (type) {\n          if (bindings[key] === type) {\n              return key;\n          }\n          if (bindings[camelName] === type) {\n              return camelName;\n          }\n          if (bindings[PascalName] === type) {\n              return PascalName;\n          }\n      };\n      var fromConst = checkType(\"setup-const\" /* BindingTypes.SETUP_CONST */) ||\n          checkType(\"setup-reactive-const\" /* BindingTypes.SETUP_REACTIVE_CONST */);\n      if (fromConst) {\n          return fromConst;\n      }\n      var fromMaybeRef = checkType(\"setup-let\" /* BindingTypes.SETUP_LET */) ||\n          checkType(\"setup-ref\" /* BindingTypes.SETUP_REF */) ||\n          checkType(\"setup-maybe-ref\" /* BindingTypes.SETUP_MAYBE_REF */);\n      if (fromMaybeRef) {\n          return fromMaybeRef;\n      }\n  }\n  // hoist static sub-trees out\n  function genStatic(el, state) {\n      el.staticProcessed = true;\n      // Some elements (templates) need to behave differently inside of a v-pre\n      // node.  All pre nodes are static roots, so we can use this as a location to\n      // wrap a state change and reset it upon exiting the pre node.\n      var originalPreState = state.pre;\n      if (el.pre) {\n          state.pre = el.pre;\n      }\n      state.staticRenderFns.push(\"with(this){return \".concat(genElement(el, state), \"}\"));\n      state.pre = originalPreState;\n      return \"_m(\".concat(state.staticRenderFns.length - 1).concat(el.staticInFor ? ',true' : '', \")\");\n  }\n  // v-once\n  function genOnce(el, state) {\n      el.onceProcessed = true;\n      if (el.if && !el.ifProcessed) {\n          return genIf(el, state);\n      }\n      else if (el.staticInFor) {\n          var key = '';\n          var parent_1 = el.parent;\n          while (parent_1) {\n              if (parent_1.for) {\n                  key = parent_1.key;\n                  break;\n              }\n              parent_1 = parent_1.parent;\n          }\n          if (!key) {\n              state.warn(\"v-once can only be used inside v-for that is keyed. \", el.rawAttrsMap['v-once']);\n              return genElement(el, state);\n          }\n          return \"_o(\".concat(genElement(el, state), \",\").concat(state.onceId++, \",\").concat(key, \")\");\n      }\n      else {\n          return genStatic(el, state);\n      }\n  }\n  function genIf(el, state, altGen, altEmpty) {\n      el.ifProcessed = true; // avoid recursion\n      return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);\n  }\n  function genIfConditions(conditions, state, altGen, altEmpty) {\n      if (!conditions.length) {\n          return altEmpty || '_e()';\n      }\n      var condition = conditions.shift();\n      if (condition.exp) {\n          return \"(\".concat(condition.exp, \")?\").concat(genTernaryExp(condition.block), \":\").concat(genIfConditions(conditions, state, altGen, altEmpty));\n      }\n      else {\n          return \"\".concat(genTernaryExp(condition.block));\n      }\n      // v-if with v-once should generate code like (a)?_m(0):_m(1)\n      function genTernaryExp(el) {\n          return altGen\n              ? altGen(el, state)\n              : el.once\n                  ? genOnce(el, state)\n                  : genElement(el, state);\n      }\n  }\n  function genFor(el, state, altGen, altHelper) {\n      var exp = el.for;\n      var alias = el.alias;\n      var iterator1 = el.iterator1 ? \",\".concat(el.iterator1) : '';\n      var iterator2 = el.iterator2 ? \",\".concat(el.iterator2) : '';\n      if (state.maybeComponent(el) &&\n          el.tag !== 'slot' &&\n          el.tag !== 'template' &&\n          !el.key) {\n          state.warn(\"<\".concat(el.tag, \" v-for=\\\"\").concat(alias, \" in \").concat(exp, \"\\\">: component lists rendered with \") +\n              \"v-for should have explicit keys. \" +\n              \"See https://v2.vuejs.org/v2/guide/list.html#key for more info.\", el.rawAttrsMap['v-for'], true /* tip */);\n      }\n      el.forProcessed = true; // avoid recursion\n      return (\"\".concat(altHelper || '_l', \"((\").concat(exp, \"),\") +\n          \"function(\".concat(alias).concat(iterator1).concat(iterator2, \"){\") +\n          \"return \".concat((altGen || genElement)(el, state)) +\n          '})');\n  }\n  function genData(el, state) {\n      var data = '{';\n      // directives first.\n      // directives may mutate the el's other properties before they are generated.\n      var dirs = genDirectives(el, state);\n      if (dirs)\n          data += dirs + ',';\n      // key\n      if (el.key) {\n          data += \"key:\".concat(el.key, \",\");\n      }\n      // ref\n      if (el.ref) {\n          data += \"ref:\".concat(el.ref, \",\");\n      }\n      if (el.refInFor) {\n          data += \"refInFor:true,\";\n      }\n      // pre\n      if (el.pre) {\n          data += \"pre:true,\";\n      }\n      // record original tag name for components using \"is\" attribute\n      if (el.component) {\n          data += \"tag:\\\"\".concat(el.tag, \"\\\",\");\n      }\n      // module data generation functions\n      for (var i = 0; i < state.dataGenFns.length; i++) {\n          data += state.dataGenFns[i](el);\n      }\n      // attributes\n      if (el.attrs) {\n          data += \"attrs:\".concat(genProps(el.attrs), \",\");\n      }\n      // DOM props\n      if (el.props) {\n          data += \"domProps:\".concat(genProps(el.props), \",\");\n      }\n      // event handlers\n      if (el.events) {\n          data += \"\".concat(genHandlers(el.events, false), \",\");\n      }\n      if (el.nativeEvents) {\n          data += \"\".concat(genHandlers(el.nativeEvents, true), \",\");\n      }\n      // slot target\n      // only for non-scoped slots\n      if (el.slotTarget && !el.slotScope) {\n          data += \"slot:\".concat(el.slotTarget, \",\");\n      }\n      // scoped slots\n      if (el.scopedSlots) {\n          data += \"\".concat(genScopedSlots(el, el.scopedSlots, state), \",\");\n      }\n      // component v-model\n      if (el.model) {\n          data += \"model:{value:\".concat(el.model.value, \",callback:\").concat(el.model.callback, \",expression:\").concat(el.model.expression, \"},\");\n      }\n      // inline-template\n      if (el.inlineTemplate) {\n          var inlineTemplate = genInlineTemplate(el, state);\n          if (inlineTemplate) {\n              data += \"\".concat(inlineTemplate, \",\");\n          }\n      }\n      data = data.replace(/,$/, '') + '}';\n      // v-bind dynamic argument wrap\n      // v-bind with dynamic arguments must be applied using the same v-bind object\n      // merge helper so that class/style/mustUseProp attrs are handled correctly.\n      if (el.dynamicAttrs) {\n          data = \"_b(\".concat(data, \",\\\"\").concat(el.tag, \"\\\",\").concat(genProps(el.dynamicAttrs), \")\");\n      }\n      // v-bind data wrap\n      if (el.wrapData) {\n          data = el.wrapData(data);\n      }\n      // v-on data wrap\n      if (el.wrapListeners) {\n          data = el.wrapListeners(data);\n      }\n      return data;\n  }\n  function genDirectives(el, state) {\n      var dirs = el.directives;\n      if (!dirs)\n          return;\n      var res = 'directives:[';\n      var hasRuntime = false;\n      var i, l, dir, needRuntime;\n      for (i = 0, l = dirs.length; i < l; i++) {\n          dir = dirs[i];\n          needRuntime = true;\n          var gen = state.directives[dir.name];\n          if (gen) {\n              // compile-time directive that manipulates AST.\n              // returns true if it also needs a runtime counterpart.\n              needRuntime = !!gen(el, dir, state.warn);\n          }\n          if (needRuntime) {\n              hasRuntime = true;\n              res += \"{name:\\\"\".concat(dir.name, \"\\\",rawName:\\\"\").concat(dir.rawName, \"\\\"\").concat(dir.value\n                  ? \",value:(\".concat(dir.value, \"),expression:\").concat(JSON.stringify(dir.value))\n                  : '').concat(dir.arg ? \",arg:\".concat(dir.isDynamicArg ? dir.arg : \"\\\"\".concat(dir.arg, \"\\\"\")) : '').concat(dir.modifiers ? \",modifiers:\".concat(JSON.stringify(dir.modifiers)) : '', \"},\");\n          }\n      }\n      if (hasRuntime) {\n          return res.slice(0, -1) + ']';\n      }\n  }\n  function genInlineTemplate(el, state) {\n      var ast = el.children[0];\n      if ((el.children.length !== 1 || ast.type !== 1)) {\n          state.warn('Inline-template components must have exactly one child element.', { start: el.start });\n      }\n      if (ast && ast.type === 1) {\n          var inlineRenderFns = generate(ast, state.options);\n          return \"inlineTemplate:{render:function(){\".concat(inlineRenderFns.render, \"},staticRenderFns:[\").concat(inlineRenderFns.staticRenderFns\n              .map(function (code) { return \"function(){\".concat(code, \"}\"); })\n              .join(','), \"]}\");\n      }\n  }\n  function genScopedSlots(el, slots, state) {\n      // by default scoped slots are considered \"stable\", this allows child\n      // components with only scoped slots to skip forced updates from parent.\n      // but in some cases we have to bail-out of this optimization\n      // for example if the slot contains dynamic names, has v-if or v-for on them...\n      var needsForceUpdate = el.for ||\n          Object.keys(slots).some(function (key) {\n              var slot = slots[key];\n              return (slot.slotTargetDynamic || slot.if || slot.for || containsSlotChild(slot) // is passing down slot from parent which may be dynamic\n              );\n          });\n      // #9534: if a component with scoped slots is inside a conditional branch,\n      // it's possible for the same component to be reused but with different\n      // compiled slot content. To avoid that, we generate a unique key based on\n      // the generated code of all the slot contents.\n      var needsKey = !!el.if;\n      // OR when it is inside another scoped slot or v-for (the reactivity may be\n      // disconnected due to the intermediate scope variable)\n      // #9438, #9506\n      // TODO: this can be further optimized by properly analyzing in-scope bindings\n      // and skip force updating ones that do not actually use scope variables.\n      if (!needsForceUpdate) {\n          var parent_2 = el.parent;\n          while (parent_2) {\n              if ((parent_2.slotScope && parent_2.slotScope !== emptySlotScopeToken) ||\n                  parent_2.for) {\n                  needsForceUpdate = true;\n                  break;\n              }\n              if (parent_2.if) {\n                  needsKey = true;\n              }\n              parent_2 = parent_2.parent;\n          }\n      }\n      var generatedSlots = Object.keys(slots)\n          .map(function (key) { return genScopedSlot(slots[key], state); })\n          .join(',');\n      return \"scopedSlots:_u([\".concat(generatedSlots, \"]\").concat(needsForceUpdate ? \",null,true\" : \"\").concat(!needsForceUpdate && needsKey ? \",null,false,\".concat(hash(generatedSlots)) : \"\", \")\");\n  }\n  function hash(str) {\n      var hash = 5381;\n      var i = str.length;\n      while (i) {\n          hash = (hash * 33) ^ str.charCodeAt(--i);\n      }\n      return hash >>> 0;\n  }\n  function containsSlotChild(el) {\n      if (el.type === 1) {\n          if (el.tag === 'slot') {\n              return true;\n          }\n          return el.children.some(containsSlotChild);\n      }\n      return false;\n  }\n  function genScopedSlot(el, state) {\n      var isLegacySyntax = el.attrsMap['slot-scope'];\n      if (el.if && !el.ifProcessed && !isLegacySyntax) {\n          return genIf(el, state, genScopedSlot, \"null\");\n      }\n      if (el.for && !el.forProcessed) {\n          return genFor(el, state, genScopedSlot);\n      }\n      var slotScope = el.slotScope === emptySlotScopeToken ? \"\" : String(el.slotScope);\n      var fn = \"function(\".concat(slotScope, \"){\") +\n          \"return \".concat(el.tag === 'template'\n              ? el.if && isLegacySyntax\n                  ? \"(\".concat(el.if, \")?\").concat(genChildren(el, state) || 'undefined', \":undefined\")\n                  : genChildren(el, state) || 'undefined'\n              : genElement(el, state), \"}\");\n      // reverse proxy v-slot without scope on this.$slots\n      var reverseProxy = slotScope ? \"\" : \",proxy:true\";\n      return \"{key:\".concat(el.slotTarget || \"\\\"default\\\"\", \",fn:\").concat(fn).concat(reverseProxy, \"}\");\n  }\n  function genChildren(el, state, checkSkip, altGenElement, altGenNode) {\n      var children = el.children;\n      if (children.length) {\n          var el_1 = children[0];\n          // optimize single v-for\n          if (children.length === 1 &&\n              el_1.for &&\n              el_1.tag !== 'template' &&\n              el_1.tag !== 'slot') {\n              var normalizationType_1 = checkSkip\n                  ? state.maybeComponent(el_1)\n                      ? \",1\"\n                      : \",0\"\n                  : \"\";\n              return \"\".concat((altGenElement || genElement)(el_1, state)).concat(normalizationType_1);\n          }\n          var normalizationType = checkSkip\n              ? getNormalizationType(children, state.maybeComponent)\n              : 0;\n          var gen_1 = altGenNode || genNode;\n          return \"[\".concat(children.map(function (c) { return gen_1(c, state); }).join(','), \"]\").concat(normalizationType ? \",\".concat(normalizationType) : '');\n      }\n  }\n  // determine the normalization needed for the children array.\n  // 0: no normalization needed\n  // 1: simple normalization needed (possible 1-level deep nested array)\n  // 2: full normalization needed\n  function getNormalizationType(children, maybeComponent) {\n      var res = 0;\n      for (var i = 0; i < children.length; i++) {\n          var el = children[i];\n          if (el.type !== 1) {\n              continue;\n          }\n          if (needsNormalization(el) ||\n              (el.ifConditions &&\n                  el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n              res = 2;\n              break;\n          }\n          if (maybeComponent(el) ||\n              (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n              res = 1;\n          }\n      }\n      return res;\n  }\n  function needsNormalization(el) {\n      return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';\n  }\n  function genNode(node, state) {\n      if (node.type === 1) {\n          return genElement(node, state);\n      }\n      else if (node.type === 3 && node.isComment) {\n          return genComment(node);\n      }\n      else {\n          return genText(node);\n      }\n  }\n  function genText(text) {\n      return \"_v(\".concat(text.type === 2\n          ? text.expression // no need for () because already wrapped in _s()\n          : transformSpecialNewlines(JSON.stringify(text.text)), \")\");\n  }\n  function genComment(comment) {\n      return \"_e(\".concat(JSON.stringify(comment.text), \")\");\n  }\n  function genSlot(el, state) {\n      var slotName = el.slotName || '\"default\"';\n      var children = genChildren(el, state);\n      var res = \"_t(\".concat(slotName).concat(children ? \",function(){return \".concat(children, \"}\") : '');\n      var attrs = el.attrs || el.dynamicAttrs\n          ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({\n              // slot props are camelized\n              name: camelize(attr.name),\n              value: attr.value,\n              dynamic: attr.dynamic\n          }); }))\n          : null;\n      var bind = el.attrsMap['v-bind'];\n      if ((attrs || bind) && !children) {\n          res += \",null\";\n      }\n      if (attrs) {\n          res += \",\".concat(attrs);\n      }\n      if (bind) {\n          res += \"\".concat(attrs ? '' : ',null', \",\").concat(bind);\n      }\n      return res + ')';\n  }\n  // componentName is el.component, take it as argument to shun flow's pessimistic refinement\n  function genComponent(componentName, el, state) {\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      return \"_c(\".concat(componentName, \",\").concat(genData(el, state)).concat(children ? \",\".concat(children) : '', \")\");\n  }\n  function genProps(props) {\n      var staticProps = \"\";\n      var dynamicProps = \"\";\n      for (var i = 0; i < props.length; i++) {\n          var prop = props[i];\n          var value = transformSpecialNewlines(prop.value);\n          if (prop.dynamic) {\n              dynamicProps += \"\".concat(prop.name, \",\").concat(value, \",\");\n          }\n          else {\n              staticProps += \"\\\"\".concat(prop.name, \"\\\":\").concat(value, \",\");\n          }\n      }\n      staticProps = \"{\".concat(staticProps.slice(0, -1), \"}\");\n      if (dynamicProps) {\n          return \"_d(\".concat(staticProps, \",[\").concat(dynamicProps.slice(0, -1), \"])\");\n      }\n      else {\n          return staticProps;\n      }\n  }\n  // #3895, #4268\n  function transformSpecialNewlines(text) {\n      return text.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\n  }\n\n  // these keywords should not appear inside expressions, but operators like\n  // typeof, instanceof and in are allowed\n  var prohibitedKeywordRE = new RegExp('\\\\b' +\n      ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n          'super,throw,while,yield,delete,export,import,return,switch,default,' +\n          'extends,finally,continue,debugger,function,arguments')\n          .split(',')\n          .join('\\\\b|\\\\b') +\n      '\\\\b');\n  // these unary operators should not be used as property/method names\n  var unaryOperatorsRE = new RegExp('\\\\b' +\n      'delete,typeof,void'.split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') +\n      '\\\\s*\\\\([^\\\\)]*\\\\)');\n  // strip strings in expressions\n  var stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n  // detect problematic expressions in a template\n  function detectErrors(ast, warn) {\n      if (ast) {\n          checkNode(ast, warn);\n      }\n  }\n  function checkNode(node, warn) {\n      if (node.type === 1) {\n          for (var name_1 in node.attrsMap) {\n              if (dirRE.test(name_1)) {\n                  var value = node.attrsMap[name_1];\n                  if (value) {\n                      var range = node.rawAttrsMap[name_1];\n                      if (name_1 === 'v-for') {\n                          checkFor(node, \"v-for=\\\"\".concat(value, \"\\\"\"), warn, range);\n                      }\n                      else if (name_1 === 'v-slot' || name_1[0] === '#') {\n                          checkFunctionParameterExpression(value, \"\".concat(name_1, \"=\\\"\").concat(value, \"\\\"\"), warn, range);\n                      }\n                      else if (onRE.test(name_1)) {\n                          checkEvent(value, \"\".concat(name_1, \"=\\\"\").concat(value, \"\\\"\"), warn, range);\n                      }\n                      else {\n                          checkExpression(value, \"\".concat(name_1, \"=\\\"\").concat(value, \"\\\"\"), warn, range);\n                      }\n                  }\n              }\n          }\n          if (node.children) {\n              for (var i = 0; i < node.children.length; i++) {\n                  checkNode(node.children[i], warn);\n              }\n          }\n      }\n      else if (node.type === 2) {\n          checkExpression(node.expression, node.text, warn, node);\n      }\n  }\n  function checkEvent(exp, text, warn, range) {\n      var stripped = exp.replace(stripStringRE, '');\n      var keywordMatch = stripped.match(unaryOperatorsRE);\n      if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {\n          warn(\"avoid using JavaScript unary operator as property name: \" +\n              \"\\\"\".concat(keywordMatch[0], \"\\\" in expression \").concat(text.trim()), range);\n      }\n      checkExpression(exp, text, warn, range);\n  }\n  function checkFor(node, text, warn, range) {\n      checkExpression(node.for || '', text, warn, range);\n      checkIdentifier(node.alias, 'v-for alias', text, warn, range);\n      checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);\n      checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);\n  }\n  function checkIdentifier(ident, type, text, warn, range) {\n      if (typeof ident === 'string') {\n          try {\n              new Function(\"var \".concat(ident, \"=_\"));\n          }\n          catch (e) {\n              warn(\"invalid \".concat(type, \" \\\"\").concat(ident, \"\\\" in expression: \").concat(text.trim()), range);\n          }\n      }\n  }\n  function checkExpression(exp, text, warn, range) {\n      try {\n          new Function(\"return \".concat(exp));\n      }\n      catch (e) {\n          var keywordMatch = exp\n              .replace(stripStringRE, '')\n              .match(prohibitedKeywordRE);\n          if (keywordMatch) {\n              warn(\"avoid using JavaScript keyword as property name: \" +\n                  \"\\\"\".concat(keywordMatch[0], \"\\\"\\n  Raw expression: \").concat(text.trim()), range);\n          }\n          else {\n              warn(\"invalid expression: \".concat(e.message, \" in\\n\\n\") +\n                  \"    \".concat(exp, \"\\n\\n\") +\n                  \"  Raw expression: \".concat(text.trim(), \"\\n\"), range);\n          }\n      }\n  }\n  function checkFunctionParameterExpression(exp, text, warn, range) {\n      try {\n          new Function(exp, '');\n      }\n      catch (e) {\n          warn(\"invalid function parameter expression: \".concat(e.message, \" in\\n\\n\") +\n              \"    \".concat(exp, \"\\n\\n\") +\n              \"  Raw expression: \".concat(text.trim(), \"\\n\"), range);\n      }\n  }\n\n  var range = 2;\n  function generateCodeFrame(source, start, end) {\n      if (start === void 0) { start = 0; }\n      if (end === void 0) { end = source.length; }\n      var lines = source.split(/\\r?\\n/);\n      var count = 0;\n      var res = [];\n      for (var i = 0; i < lines.length; i++) {\n          count += lines[i].length + 1;\n          if (count >= start) {\n              for (var j = i - range; j <= i + range || end > count; j++) {\n                  if (j < 0 || j >= lines.length)\n                      continue;\n                  res.push(\"\".concat(j + 1).concat(repeat(\" \", 3 - String(j + 1).length), \"|  \").concat(lines[j]));\n                  var lineLength = lines[j].length;\n                  if (j === i) {\n                      // push underline\n                      var pad = start - (count - lineLength) + 1;\n                      var length_1 = end > count ? lineLength - pad : end - start;\n                      res.push(\"   |  \" + repeat(\" \", pad) + repeat(\"^\", length_1));\n                  }\n                  else if (j > i) {\n                      if (end > count) {\n                          var length_2 = Math.min(end - count, lineLength);\n                          res.push(\"   |  \" + repeat(\"^\", length_2));\n                      }\n                      count += lineLength + 1;\n                  }\n              }\n              break;\n          }\n      }\n      return res.join('\\n');\n  }\n  function repeat(str, n) {\n      var result = '';\n      if (n > 0) {\n          // eslint-disable-next-line no-constant-condition\n          while (true) {\n              // eslint-disable-line\n              if (n & 1)\n                  result += str;\n              n >>>= 1;\n              if (n <= 0)\n                  break;\n              str += str;\n          }\n      }\n      return result;\n  }\n\n  function createFunction(code, errors) {\n      try {\n          return new Function(code);\n      }\n      catch (err) {\n          errors.push({ err: err, code: code });\n          return noop;\n      }\n  }\n  function createCompileToFunctionFn(compile) {\n      var cache = Object.create(null);\n      return function compileToFunctions(template, options, vm) {\n          options = extend({}, options);\n          var warn = options.warn || warn$2;\n          delete options.warn;\n          /* istanbul ignore if */\n          {\n              // detect possible CSP restriction\n              try {\n                  new Function('return 1');\n              }\n              catch (e) {\n                  if (e.toString().match(/unsafe-eval|CSP/)) {\n                      warn('It seems you are using the standalone build of Vue.js in an ' +\n                          'environment with Content Security Policy that prohibits unsafe-eval. ' +\n                          'The template compiler cannot work in this environment. Consider ' +\n                          'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n                          'templates into render functions.');\n                  }\n              }\n          }\n          // check cache\n          var key = options.delimiters\n              ? String(options.delimiters) + template\n              : template;\n          if (cache[key]) {\n              return cache[key];\n          }\n          // compile\n          var compiled = compile(template, options);\n          // check compilation errors/tips\n          {\n              if (compiled.errors && compiled.errors.length) {\n                  if (options.outputSourceRange) {\n                      compiled.errors.forEach(function (e) {\n                          warn(\"Error compiling template:\\n\\n\".concat(e.msg, \"\\n\\n\") +\n                              generateCodeFrame(template, e.start, e.end), vm);\n                      });\n                  }\n                  else {\n                      warn(\"Error compiling template:\\n\\n\".concat(template, \"\\n\\n\") +\n                          compiled.errors.map(function (e) { return \"- \".concat(e); }).join('\\n') +\n                          '\\n', vm);\n                  }\n              }\n              if (compiled.tips && compiled.tips.length) {\n                  if (options.outputSourceRange) {\n                      compiled.tips.forEach(function (e) { return tip(e.msg, vm); });\n                  }\n                  else {\n                      compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n                  }\n              }\n          }\n          // turn code into functions\n          var res = {};\n          var fnGenErrors = [];\n          res.render = createFunction(compiled.render, fnGenErrors);\n          res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n              return createFunction(code, fnGenErrors);\n          });\n          // check function generation errors.\n          // this should only happen if there is a bug in the compiler itself.\n          // mostly for codegen development use\n          /* istanbul ignore if */\n          {\n              if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n                  warn(\"Failed to generate render function:\\n\\n\" +\n                      fnGenErrors\n                          .map(function (_a) {\n                          var err = _a.err, code = _a.code;\n                          return \"\".concat(err.toString(), \" in\\n\\n\").concat(code, \"\\n\");\n                      })\n                          .join('\\n'), vm);\n              }\n          }\n          return (cache[key] = res);\n      };\n  }\n\n  function createCompilerCreator(baseCompile) {\n      return function createCompiler(baseOptions) {\n          function compile(template, options) {\n              var finalOptions = Object.create(baseOptions);\n              var errors = [];\n              var tips = [];\n              var warn = function (msg, range, tip) {\n                  (tip ? tips : errors).push(msg);\n              };\n              if (options) {\n                  if (options.outputSourceRange) {\n                      // $flow-disable-line\n                      var leadingSpaceLength_1 = template.match(/^\\s*/)[0].length;\n                      warn = function (msg, range, tip) {\n                          var data = typeof msg === 'string' ? { msg: msg } : msg;\n                          if (range) {\n                              if (range.start != null) {\n                                  data.start = range.start + leadingSpaceLength_1;\n                              }\n                              if (range.end != null) {\n                                  data.end = range.end + leadingSpaceLength_1;\n                              }\n                          }\n                          (tip ? tips : errors).push(data);\n                      };\n                  }\n                  // merge custom modules\n                  if (options.modules) {\n                      finalOptions.modules = (baseOptions.modules || []).concat(options.modules);\n                  }\n                  // merge custom directives\n                  if (options.directives) {\n                      finalOptions.directives = extend(Object.create(baseOptions.directives || null), options.directives);\n                  }\n                  // copy other options\n                  for (var key in options) {\n                      if (key !== 'modules' && key !== 'directives') {\n                          finalOptions[key] = options[key];\n                      }\n                  }\n              }\n              finalOptions.warn = warn;\n              var compiled = baseCompile(template.trim(), finalOptions);\n              {\n                  detectErrors(compiled.ast, warn);\n              }\n              compiled.errors = errors;\n              compiled.tips = tips;\n              return compiled;\n          }\n          return {\n              compile: compile,\n              compileToFunctions: createCompileToFunctionFn(compile)\n          };\n      };\n  }\n\n  // `createCompilerCreator` allows creating compilers that use alternative\n  // parser/optimizer/codegen, e.g the SSR optimizing compiler.\n  // Here we just export a default compiler using the default parts.\n  var createCompiler = createCompilerCreator(function baseCompile(template, options) {\n      var ast = parse(template.trim(), options);\n      if (options.optimize !== false) {\n          optimize(ast, options);\n      }\n      var code = generate(ast, options);\n      return {\n          ast: ast,\n          render: code.render,\n          staticRenderFns: code.staticRenderFns\n      };\n  });\n\n  var _a = createCompiler(baseOptions), compileToFunctions = _a.compileToFunctions;\n\n  // check whether current browser encodes a char inside attribute values\n  var div;\n  function getShouldDecode(href) {\n      div = div || document.createElement('div');\n      div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n      return div.innerHTML.indexOf('&#10;') > 0;\n  }\n  // #3663: IE encodes newlines inside attribute values while other browsers don't\n  var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n  // #6828: chrome encodes content in a[href]\n  var shouldDecodeNewlinesForHref = inBrowser\n      ? getShouldDecode(true)\n      : false;\n\n  var idToTemplate = cached(function (id) {\n      var el = query(id);\n      return el && el.innerHTML;\n  });\n  var mount = Vue.prototype.$mount;\n  Vue.prototype.$mount = function (el, hydrating) {\n      el = el && query(el);\n      /* istanbul ignore if */\n      if (el === document.body || el === document.documentElement) {\n          warn$2(\"Do not mount Vue to <html> or <body> - mount to normal elements instead.\");\n          return this;\n      }\n      var options = this.$options;\n      // resolve template/el and convert to render function\n      if (!options.render) {\n          var template = options.template;\n          if (template) {\n              if (typeof template === 'string') {\n                  if (template.charAt(0) === '#') {\n                      template = idToTemplate(template);\n                      /* istanbul ignore if */\n                      if (!template) {\n                          warn$2(\"Template element not found or is empty: \".concat(options.template), this);\n                      }\n                  }\n              }\n              else if (template.nodeType) {\n                  template = template.innerHTML;\n              }\n              else {\n                  {\n                      warn$2('invalid template option:' + template, this);\n                  }\n                  return this;\n              }\n          }\n          else if (el) {\n              // @ts-expect-error\n              template = getOuterHTML(el);\n          }\n          if (template) {\n              /* istanbul ignore if */\n              if (config.performance && mark) {\n                  mark('compile');\n              }\n              var _a = compileToFunctions(template, {\n                  outputSourceRange: true,\n                  shouldDecodeNewlines: shouldDecodeNewlines,\n                  shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n                  delimiters: options.delimiters,\n                  comments: options.comments\n              }, this), render = _a.render, staticRenderFns = _a.staticRenderFns;\n              options.render = render;\n              options.staticRenderFns = staticRenderFns;\n              /* istanbul ignore if */\n              if (config.performance && mark) {\n                  mark('compile end');\n                  measure(\"vue \".concat(this._name, \" compile\"), 'compile', 'compile end');\n              }\n          }\n      }\n      return mount.call(this, el, hydrating);\n  };\n  /**\n   * Get outerHTML of elements, taking care\n   * of SVG elements in IE as well.\n   */\n  function getOuterHTML(el) {\n      if (el.outerHTML) {\n          return el.outerHTML;\n      }\n      else {\n          var container = document.createElement('div');\n          container.appendChild(el.cloneNode(true));\n          return container.innerHTML;\n      }\n  }\n  Vue.compile = compileToFunctions;\n\n  // export type EffectScheduler = (...args: any[]) => any\n  /**\n   * @internal since we are not exposing this in Vue 2, it's used only for\n   * internal testing.\n   */\n  function effect(fn, scheduler) {\n      var watcher = new Watcher(currentInstance, fn, noop, {\n          sync: true\n      });\n      if (scheduler) {\n          watcher.update = function () {\n              scheduler(function () { return watcher.run(); });\n          };\n      }\n  }\n\n  extend(Vue, vca);\n  Vue.effect = effect;\n\n  return Vue;\n\n}));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15), __webpack_require__(0).setImmediate))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 5 */
/***/ function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_router__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_EditDog_vue__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_EditDog_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__components_EditDog_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_ListDog_vue__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_ListDog_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__components_ListDog_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_CreateDog_vue__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_CreateDog_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__components_CreateDog_vue__);\n\n\n\n// Importa tus componentes de Vue que usarás como vistas en las rutas\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_0_vue___default.a.use(__WEBPACK_IMPORTED_MODULE_1_vue_router__[\"a\" /* default */]);\n\nvar routes = [\n  {\n    path: '/perros/add',\n    name: 'createdog',\n    component: __WEBPACK_IMPORTED_MODULE_4__components_CreateDog_vue___default.a\n  },\n  {\n    path: '/perros',\n    component: __WEBPACK_IMPORTED_MODULE_3__components_ListDog_vue___default.a\n  },\n  {\n    path: '/perros/:id',\n    name: 'editdog',\n    component: __WEBPACK_IMPORTED_MODULE_2__components_EditDog_vue___default.a\n  },\n  \n];\n\nvar router = new __WEBPACK_IMPORTED_MODULE_1_vue_router__[\"a\" /* default */]({\n  mode: 'history',\n  routes: routes\n});\n\n/* harmony default export */ exports[\"a\"] = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL3JvdXRlci5qcz82NGY3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBWdWVSb3V0ZXIgZnJvbSAndnVlLXJvdXRlcic7XG5cbi8vIEltcG9ydGEgdHVzIGNvbXBvbmVudGVzIGRlIFZ1ZSBxdWUgdXNhcsOhcyBjb21vIHZpc3RhcyBlbiBsYXMgcnV0YXNcbmltcG9ydCBFZGl0RG9nIGZyb20gJy4vY29tcG9uZW50cy9FZGl0RG9nLnZ1ZSc7XG5pbXBvcnQgTGlzdERvZyBmcm9tICcuL2NvbXBvbmVudHMvTGlzdERvZy52dWUnO1xuaW1wb3J0IENyZWF0ZURvZyBmcm9tICcuL2NvbXBvbmVudHMvQ3JlYXRlRG9nLnZ1ZSc7XG5cblZ1ZS51c2UoVnVlUm91dGVyKTtcblxuY29uc3Qgcm91dGVzID0gW1xuICB7XG4gICAgcGF0aDogJy9wZXJyb3MvYWRkJyxcbiAgICBuYW1lOiAnY3JlYXRlZG9nJyxcbiAgICBjb21wb25lbnQ6IENyZWF0ZURvZ1xuICB9LFxuICB7XG4gICAgcGF0aDogJy9wZXJyb3MnLFxuICAgIGNvbXBvbmVudDogTGlzdERvZ1xuICB9LFxuICB7XG4gICAgcGF0aDogJy9wZXJyb3MvOmlkJyxcbiAgICBuYW1lOiAnZWRpdGRvZycsXG4gICAgY29tcG9uZW50OiBFZGl0RG9nXG4gIH0sXG4gIFxuXTtcblxuY29uc3Qgcm91dGVyID0gbmV3IFZ1ZVJvdXRlcih7XG4gIG1vZGU6ICdoaXN0b3J5JyxcbiAgcm91dGVzXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJlc291cmNlcy9hc3NldHMvanMvcm91dGVyLmpzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ exports[\"default\"] = {\n  data: function data() {\n    return {\n      csrfToken: '',\n      formAction: '',\n      mostrarNotificacion: false,\n      tipoNotificacion: '',\n      mensajeNotificacion: '',\n      colors: ['negro', 'blanco', 'marrón', 'gris'],\n      colorSelected:null,\n      sizeOptions: [\n        { label: 'Grande (+30kg)', value: 'big' },\n        { label: 'Mediano (20-30kg)', value: 'medium' },\n        { label: 'Pequeño (10-20kg)', value: 'small' },\n        { label: 'Muy pequeño (-10kg)', value: 'smaller' }\n      ],\n      perro: {\n        race: '',\n        name: '',\n        size: '',\n        hair_color: ''\n      },\n      imageFile: null\n      \n    };\n  },\n  mounted: function mounted() {\n    // Obtener el token CSRF del elemento meta en el DOM\n    this.csrfToken = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\n\n    // Establecer la URL de acción del formulario\n    this.formAction = \"/add\";\n  },\n  methods: {\n    actualizarPerro: function actualizarPerro(event) {\n      var this$1 = this;\n\n      event.preventDefault();\n      var formData = new FormData();\n      formData.append('image', this.imageFile);\n      formData.append('perro', JSON.stringify(this.perro));\n      \n\n      // Realizar la solicitud PUT para actualizar el perro\n      fetch(this.formAction, {\n        method: 'POST',\n        headers: {\n          'X-CSRF-TOKEN': this.csrfToken,\n        },\n        body: formData,\n      })\n        .then(function (response) { return response.json(); })\n        .then(function (data) {\n          // Lógica para manejar la respuesta del servidor\n          console.log(data);\n          // Mostrar la notificación de éxito\n          this$1.mensajeNotificacion = data.message;\n          this$1.mostrarNotificacion = true;\n          this$1.tipoNotificacion = 'success';\n\n          // Ocultar la notificación después de 3 segundos\n          setTimeout(function () {\n            this$1.mostrarNotificacion = false;\n          }, 3000);\n        })\n        .catch(function (error) {\n          // Lógica para manejar el error de la solicitud\n          console.error(error);\n          // Mostrar la notificación de error\n          this$1.mensajeNotificacion = 'Hubo un error al actualizar el perro.';\n          this$1.mostrarNotificacion = true;\n          this$1.tipoNotificacion = 'error';\n\n          // Ocultar la notificación después de 3 segundos\n          setTimeout(function () {\n            this$1.mostrarNotificacion = false;\n          }, 3000);\n        });\n    },\n    handleImageChange: function handleImageChange(event) {\n      this.imageFile = event.target.files[0];\n    },\n    updateColorIndicator: function updateColorIndicator() {\n      // Realizar acciones adicionales según sea necesario\n      console.log('Color seleccionado:', this.perro.hair_color);\n      this.colorSelected=this.perro.hair_color;\n    }\n  },\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvQ3JlYXRlRG9nLnZ1ZT84M2NiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cblxuZXhwb3J0IGRlZmF1bHQge1xuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjc3JmVG9rZW46ICcnLFxuICAgICAgZm9ybUFjdGlvbjogJycsXG4gICAgICBtb3N0cmFyTm90aWZpY2FjaW9uOiBmYWxzZSxcbiAgICAgIHRpcG9Ob3RpZmljYWNpb246ICcnLFxuICAgICAgbWVuc2FqZU5vdGlmaWNhY2lvbjogJycsXG4gICAgICBjb2xvcnM6IFsnbmVncm8nLCAnYmxhbmNvJywgJ21hcnLDs24nLCAnZ3JpcyddLFxuICAgICAgY29sb3JTZWxlY3RlZDpudWxsLFxuICAgICAgc2l6ZU9wdGlvbnM6IFtcbiAgICAgICAgeyBsYWJlbDogJ0dyYW5kZSAoKzMwa2cpJywgdmFsdWU6ICdiaWcnIH0sXG4gICAgICAgIHsgbGFiZWw6ICdNZWRpYW5vICgyMC0zMGtnKScsIHZhbHVlOiAnbWVkaXVtJyB9LFxuICAgICAgICB7IGxhYmVsOiAnUGVxdWXDsW8gKDEwLTIwa2cpJywgdmFsdWU6ICdzbWFsbCcgfSxcbiAgICAgICAgeyBsYWJlbDogJ011eSBwZXF1ZcOxbyAoLTEwa2cpJywgdmFsdWU6ICdzbWFsbGVyJyB9XG4gICAgICBdLFxuICAgICAgcGVycm86IHtcbiAgICAgICAgcmFjZTogJycsXG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgICBzaXplOiAnJyxcbiAgICAgICAgaGFpcl9jb2xvcjogJydcbiAgICAgIH0sXG4gICAgICBpbWFnZUZpbGU6IG51bGxcbiAgICAgIFxuICAgIH07XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgLy8gT2J0ZW5lciBlbCB0b2tlbiBDU1JGIGRlbCBlbGVtZW50byBtZXRhIGVuIGVsIERPTVxuICAgIHRoaXMuY3NyZlRva2VuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpLmdldEF0dHJpYnV0ZSgnY29udGVudCcpO1xuXG4gICAgLy8gRXN0YWJsZWNlciBsYSBVUkwgZGUgYWNjacOzbiBkZWwgZm9ybXVsYXJpb1xuICAgIHRoaXMuZm9ybUFjdGlvbiA9IGAvYWRkYDtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGFjdHVhbGl6YXJQZXJybyhldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ltYWdlJywgdGhpcy5pbWFnZUZpbGUpO1xuICAgICAgZm9ybURhdGEuYXBwZW5kKCdwZXJybycsIEpTT04uc3RyaW5naWZ5KHRoaXMucGVycm8pKTtcbiAgICAgIFxuXG4gICAgICAvLyBSZWFsaXphciBsYSBzb2xpY2l0dWQgUFVUIHBhcmEgYWN0dWFsaXphciBlbCBwZXJyb1xuICAgICAgZmV0Y2godGhpcy5mb3JtQWN0aW9uLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ1gtQ1NSRi1UT0tFTic6IHRoaXMuY3NyZlRva2VuLFxuICAgICAgICB9LFxuICAgICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICAgIH0pXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgICAgLy8gTMOzZ2ljYSBwYXJhIG1hbmVqYXIgbGEgcmVzcHVlc3RhIGRlbCBzZXJ2aWRvclxuICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgIC8vIE1vc3RyYXIgbGEgbm90aWZpY2FjacOzbiBkZSDDqXhpdG9cbiAgICAgICAgICB0aGlzLm1lbnNhamVOb3RpZmljYWNpb24gPSBkYXRhLm1lc3NhZ2U7XG4gICAgICAgICAgdGhpcy5tb3N0cmFyTm90aWZpY2FjaW9uID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnRpcG9Ob3RpZmljYWNpb24gPSAnc3VjY2Vzcyc7XG5cbiAgICAgICAgICAvLyBPY3VsdGFyIGxhIG5vdGlmaWNhY2nDs24gZGVzcHXDqXMgZGUgMyBzZWd1bmRvc1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tb3N0cmFyTm90aWZpY2FjaW9uID0gZmFsc2U7XG4gICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgLy8gTMOzZ2ljYSBwYXJhIG1hbmVqYXIgZWwgZXJyb3IgZGUgbGEgc29saWNpdHVkXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgLy8gTW9zdHJhciBsYSBub3RpZmljYWNpw7NuIGRlIGVycm9yXG4gICAgICAgICAgdGhpcy5tZW5zYWplTm90aWZpY2FjaW9uID0gJ0h1Ym8gdW4gZXJyb3IgYWwgYWN0dWFsaXphciBlbCBwZXJyby4nO1xuICAgICAgICAgIHRoaXMubW9zdHJhck5vdGlmaWNhY2lvbiA9IHRydWU7XG4gICAgICAgICAgdGhpcy50aXBvTm90aWZpY2FjaW9uID0gJ2Vycm9yJztcblxuICAgICAgICAgIC8vIE9jdWx0YXIgbGEgbm90aWZpY2FjacOzbiBkZXNwdcOpcyBkZSAzIHNlZ3VuZG9zXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1vc3RyYXJOb3RpZmljYWNpb24gPSBmYWxzZTtcbiAgICAgICAgICB9LCAzMDAwKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBoYW5kbGVJbWFnZUNoYW5nZShldmVudCkge1xuICAgICAgdGhpcy5pbWFnZUZpbGUgPSBldmVudC50YXJnZXQuZmlsZXNbMF07XG4gICAgfSxcbiAgICB1cGRhdGVDb2xvckluZGljYXRvcigpIHtcbiAgICAgIC8vIFJlYWxpemFyIGFjY2lvbmVzIGFkaWNpb25hbGVzIHNlZ8O6biBzZWEgbmVjZXNhcmlvXG4gICAgICBjb25zb2xlLmxvZygnQ29sb3Igc2VsZWNjaW9uYWRvOicsIHRoaXMucGVycm8uaGFpcl9jb2xvcik7XG4gICAgICB0aGlzLmNvbG9yU2VsZWN0ZWQ9dGhpcy5wZXJyby5oYWlyX2NvbG9yO1xuICAgIH1cbiAgfSxcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL0NyZWF0ZURvZy52dWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ exports[\"default\"] = {\n  props: ['perro'],\n  data: function data() {\n    return {\n      csrfToken: '',\n      formAction: '',\n      mostrarNotificacion: false,\n      tipoNotificacion: '',\n      mensajeNotificacion: '',\n      colors: ['negro', 'blanco', 'marrón', 'gris'],\n      colorSelected:this.perro.hair_color,\n      sizeOptions: [\n        { label: 'Grande (+30kg)', value: 'big' },\n        { label: 'Mediano (20-30kg)', value: 'medium' },\n        { label: 'Pequeño (10-20kg)', value: 'small' },\n        { label: 'Muy pequeño (-10kg)', value: 'smaller' }\n      ],\n      imageFile: null\n      \n    };\n  },\n  mounted: function mounted() {\n    // Obtener el token CSRF del elemento meta en el DOM\n    this.csrfToken = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\n\n    // Establecer la URL de acción del formulario\n    this.formAction = \"/perros/\" + (this.perro.id);\n  },\n  methods: {\n    actualizarPerro: function actualizarPerro(event) {\n      var this$1 = this;\n\n      event.preventDefault();\n      var formData = new FormData();\n      formData.append('image', this.imageFile);\n      formData.append('perro', JSON.stringify(this.perro));\n\n      // Realizar la solicitud PUT para actualizar el perro\n      fetch(this.formAction, {\n        method: 'POST',\n        headers: {\n          'X-CSRF-TOKEN': this.csrfToken,\n        },\n        body: formData,\n      })\n        .then(function (response) { return response.json(); })\n        .then(function (data) {\n          // Lógica para manejar la respuesta del servidor\n          console.log(data);\n          // Mostrar la notificación de éxito\n          this$1.mensajeNotificacion = data.message;\n          this$1.tipoNotificacion = 'success';\n          this$1.mostrarNotificacion = true;\n          \n\n          // Ocultar la notificación después de 3 segundos\n          setTimeout(function () {\n            this$1.mostrarNotificacion = false;\n          }, 3000);\n        })\n        .catch(function (error) {\n          // Lógica para manejar el error de la solicitud\n          console.error(error);\n          // Mostrar la notificación de error\n          this$1.mensajeNotificacion = 'Hubo un error al actualizar el perro.';\n          this$1.tipoNotificacion = 'error';\n          this$1.mostrarNotificacion = true;\n          \n\n          // Ocultar la notificación después de 3 segundos\n          setTimeout(function () {\n            this$1.mostrarNotificacion = false;\n          }, 3000);\n        });\n    },\n    handleImageChange: function handleImageChange(event) {\n      this.imageFile = event.target.files[0];\n    },\n    updateColorIndicator: function updateColorIndicator() {\n      // Realizar acciones adicionales según sea necesario\n      console.log('Color seleccionado:', this.perro.hair_color);\n      this.colorSelected=this.perro.hair_color;\n    },\n\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvRWRpdERvZy52dWU/YTA4NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cblxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczogWydwZXJybyddLFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjc3JmVG9rZW46ICcnLFxuICAgICAgZm9ybUFjdGlvbjogJycsXG4gICAgICBtb3N0cmFyTm90aWZpY2FjaW9uOiBmYWxzZSxcbiAgICAgIHRpcG9Ob3RpZmljYWNpb246ICcnLFxuICAgICAgbWVuc2FqZU5vdGlmaWNhY2lvbjogJycsXG4gICAgICBjb2xvcnM6IFsnbmVncm8nLCAnYmxhbmNvJywgJ21hcnLDs24nLCAnZ3JpcyddLFxuICAgICAgY29sb3JTZWxlY3RlZDp0aGlzLnBlcnJvLmhhaXJfY29sb3IsXG4gICAgICBzaXplT3B0aW9uczogW1xuICAgICAgICB7IGxhYmVsOiAnR3JhbmRlICgrMzBrZyknLCB2YWx1ZTogJ2JpZycgfSxcbiAgICAgICAgeyBsYWJlbDogJ01lZGlhbm8gKDIwLTMwa2cpJywgdmFsdWU6ICdtZWRpdW0nIH0sXG4gICAgICAgIHsgbGFiZWw6ICdQZXF1ZcOxbyAoMTAtMjBrZyknLCB2YWx1ZTogJ3NtYWxsJyB9LFxuICAgICAgICB7IGxhYmVsOiAnTXV5IHBlcXVlw7FvICgtMTBrZyknLCB2YWx1ZTogJ3NtYWxsZXInIH1cbiAgICAgIF0sXG4gICAgICBpbWFnZUZpbGU6IG51bGxcbiAgICAgIFxuICAgIH07XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgLy8gT2J0ZW5lciBlbCB0b2tlbiBDU1JGIGRlbCBlbGVtZW50byBtZXRhIGVuIGVsIERPTVxuICAgIHRoaXMuY3NyZlRva2VuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpLmdldEF0dHJpYnV0ZSgnY29udGVudCcpO1xuXG4gICAgLy8gRXN0YWJsZWNlciBsYSBVUkwgZGUgYWNjacOzbiBkZWwgZm9ybXVsYXJpb1xuICAgIHRoaXMuZm9ybUFjdGlvbiA9IGAvcGVycm9zLyR7dGhpcy5wZXJyby5pZH1gO1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYWN0dWFsaXphclBlcnJvKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnaW1hZ2UnLCB0aGlzLmltYWdlRmlsZSk7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoJ3BlcnJvJywgSlNPTi5zdHJpbmdpZnkodGhpcy5wZXJybykpO1xuXG4gICAgICAvLyBSZWFsaXphciBsYSBzb2xpY2l0dWQgUFVUIHBhcmEgYWN0dWFsaXphciBlbCBwZXJyb1xuICAgICAgZmV0Y2godGhpcy5mb3JtQWN0aW9uLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ1gtQ1NSRi1UT0tFTic6IHRoaXMuY3NyZlRva2VuLFxuICAgICAgICB9LFxuICAgICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICAgIH0pXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgICAgLy8gTMOzZ2ljYSBwYXJhIG1hbmVqYXIgbGEgcmVzcHVlc3RhIGRlbCBzZXJ2aWRvclxuICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgIC8vIE1vc3RyYXIgbGEgbm90aWZpY2FjacOzbiBkZSDDqXhpdG9cbiAgICAgICAgICB0aGlzLm1lbnNhamVOb3RpZmljYWNpb24gPSBkYXRhLm1lc3NhZ2U7XG4gICAgICAgICAgdGhpcy50aXBvTm90aWZpY2FjaW9uID0gJ3N1Y2Nlc3MnO1xuICAgICAgICAgIHRoaXMubW9zdHJhck5vdGlmaWNhY2lvbiA9IHRydWU7XG4gICAgICAgICAgXG5cbiAgICAgICAgICAvLyBPY3VsdGFyIGxhIG5vdGlmaWNhY2nDs24gZGVzcHXDqXMgZGUgMyBzZWd1bmRvc1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tb3N0cmFyTm90aWZpY2FjaW9uID0gZmFsc2U7XG4gICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgLy8gTMOzZ2ljYSBwYXJhIG1hbmVqYXIgZWwgZXJyb3IgZGUgbGEgc29saWNpdHVkXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgLy8gTW9zdHJhciBsYSBub3RpZmljYWNpw7NuIGRlIGVycm9yXG4gICAgICAgICAgdGhpcy5tZW5zYWplTm90aWZpY2FjaW9uID0gJ0h1Ym8gdW4gZXJyb3IgYWwgYWN0dWFsaXphciBlbCBwZXJyby4nO1xuICAgICAgICAgIHRoaXMudGlwb05vdGlmaWNhY2lvbiA9ICdlcnJvcic7XG4gICAgICAgICAgdGhpcy5tb3N0cmFyTm90aWZpY2FjaW9uID0gdHJ1ZTtcbiAgICAgICAgICBcblxuICAgICAgICAgIC8vIE9jdWx0YXIgbGEgbm90aWZpY2FjacOzbiBkZXNwdcOpcyBkZSAzIHNlZ3VuZG9zXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1vc3RyYXJOb3RpZmljYWNpb24gPSBmYWxzZTtcbiAgICAgICAgICB9LCAzMDAwKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBoYW5kbGVJbWFnZUNoYW5nZShldmVudCkge1xuICAgICAgdGhpcy5pbWFnZUZpbGUgPSBldmVudC50YXJnZXQuZmlsZXNbMF07XG4gICAgfSxcbiAgICB1cGRhdGVDb2xvckluZGljYXRvcigpIHtcbiAgICAgIC8vIFJlYWxpemFyIGFjY2lvbmVzIGFkaWNpb25hbGVzIHNlZ8O6biBzZWEgbmVjZXNhcmlvXG4gICAgICBjb25zb2xlLmxvZygnQ29sb3Igc2VsZWNjaW9uYWRvOicsIHRoaXMucGVycm8uaGFpcl9jb2xvcik7XG4gICAgICB0aGlzLmNvbG9yU2VsZWN0ZWQ9dGhpcy5wZXJyby5oYWlyX2NvbG9yO1xuICAgIH0sXG5cbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyByZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvRWRpdERvZy52dWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    /* harmony default export */ exports[\"default\"] = {\n      props: ['perros'],\n      data: function data() {\n        return {\n          csrfToken: '',\n          mostrarNotificacion: false,\n          tipoNotificacion: '',\n          mensajeNotificacion: '',\n          perro: {\n            race: '',\n            name: '',\n            size: '',\n            hair_color: '',\n          },\n          sizeOptions: [\n            { label: 'Grande (+30kg)', value: 'big' },\n            { label: 'Mediano (20-30kg)', value: 'medium' },\n            { label: 'Pequeño (10-20kg)', value: 'small' },\n            { label: 'Muy pequeño (-10kg)', value: 'smaller' }\n          ],\n          colorSelected:null,\n          colors: ['negro', 'blanco', 'marrón', 'gris'],\n        };\n      },\n      mounted: function mounted() {\n        this.csrfToken = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\n      },\n      methods: {\n        editarPerro: function editarPerro(perro) {\n          fetch((\"/perros/\" + (perro.id)))\n            .then(function (data) {\n              window.location.href = \"/perros/\" + (perro.id);\n            })\n            .catch(function (error) {\n              console.error(error);\n            });\n        },\n        crearPerro: function crearPerro() {\n            window.location.href = \"/add\";\n        },\n\n        eliminarPerro: function eliminarPerro(perro) {\n          var this$1 = this;\n\n          fetch((\"/perros/\" + (perro.id)), {\n            method: 'DELETE',\n            headers: {\n              'Content-Type': 'application/json',\n              'X-CSRF-TOKEN': this.csrfToken,\n            },\n            body: JSON.stringify(this.perro),\n          })\n            .then(function (response) { return response.json(); })\n            .then(function (data) {\n              // Mostrar la notificación de éxito\n              this$1.mensajeNotificacion = data.message;\n              this$1.mostrarNotificacion = true;\n              this$1.tipoNotificacion = 'success';\n\n              // Ocultar la notificación después de 3 segundos\n              setTimeout(function () {\n                this$1.mostrarNotificacion = false;\n              }, 3000);\n\n              var index = this$1.perros.findIndex(function (p) { return p.id === perro.id; });\n              if (index !== -1) {\n                this$1.perros.splice(index, 1);\n              }\n            })\n            .catch(function (error) {\n              // Lógica para manejar el error de la solicitud\n              console.error(error);\n              // Mostrar la notificación de error\n              this$1.mensajeNotificacion = 'Hubo un error al actualizar el perro.';\n              this$1.mostrarNotificacion = true;\n              this$1.tipoNotificacion = 'error';\n\n              // Ocultar la notificación después de 3 segundos\n              setTimeout(function () {\n                this$1.mostrarNotificacion = false;\n              }, 3000);\n            });\n        },\n\n\n        updateColorIndicator: function updateColorIndicator() {\n          // Realizar acciones adicionales según sea necesario\n          console.log('Color seleccionado:', this.perro.hair_color);\n          this.colorSelected=this.perro.hair_color;\n        }\n      },\n    };\n    //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvTGlzdERvZy52dWU/N2E5YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG5cbiAgICBleHBvcnQgZGVmYXVsdCB7XG4gICAgICBwcm9wczogWydwZXJyb3MnXSxcbiAgICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY3NyZlRva2VuOiAnJyxcbiAgICAgICAgICBtb3N0cmFyTm90aWZpY2FjaW9uOiBmYWxzZSxcbiAgICAgICAgICB0aXBvTm90aWZpY2FjaW9uOiAnJyxcbiAgICAgICAgICBtZW5zYWplTm90aWZpY2FjaW9uOiAnJyxcbiAgICAgICAgICBwZXJybzoge1xuICAgICAgICAgICAgcmFjZTogJycsXG4gICAgICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgICAgIHNpemU6ICcnLFxuICAgICAgICAgICAgaGFpcl9jb2xvcjogJycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzaXplT3B0aW9uczogW1xuICAgICAgICAgICAgeyBsYWJlbDogJ0dyYW5kZSAoKzMwa2cpJywgdmFsdWU6ICdiaWcnIH0sXG4gICAgICAgICAgICB7IGxhYmVsOiAnTWVkaWFubyAoMjAtMzBrZyknLCB2YWx1ZTogJ21lZGl1bScgfSxcbiAgICAgICAgICAgIHsgbGFiZWw6ICdQZXF1ZcOxbyAoMTAtMjBrZyknLCB2YWx1ZTogJ3NtYWxsJyB9LFxuICAgICAgICAgICAgeyBsYWJlbDogJ011eSBwZXF1ZcOxbyAoLTEwa2cpJywgdmFsdWU6ICdzbWFsbGVyJyB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBjb2xvclNlbGVjdGVkOm51bGwsXG4gICAgICAgICAgY29sb3JzOiBbJ25lZ3JvJywgJ2JsYW5jbycsICdtYXJyw7NuJywgJ2dyaXMnXSxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBtb3VudGVkKCkge1xuICAgICAgICB0aGlzLmNzcmZUb2tlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT1cImNzcmYtdG9rZW5cIl0nKS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKTtcbiAgICAgIH0sXG4gICAgICBtZXRob2RzOiB7XG4gICAgICAgIGVkaXRhclBlcnJvKHBlcnJvKSB7XG4gICAgICAgICAgZmV0Y2goYC9wZXJyb3MvJHtwZXJyby5pZH1gKVxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYC9wZXJyb3MvJHtwZXJyby5pZH1gO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWFyUGVycm8oKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAvYWRkYDtcbiAgICAgICAgfSxcblxuICAgICAgICBlbGltaW5hclBlcnJvKHBlcnJvKSB7XG4gICAgICAgICAgZmV0Y2goYC9wZXJyb3MvJHtwZXJyby5pZH1gLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAnWC1DU1JGLVRPS0VOJzogdGhpcy5jc3JmVG9rZW4sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodGhpcy5wZXJybyksXG4gICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAvLyBNb3N0cmFyIGxhIG5vdGlmaWNhY2nDs24gZGUgw6l4aXRvXG4gICAgICAgICAgICAgIHRoaXMubWVuc2FqZU5vdGlmaWNhY2lvbiA9IGRhdGEubWVzc2FnZTtcbiAgICAgICAgICAgICAgdGhpcy5tb3N0cmFyTm90aWZpY2FjaW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhpcy50aXBvTm90aWZpY2FjaW9uID0gJ3N1Y2Nlc3MnO1xuXG4gICAgICAgICAgICAgIC8vIE9jdWx0YXIgbGEgbm90aWZpY2FjacOzbiBkZXNwdcOpcyBkZSAzIHNlZ3VuZG9zXG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubW9zdHJhck5vdGlmaWNhY2lvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICB9LCAzMDAwKTtcblxuICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMucGVycm9zLmZpbmRJbmRleChwID0+IHAuaWQgPT09IHBlcnJvLmlkKTtcbiAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGVycm9zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAvLyBMw7NnaWNhIHBhcmEgbWFuZWphciBlbCBlcnJvciBkZSBsYSBzb2xpY2l0dWRcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgIC8vIE1vc3RyYXIgbGEgbm90aWZpY2FjacOzbiBkZSBlcnJvclxuICAgICAgICAgICAgICB0aGlzLm1lbnNhamVOb3RpZmljYWNpb24gPSAnSHVibyB1biBlcnJvciBhbCBhY3R1YWxpemFyIGVsIHBlcnJvLic7XG4gICAgICAgICAgICAgIHRoaXMubW9zdHJhck5vdGlmaWNhY2lvbiA9IHRydWU7XG4gICAgICAgICAgICAgIHRoaXMudGlwb05vdGlmaWNhY2lvbiA9ICdlcnJvcic7XG5cbiAgICAgICAgICAgICAgLy8gT2N1bHRhciBsYSBub3RpZmljYWNpw7NuIGRlc3B1w6lzIGRlIDMgc2VndW5kb3NcbiAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3N0cmFyTm90aWZpY2FjaW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgIH0sIDMwMDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cblxuICAgICAgICB1cGRhdGVDb2xvckluZGljYXRvcigpIHtcbiAgICAgICAgICAvLyBSZWFsaXphciBhY2Npb25lcyBhZGljaW9uYWxlcyBzZWfDum4gc2VhIG5lY2VzYXJpb1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdDb2xvciBzZWxlY2Npb25hZG86JywgdGhpcy5wZXJyby5oYWlyX2NvbG9yKTtcbiAgICAgICAgICB0aGlzLmNvbG9yU2VsZWN0ZWQ9dGhpcy5wZXJyby5oYWlyX2NvbG9yO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG4gICAgXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9MaXN0RG9nLnZ1ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 10 */,
/* 11 */
/***/ function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"container\"\n  }, [_c('div', {\n    staticClass: \"row\"\n  }, [_c('div', {\n    staticClass: \"col-md-8 col-md-offset-2\"\n  }, [_c('div', {\n    staticClass: \"panel panel-default\"\n  }, [_c('div', {\n    staticClass: \"panel-heading\"\n  }, [_vm._v(\"Crear Perro\")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"panel-body\"\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"slide\"\n    }\n  }, [(_vm.mostrarNotificacion) ? _c('div', {\n    class: ['notification', _vm.tipoNotificacion]\n  }, [_vm._v(\"\\n              \" + _vm._s(_vm.mensajeNotificacion) + \"\\n            \")]) : _vm._e()]), _vm._v(\" \"), _c('form', {\n    attrs: {\n      \"action\": _vm.formAction,\n      \"method\": \"POST\"\n    },\n    on: {\n      \"submit\": _vm.actualizarPerro\n    }\n  }, [_c('input', {\n    attrs: {\n      \"type\": \"hidden\",\n      \"name\": \"_method\",\n      \"value\": \"POST\"\n    }\n  }), _vm._v(\" \"), _c('input', {\n    attrs: {\n      \"type\": \"hidden\",\n      \"name\": \"_token\"\n    },\n    domProps: {\n      \"value\": _vm.csrfToken\n    }\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"image\"\n    }\n  }, [_vm._v(\"Imagen:\")]), _vm._v(\" \"), _c('input', {\n    attrs: {\n      \"type\": \"file\",\n      \"name\": \"image\"\n    },\n    on: {\n      \"change\": _vm.handleImageChange\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"race\"\n    }\n  }, [_vm._v(\"Raza:\")]), _vm._v(\" \"), _c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.perro.race),\n      expression: \"perro.race\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      \"type\": \"text\",\n      \"name\": \"race\",\n      \"required\": \"\"\n    },\n    domProps: {\n      \"value\": (_vm.perro.race)\n    },\n    on: {\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.$set(_vm.perro, \"race\", $event.target.value)\n      }\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"name\"\n    }\n  }, [_vm._v(\"Nombre:\")]), _vm._v(\" \"), _c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.perro.name),\n      expression: \"perro.name\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      \"type\": \"text\",\n      \"name\": \"name\",\n      \"required\": \"\"\n    },\n    domProps: {\n      \"value\": (_vm.perro.name)\n    },\n    on: {\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.$set(_vm.perro, \"name\", $event.target.value)\n      }\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"size\"\n    }\n  }, [_vm._v(\"Tamaño:\")]), _vm._v(\" \"), _c('select', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.perro.size),\n      expression: \"perro.size\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      \"name\": \"size\",\n      \"required\": \"\"\n    },\n    on: {\n      \"change\": function($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function(o) {\n          return o.selected\n        }).map(function(o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val\n        });\n        _vm.$set(_vm.perro, \"size\", $event.target.multiple ? $$selectedVal : $$selectedVal[0])\n      }\n    }\n  }, [_c('option', {\n    attrs: {\n      \"value\": \"\"\n    }\n  }, [_vm._v(\"Selecciona un tamaño\")]), _vm._v(\" \"), _vm._l((_vm.sizeOptions), function(size) {\n    return _c('option', {\n      domProps: {\n        \"value\": size.value\n      }\n    }, [_vm._v(_vm._s(size.label))])\n  })], 2)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('div', {\n    staticClass: \"flex\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"color\"\n    }\n  }, [_vm._v(\"Color:\")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"color-indicator\",\n    class: _vm.colorSelected\n  })]), _vm._v(\" \"), _c('select', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.perro.hair_color),\n      expression: \"perro.hair_color\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      \"name\": \"color\",\n      \"required\": \"\"\n    },\n    on: {\n      \"change\": [function($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function(o) {\n          return o.selected\n        }).map(function(o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val\n        });\n        _vm.$set(_vm.perro, \"hair_color\", $event.target.multiple ? $$selectedVal : $$selectedVal[0])\n      }, _vm.updateColorIndicator]\n    }\n  }, [_c('option', {\n    attrs: {\n      \"value\": \"\"\n    }\n  }, [_vm._v(\"Selecciona un color\")]), _vm._v(\" \"), _vm._l((_vm.colors), function(color) {\n    return _c('option', {\n      domProps: {\n        \"value\": color\n      }\n    }, [_vm._v(_vm._s(color))])\n  })], 2)]), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-success\",\n    attrs: {\n      \"type\": \"submit\"\n    }\n  }, [_vm._v(\"Añadir\")])])], 1)])])])])\n},staticRenderFns: []}\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-012de332\", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"container\"\n  }, [_c('div', {\n    staticClass: \"row\"\n  }, [_c('div', {\n    staticClass: \"col-md-8 col-md-offset-2\"\n  }, [_c('div', {\n    staticClass: \"panel panel-default\"\n  }, [_c('div', {\n    staticClass: \"panel-heading\"\n  }, [_vm._v(\"Editar Perro\")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"panel-body\"\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"slide\"\n    }\n  }, [(_vm.mostrarNotificacion) ? _c('div', {\n    class: ['notification', _vm.tipoNotificacion]\n  }, [_vm._v(\"\\n              \" + _vm._s(_vm.mensajeNotificacion) + \"\\n            \")]) : _vm._e()]), _vm._v(\" \"), _c('form', {\n    attrs: {\n      \"action\": _vm.formAction,\n      \"method\": \"POST\"\n    },\n    on: {\n      \"submit\": _vm.actualizarPerro\n    }\n  }, [_c('input', {\n    attrs: {\n      \"type\": \"hidden\",\n      \"name\": \"_method\",\n      \"value\": \"POST\"\n    }\n  }), _vm._v(\" \"), _c('input', {\n    attrs: {\n      \"type\": \"hidden\",\n      \"name\": \"_token\"\n    },\n    domProps: {\n      \"value\": _vm.csrfToken\n    }\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"image\"\n    }\n  }, [_vm._v(\"Imagen:\")]), _vm._v(\" \"), _c('input', {\n    attrs: {\n      \"type\": \"file\",\n      \"name\": \"image\"\n    },\n    on: {\n      \"change\": _vm.handleImageChange\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"race\"\n    }\n  }, [_vm._v(\"Raza:\")]), _vm._v(\" \"), _c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.perro.race),\n      expression: \"perro.race\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      \"type\": \"text\",\n      \"name\": \"race\",\n      \"required\": \"\"\n    },\n    domProps: {\n      \"value\": (_vm.perro.race)\n    },\n    on: {\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.$set(_vm.perro, \"race\", $event.target.value)\n      }\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"name\"\n    }\n  }, [_vm._v(\"Nombre:\")]), _vm._v(\" \"), _c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.perro.name),\n      expression: \"perro.name\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      \"type\": \"text\",\n      \"name\": \"name\",\n      \"required\": \"\"\n    },\n    domProps: {\n      \"value\": (_vm.perro.name)\n    },\n    on: {\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.$set(_vm.perro, \"name\", $event.target.value)\n      }\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"size\"\n    }\n  }, [_vm._v(\"Tamaño:\")]), _vm._v(\" \"), _c('select', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.perro.size),\n      expression: \"perro.size\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      \"name\": \"size\",\n      \"required\": \"\"\n    },\n    on: {\n      \"change\": function($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function(o) {\n          return o.selected\n        }).map(function(o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val\n        });\n        _vm.$set(_vm.perro, \"size\", $event.target.multiple ? $$selectedVal : $$selectedVal[0])\n      }\n    }\n  }, [_c('option', {\n    attrs: {\n      \"value\": \"\"\n    }\n  }, [_vm._v(\"Selecciona un tamaño\")]), _vm._v(\" \"), _vm._l((_vm.sizeOptions), function(size) {\n    return _c('option', {\n      domProps: {\n        \"value\": size.value\n      }\n    }, [_vm._v(_vm._s(size.label))])\n  })], 2)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"form-group\"\n  }, [_c('div', {\n    staticClass: \"flex\"\n  }, [_c('label', {\n    attrs: {\n      \"for\": \"color\"\n    }\n  }, [_vm._v(\"Color:\")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"color-indicator\",\n    class: _vm.colorSelected\n  })]), _vm._v(\" \"), _c('select', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.perro.hair_color),\n      expression: \"perro.hair_color\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      \"name\": \"color\",\n      \"required\": \"\"\n    },\n    on: {\n      \"change\": [function($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function(o) {\n          return o.selected\n        }).map(function(o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val\n        });\n        _vm.$set(_vm.perro, \"hair_color\", $event.target.multiple ? $$selectedVal : $$selectedVal[0])\n      }, _vm.updateColorIndicator]\n    }\n  }, [_c('option', {\n    attrs: {\n      \"value\": \"\"\n    }\n  }, [_vm._v(\"Selecciona un color\")]), _vm._v(\" \"), _vm._l((_vm.colors), function(color) {\n    return _c('option', {\n      domProps: {\n        \"value\": color\n      }\n    }, [_vm._v(_vm._s(color))])\n  })], 2)]), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-primary\",\n    attrs: {\n      \"type\": \"submit\"\n    }\n  }, [_vm._v(\"Actualizar\")])])], 1)])])])])\n},staticRenderFns: []}\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-08c79559\", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"container\"\n  }, [_c('div', {\n    staticClass: \"row\"\n  }, [_c('div', {\n    staticClass: \"col-md-8 col-md-offset-2\"\n  }, [_c('div', {\n    staticClass: \"panel panel-default\"\n  }, [_c('div', {\n    staticClass: \"panel-heading\"\n  }, [_vm._v(\"Tabla de Ejemplo\")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"panel-body\"\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"slide\"\n    }\n  }, [(_vm.mostrarNotificacion) ? _c('div', {\n    class: ['notification', _vm.tipoNotificacion]\n  }, [_vm._v(\"\\n              \" + _vm._s(_vm.mensajeNotificacion) + \"\\n            \")]) : _vm._e()]), _vm._v(\" \"), _c('div', {\n    staticClass: \"addDog\"\n  }, [_c('button', {\n    staticClass: \"btn btn-success btn-sm\",\n    on: {\n      \"click\": _vm.crearPerro\n    }\n  }, [_vm._v(\"Nuevo Perro\")])]), _vm._v(\" \"), _c('table', {\n    staticClass: \"table\",\n    staticStyle: {\n      \"padding-top\": \"20px\"\n    }\n  }, [_vm._m(0), _vm._v(\" \"), _c('tbody', _vm._l((_vm.perros), function(perro) {\n    return _c('tr', {\n      key: perro.id\n    }, [_c('td', [_vm._v(_vm._s(perro.race))]), _vm._v(\" \"), _c('td', [_vm._v(_vm._s(perro.name))]), _vm._v(\" \"), _c('td', [_vm._v(_vm._s(perro.size))]), _vm._v(\" \"), _c('td', [_vm._v(_vm._s(perro.hair_color))]), _vm._v(\" \"), _c('td', [_c('button', {\n      staticClass: \"btn btn-info btn-sm\",\n      on: {\n        \"click\": function($event) {\n          return _vm.editarPerro(perro)\n        }\n      }\n    }, [_vm._v(\"Editar\")]), _vm._v(\" \"), _c('button', {\n      staticClass: \"btn btn-danger btn-sm\",\n      on: {\n        \"click\": function($event) {\n          return _vm.eliminarPerro(perro)\n        }\n      }\n    }, [_vm._v(\"Eliminar\")])])])\n  }), 0)])], 1)])])])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('thead', [_c('tr', [_c('th', [_vm._v(\"Raza\")]), _vm._v(\" \"), _c('th', [_vm._v(\"Nombre\")]), _vm._v(\" \"), _c('th', [_vm._v(\"Tamaño\")]), _vm._v(\" \"), _c('th', [_vm._v(\"Color de pelo\")]), _vm._v(\" \"), _c('th', [_vm._v(\"Acciones\")])])])\n}]}\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-a9b7f776\", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvTGlzdERvZy52dWU/YzYwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJjb250YWluZXJcIlxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJyb3dcIlxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJjb2wtbWQtOCBjb2wtbWQtb2Zmc2V0LTJcIlxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJwYW5lbCBwYW5lbC1kZWZhdWx0XCJcbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwicGFuZWwtaGVhZGluZ1wiXG4gIH0sIFtfdm0uX3YoXCJUYWJsYSBkZSBFamVtcGxvXCIpXSksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwicGFuZWwtYm9keVwiXG4gIH0sIFtfYygndHJhbnNpdGlvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJuYW1lXCI6IFwic2xpZGVcIlxuICAgIH1cbiAgfSwgWyhfdm0ubW9zdHJhck5vdGlmaWNhY2lvbikgPyBfYygnZGl2Jywge1xuICAgIGNsYXNzOiBbJ25vdGlmaWNhdGlvbicsIF92bS50aXBvTm90aWZpY2FjaW9uXVxuICB9LCBbX3ZtLl92KFwiXFxuICAgICAgICAgICAgICBcIiArIF92bS5fcyhfdm0ubWVuc2FqZU5vdGlmaWNhY2lvbikgKyBcIlxcbiAgICAgICAgICAgIFwiKV0pIDogX3ZtLl9lKCldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJhZGREb2dcIlxuICB9LCBbX2MoJ2J1dHRvbicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLXN1Y2Nlc3MgYnRuLXNtXCIsXG4gICAgb246IHtcbiAgICAgIFwiY2xpY2tcIjogX3ZtLmNyZWFyUGVycm9cbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJOdWV2byBQZXJyb1wiKV0pXSksIF92bS5fdihcIiBcIiksIF9jKCd0YWJsZScsIHtcbiAgICBzdGF0aWNDbGFzczogXCJ0YWJsZVwiLFxuICAgIHN0YXRpY1N0eWxlOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwiMjBweFwiXG4gICAgfVxuICB9LCBbX3ZtLl9tKDApLCBfdm0uX3YoXCIgXCIpLCBfYygndGJvZHknLCBfdm0uX2woKF92bS5wZXJyb3MpLCBmdW5jdGlvbihwZXJybykge1xuICAgIHJldHVybiBfYygndHInLCB7XG4gICAgICBrZXk6IHBlcnJvLmlkXG4gICAgfSwgW19jKCd0ZCcsIFtfdm0uX3YoX3ZtLl9zKHBlcnJvLnJhY2UpKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygndGQnLCBbX3ZtLl92KF92bS5fcyhwZXJyby5uYW1lKSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3RkJywgW192bS5fdihfdm0uX3MocGVycm8uc2l6ZSkpXSksIF92bS5fdihcIiBcIiksIF9jKCd0ZCcsIFtfdm0uX3YoX3ZtLl9zKHBlcnJvLmhhaXJfY29sb3IpKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygndGQnLCBbX2MoJ2J1dHRvbicsIHtcbiAgICAgIHN0YXRpY0NsYXNzOiBcImJ0biBidG4taW5mbyBidG4tc21cIixcbiAgICAgIG9uOiB7XG4gICAgICAgIFwiY2xpY2tcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF92bS5lZGl0YXJQZXJybyhwZXJybylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIFtfdm0uX3YoXCJFZGl0YXJcIildKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2J1dHRvbicsIHtcbiAgICAgIHN0YXRpY0NsYXNzOiBcImJ0biBidG4tZGFuZ2VyIGJ0bi1zbVwiLFxuICAgICAgb246IHtcbiAgICAgICAgXCJjbGlja1wiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3ZtLmVsaW1pbmFyUGVycm8ocGVycm8pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBbX3ZtLl92KFwiRWxpbWluYXJcIildKV0pXSlcbiAgfSksIDApXSldLCAxKV0pXSldKV0pXG59LHN0YXRpY1JlbmRlckZuczogW2Z1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ3RoZWFkJywgW19jKCd0cicsIFtfYygndGgnLCBbX3ZtLl92KFwiUmF6YVwiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygndGgnLCBbX3ZtLl92KFwiTm9tYnJlXCIpXSksIF92bS5fdihcIiBcIiksIF9jKCd0aCcsIFtfdm0uX3YoXCJUYW1hw7FvXCIpXSksIF92bS5fdihcIiBcIiksIF9jKCd0aCcsIFtfdm0uX3YoXCJDb2xvciBkZSBwZWxvXCIpXSksIF92bS5fdihcIiBcIiksIF9jKCd0aCcsIFtfdm0uX3YoXCJBY2Npb25lc1wiKV0pXSldKVxufV19XG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKS5yZXJlbmRlcihcImRhdGEtdi1hOWI3Zjc3NlwiLCBtb2R1bGUuZXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci5qcz9pZD1kYXRhLXYtYTliN2Y3NzYhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9MaXN0RG9nLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export NavigationFailureType */\n/* unused harmony export RouterLink */\n/* unused harmony export RouterView */\n/* unused harmony export START_LOCATION */\n/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return VueRouter$1; });\n/* unused harmony export isNavigationFailure */\n/* unused harmony export version */\n/*!\n  * vue-router v3.6.5\n  * (c) 2022 Evan You\n  * @license MIT\n  */\n/*  */\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error((\"[vue-router] \" + message))\n  }\n}\n\nfunction warn (condition, message) {\n  if (!condition) {\n    typeof console !== 'undefined' && console.warn((\"[vue-router] \" + message));\n  }\n}\n\nfunction extend (a, b) {\n  for (var key in b) {\n    a[key] = b[key];\n  }\n  return a\n}\n\n/*  */\n\nvar encodeReserveRE = /[!'()*]/g;\nvar encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };\nvar commaRE = /%2C/g;\n\n// fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\nvar encode = function (str) { return encodeURIComponent(str)\n    .replace(encodeReserveRE, encodeReserveReplacer)\n    .replace(commaRE, ','); };\n\nfunction decode (str) {\n  try {\n    return decodeURIComponent(str)\n  } catch (err) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(false, (\"Error decoding \\\"\" + str + \"\\\". Leaving it intact.\"));\n    }\n  }\n  return str\n}\n\nfunction resolveQuery (\n  query,\n  extraQuery,\n  _parseQuery\n) {\n  if ( extraQuery === void 0 ) extraQuery = {};\n\n  var parse = _parseQuery || parseQuery;\n  var parsedQuery;\n  try {\n    parsedQuery = parse(query || '');\n  } catch (e) {\n    process.env.NODE_ENV !== 'production' && warn(false, e.message);\n    parsedQuery = {};\n  }\n  for (var key in extraQuery) {\n    var value = extraQuery[key];\n    parsedQuery[key] = Array.isArray(value)\n      ? value.map(castQueryParamValue)\n      : castQueryParamValue(value);\n  }\n  return parsedQuery\n}\n\nvar castQueryParamValue = function (value) { return (value == null || typeof value === 'object' ? value : String(value)); };\n\nfunction parseQuery (query) {\n  var res = {};\n\n  query = query.trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return res\n  }\n\n  query.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = decode(parts.shift());\n    var val = parts.length > 0 ? decode(parts.join('=')) : null;\n\n    if (res[key] === undefined) {\n      res[key] = val;\n    } else if (Array.isArray(res[key])) {\n      res[key].push(val);\n    } else {\n      res[key] = [res[key], val];\n    }\n  });\n\n  return res\n}\n\nfunction stringifyQuery (obj) {\n  var res = obj\n    ? Object.keys(obj)\n      .map(function (key) {\n        var val = obj[key];\n\n        if (val === undefined) {\n          return ''\n        }\n\n        if (val === null) {\n          return encode(key)\n        }\n\n        if (Array.isArray(val)) {\n          var result = [];\n          val.forEach(function (val2) {\n            if (val2 === undefined) {\n              return\n            }\n            if (val2 === null) {\n              result.push(encode(key));\n            } else {\n              result.push(encode(key) + '=' + encode(val2));\n            }\n          });\n          return result.join('&')\n        }\n\n        return encode(key) + '=' + encode(val)\n      })\n      .filter(function (x) { return x.length > 0; })\n      .join('&')\n    : null;\n  return res ? (\"?\" + res) : ''\n}\n\n/*  */\n\nvar trailingSlashRE = /\\/?$/;\n\nfunction createRoute (\n  record,\n  location,\n  redirectedFrom,\n  router\n) {\n  var stringifyQuery = router && router.options.stringifyQuery;\n\n  var query = location.query || {};\n  try {\n    query = clone(query);\n  } catch (e) {}\n\n  var route = {\n    name: location.name || (record && record.name),\n    meta: (record && record.meta) || {},\n    path: location.path || '/',\n    hash: location.hash || '',\n    query: query,\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery),\n    matched: record ? formatMatch(record) : []\n  };\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery);\n  }\n  return Object.freeze(route)\n}\n\nfunction clone (value) {\n  if (Array.isArray(value)) {\n    return value.map(clone)\n  } else if (value && typeof value === 'object') {\n    var res = {};\n    for (var key in value) {\n      res[key] = clone(value[key]);\n    }\n    return res\n  } else {\n    return value\n  }\n}\n\n// the starting route that represents the initial state\nvar START = createRoute(null, {\n  path: '/'\n});\n\nfunction formatMatch (record) {\n  var res = [];\n  while (record) {\n    res.unshift(record);\n    record = record.parent;\n  }\n  return res\n}\n\nfunction getFullPath (\n  ref,\n  _stringifyQuery\n) {\n  var path = ref.path;\n  var query = ref.query; if ( query === void 0 ) query = {};\n  var hash = ref.hash; if ( hash === void 0 ) hash = '';\n\n  var stringify = _stringifyQuery || stringifyQuery;\n  return (path || '/') + stringify(query) + hash\n}\n\nfunction isSameRoute (a, b, onlyPath) {\n  if (b === START) {\n    return a === b\n  } else if (!b) {\n    return false\n  } else if (a.path && b.path) {\n    return a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') && (onlyPath ||\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query))\n  } else if (a.name && b.name) {\n    return (\n      a.name === b.name &&\n      (onlyPath || (\n        a.hash === b.hash &&\n      isObjectEqual(a.query, b.query) &&\n      isObjectEqual(a.params, b.params))\n      )\n    )\n  } else {\n    return false\n  }\n}\n\nfunction isObjectEqual (a, b) {\n  if ( a === void 0 ) a = {};\n  if ( b === void 0 ) b = {};\n\n  // handle null value #1566\n  if (!a || !b) { return a === b }\n  var aKeys = Object.keys(a).sort();\n  var bKeys = Object.keys(b).sort();\n  if (aKeys.length !== bKeys.length) {\n    return false\n  }\n  return aKeys.every(function (key, i) {\n    var aVal = a[key];\n    var bKey = bKeys[i];\n    if (bKey !== key) { return false }\n    var bVal = b[key];\n    // query values can be null and undefined\n    if (aVal == null || bVal == null) { return aVal === bVal }\n    // check nested equality\n    if (typeof aVal === 'object' && typeof bVal === 'object') {\n      return isObjectEqual(aVal, bVal)\n    }\n    return String(aVal) === String(bVal)\n  })\n}\n\nfunction isIncludedRoute (current, target) {\n  return (\n    current.path.replace(trailingSlashRE, '/').indexOf(\n      target.path.replace(trailingSlashRE, '/')\n    ) === 0 &&\n    (!target.hash || current.hash === target.hash) &&\n    queryIncludes(current.query, target.query)\n  )\n}\n\nfunction queryIncludes (current, target) {\n  for (var key in target) {\n    if (!(key in current)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction handleRouteEntered (route) {\n  for (var i = 0; i < route.matched.length; i++) {\n    var record = route.matched[i];\n    for (var name in record.instances) {\n      var instance = record.instances[name];\n      var cbs = record.enteredCbs[name];\n      if (!instance || !cbs) { continue }\n      delete record.enteredCbs[name];\n      for (var i$1 = 0; i$1 < cbs.length; i$1++) {\n        if (!instance._isBeingDestroyed) { cbs[i$1](instance); }\n      }\n    }\n  }\n}\n\nvar View = {\n  name: 'RouterView',\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    }\n  },\n  render: function render (_, ref) {\n    var props = ref.props;\n    var children = ref.children;\n    var parent = ref.parent;\n    var data = ref.data;\n\n    // used by devtools to display a router-view badge\n    data.routerView = true;\n\n    // directly use parent context's createElement() function\n    // so that components rendered by router-view can resolve named slots\n    var h = parent.$createElement;\n    var name = props.name;\n    var route = parent.$route;\n    var cache = parent._routerViewCache || (parent._routerViewCache = {});\n\n    // determine current view depth, also check to see if the tree\n    // has been toggled inactive but kept-alive.\n    var depth = 0;\n    var inactive = false;\n    while (parent && parent._routerRoot !== parent) {\n      var vnodeData = parent.$vnode ? parent.$vnode.data : {};\n      if (vnodeData.routerView) {\n        depth++;\n      }\n      if (vnodeData.keepAlive && parent._directInactive && parent._inactive) {\n        inactive = true;\n      }\n      parent = parent.$parent;\n    }\n    data.routerViewDepth = depth;\n\n    // render previous view if the tree is inactive and kept-alive\n    if (inactive) {\n      var cachedData = cache[name];\n      var cachedComponent = cachedData && cachedData.component;\n      if (cachedComponent) {\n        // #2301\n        // pass props\n        if (cachedData.configProps) {\n          fillPropsinData(cachedComponent, data, cachedData.route, cachedData.configProps);\n        }\n        return h(cachedComponent, data, children)\n      } else {\n        // render previous empty view\n        return h()\n      }\n    }\n\n    var matched = route.matched[depth];\n    var component = matched && matched.components[name];\n\n    // render empty node if no matched route or no config component\n    if (!matched || !component) {\n      cache[name] = null;\n      return h()\n    }\n\n    // cache component\n    cache[name] = { component: component };\n\n    // attach instance registration hook\n    // this will be called in the instance's injected lifecycle hooks\n    data.registerRouteInstance = function (vm, val) {\n      // val could be undefined for unregistration\n      var current = matched.instances[name];\n      if (\n        (val && current !== vm) ||\n        (!val && current === vm)\n      ) {\n        matched.instances[name] = val;\n      }\n    }\n\n    // also register instance in prepatch hook\n    // in case the same component instance is reused across different routes\n    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {\n      matched.instances[name] = vnode.componentInstance;\n    };\n\n    // register instance in init hook\n    // in case kept-alive component be actived when routes changed\n    data.hook.init = function (vnode) {\n      if (vnode.data.keepAlive &&\n        vnode.componentInstance &&\n        vnode.componentInstance !== matched.instances[name]\n      ) {\n        matched.instances[name] = vnode.componentInstance;\n      }\n\n      // if the route transition has already been confirmed then we weren't\n      // able to call the cbs during confirmation as the component was not\n      // registered yet, so we call it here.\n      handleRouteEntered(route);\n    };\n\n    var configProps = matched.props && matched.props[name];\n    // save route and configProps in cache\n    if (configProps) {\n      extend(cache[name], {\n        route: route,\n        configProps: configProps\n      });\n      fillPropsinData(component, data, route, configProps);\n    }\n\n    return h(component, data, children)\n  }\n};\n\nfunction fillPropsinData (component, data, route, configProps) {\n  // resolve props\n  var propsToPass = data.props = resolveProps(route, configProps);\n  if (propsToPass) {\n    // clone to prevent mutation\n    propsToPass = data.props = extend({}, propsToPass);\n    // pass non-declared props as attrs\n    var attrs = data.attrs = data.attrs || {};\n    for (var key in propsToPass) {\n      if (!component.props || !(key in component.props)) {\n        attrs[key] = propsToPass[key];\n        delete propsToPass[key];\n      }\n    }\n  }\n}\n\nfunction resolveProps (route, config) {\n  switch (typeof config) {\n    case 'undefined':\n      return\n    case 'object':\n      return config\n    case 'function':\n      return config(route)\n    case 'boolean':\n      return config ? route.params : undefined\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false,\n          \"props in \\\"\" + (route.path) + \"\\\" is a \" + (typeof config) + \", \" +\n          \"expecting an object, function or boolean.\"\n        );\n      }\n  }\n}\n\n/*  */\n\nfunction resolvePath (\n  relative,\n  base,\n  append\n) {\n  var firstChar = relative.charAt(0);\n  if (firstChar === '/') {\n    return relative\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative\n  }\n\n  var stack = base.split('/');\n\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  }\n\n  // resolve relative path\n  var segments = relative.replace(/^\\//, '').split('/');\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  }\n\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/')\n}\n\nfunction parsePath (path) {\n  var hash = '';\n  var query = '';\n\n  var hashIndex = path.indexOf('#');\n  if (hashIndex >= 0) {\n    hash = path.slice(hashIndex);\n    path = path.slice(0, hashIndex);\n  }\n\n  var queryIndex = path.indexOf('?');\n  if (queryIndex >= 0) {\n    query = path.slice(queryIndex + 1);\n    path = path.slice(0, queryIndex);\n  }\n\n  return {\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction cleanPath (path) {\n  return path.replace(/\\/(?:\\s*\\/)+/g, '/')\n}\n\nvar isarray = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n/**\n * Expose `pathToRegexp`.\n */\nvar pathToRegexp_1 = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      continue\n    }\n\n    var next = str[index];\n    var prefix = res[2];\n    var name = res[3];\n    var capture = res[4];\n    var group = res[5];\n    var modifier = res[6];\n    var asterisk = res[7];\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    var partial = prefix != null && next != null && next !== prefix;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = res[2] || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    });\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index);\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));\n    }\n  }\n\n  return function (obj, opts) {\n    var path = '';\n    var data = obj || {};\n    var options = opts || {};\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n\n        continue\n      }\n\n      var value = data[token.name];\n      var segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys;\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      });\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n\n      keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\npathToRegexp_1.parse = parse_1;\npathToRegexp_1.compile = compile_1;\npathToRegexp_1.tokensToFunction = tokensToFunction_1;\npathToRegexp_1.tokensToRegExp = tokensToRegExp_1;\n\n/*  */\n\n// $flow-disable-line\nvar regexpCompileCache = Object.create(null);\n\nfunction fillParams (\n  path,\n  params,\n  routeMsg\n) {\n  params = params || {};\n  try {\n    var filler =\n      regexpCompileCache[path] ||\n      (regexpCompileCache[path] = pathToRegexp_1.compile(path));\n\n    // Fix #2505 resolving asterisk routes { name: 'not-found', params: { pathMatch: '/not-found' }}\n    // and fix #3106 so that you can work with location descriptor object having params.pathMatch equal to empty string\n    if (typeof params.pathMatch === 'string') { params[0] = params.pathMatch; }\n\n    return filler(params, { pretty: true })\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      // Fix #3072 no warn if `pathMatch` is string\n      warn(typeof params.pathMatch === 'string', (\"missing param for \" + routeMsg + \": \" + (e.message)));\n    }\n    return ''\n  } finally {\n    // delete the 0 if it was added\n    delete params[0];\n  }\n}\n\n/*  */\n\nfunction normalizeLocation (\n  raw,\n  current,\n  append,\n  router\n) {\n  var next = typeof raw === 'string' ? { path: raw } : raw;\n  // named target\n  if (next._normalized) {\n    return next\n  } else if (next.name) {\n    next = extend({}, raw);\n    var params = next.params;\n    if (params && typeof params === 'object') {\n      next.params = extend({}, params);\n    }\n    return next\n  }\n\n  // relative params\n  if (!next.path && next.params && current) {\n    next = extend({}, next);\n    next._normalized = true;\n    var params$1 = extend(extend({}, current.params), next.params);\n    if (current.name) {\n      next.name = current.name;\n      next.params = params$1;\n    } else if (current.matched.length) {\n      var rawPath = current.matched[current.matched.length - 1].path;\n      next.path = fillParams(rawPath, params$1, (\"path \" + (current.path)));\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn(false, \"relative params navigation requires a current route.\");\n    }\n    return next\n  }\n\n  var parsedPath = parsePath(next.path || '');\n  var basePath = (current && current.path) || '/';\n  var path = parsedPath.path\n    ? resolvePath(parsedPath.path, basePath, append || next.append)\n    : basePath;\n\n  var query = resolveQuery(\n    parsedPath.query,\n    next.query,\n    router && router.options.parseQuery\n  );\n\n  var hash = next.hash || parsedPath.hash;\n  if (hash && hash.charAt(0) !== '#') {\n    hash = \"#\" + hash;\n  }\n\n  return {\n    _normalized: true,\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\n/*  */\n\n// work around weird flow bug\nvar toTypes = [String, Object];\nvar eventTypes = [String, Array];\n\nvar noop = function () {};\n\nvar warnedCustomSlot;\nvar warnedTagProp;\nvar warnedEventProp;\n\nvar Link = {\n  name: 'RouterLink',\n  props: {\n    to: {\n      type: toTypes,\n      required: true\n    },\n    tag: {\n      type: String,\n      default: 'a'\n    },\n    custom: Boolean,\n    exact: Boolean,\n    exactPath: Boolean,\n    append: Boolean,\n    replace: Boolean,\n    activeClass: String,\n    exactActiveClass: String,\n    ariaCurrentValue: {\n      type: String,\n      default: 'page'\n    },\n    event: {\n      type: eventTypes,\n      default: 'click'\n    }\n  },\n  render: function render (h) {\n    var this$1$1 = this;\n\n    var router = this.$router;\n    var current = this.$route;\n    var ref = router.resolve(\n      this.to,\n      current,\n      this.append\n    );\n    var location = ref.location;\n    var route = ref.route;\n    var href = ref.href;\n\n    var classes = {};\n    var globalActiveClass = router.options.linkActiveClass;\n    var globalExactActiveClass = router.options.linkExactActiveClass;\n    // Support global empty active class\n    var activeClassFallback =\n      globalActiveClass == null ? 'router-link-active' : globalActiveClass;\n    var exactActiveClassFallback =\n      globalExactActiveClass == null\n        ? 'router-link-exact-active'\n        : globalExactActiveClass;\n    var activeClass =\n      this.activeClass == null ? activeClassFallback : this.activeClass;\n    var exactActiveClass =\n      this.exactActiveClass == null\n        ? exactActiveClassFallback\n        : this.exactActiveClass;\n\n    var compareTarget = route.redirectedFrom\n      ? createRoute(null, normalizeLocation(route.redirectedFrom), null, router)\n      : route;\n\n    classes[exactActiveClass] = isSameRoute(current, compareTarget, this.exactPath);\n    classes[activeClass] = this.exact || this.exactPath\n      ? classes[exactActiveClass]\n      : isIncludedRoute(current, compareTarget);\n\n    var ariaCurrentValue = classes[exactActiveClass] ? this.ariaCurrentValue : null;\n\n    var handler = function (e) {\n      if (guardEvent(e)) {\n        if (this$1$1.replace) {\n          router.replace(location, noop);\n        } else {\n          router.push(location, noop);\n        }\n      }\n    };\n\n    var on = { click: guardEvent };\n    if (Array.isArray(this.event)) {\n      this.event.forEach(function (e) {\n        on[e] = handler;\n      });\n    } else {\n      on[this.event] = handler;\n    }\n\n    var data = { class: classes };\n\n    var scopedSlot =\n      !this.$scopedSlots.$hasNormal &&\n      this.$scopedSlots.default &&\n      this.$scopedSlots.default({\n        href: href,\n        route: route,\n        navigate: handler,\n        isActive: classes[activeClass],\n        isExactActive: classes[exactActiveClass]\n      });\n\n    if (scopedSlot) {\n      if (process.env.NODE_ENV !== 'production' && !this.custom) {\n        !warnedCustomSlot && warn(false, 'In Vue Router 4, the v-slot API will by default wrap its content with an <a> element. Use the custom prop to remove this warning:\\n<router-link v-slot=\"{ navigate, href }\" custom></router-link>\\n');\n        warnedCustomSlot = true;\n      }\n      if (scopedSlot.length === 1) {\n        return scopedSlot[0]\n      } else if (scopedSlot.length > 1 || !scopedSlot.length) {\n        if (process.env.NODE_ENV !== 'production') {\n          warn(\n            false,\n            (\"<router-link> with to=\\\"\" + (this.to) + \"\\\" is trying to use a scoped slot but it didn't provide exactly one child. Wrapping the content with a span element.\")\n          );\n        }\n        return scopedSlot.length === 0 ? h() : h('span', {}, scopedSlot)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if ('tag' in this.$options.propsData && !warnedTagProp) {\n        warn(\n          false,\n          \"<router-link>'s tag prop is deprecated and has been removed in Vue Router 4. Use the v-slot API to remove this warning: https://next.router.vuejs.org/guide/migration/#removal-of-event-and-tag-props-in-router-link.\"\n        );\n        warnedTagProp = true;\n      }\n      if ('event' in this.$options.propsData && !warnedEventProp) {\n        warn(\n          false,\n          \"<router-link>'s event prop is deprecated and has been removed in Vue Router 4. Use the v-slot API to remove this warning: https://next.router.vuejs.org/guide/migration/#removal-of-event-and-tag-props-in-router-link.\"\n        );\n        warnedEventProp = true;\n      }\n    }\n\n    if (this.tag === 'a') {\n      data.on = on;\n      data.attrs = { href: href, 'aria-current': ariaCurrentValue };\n    } else {\n      // find the first <a> child and apply listener and href\n      var a = findAnchor(this.$slots.default);\n      if (a) {\n        // in case the <a> is a static node\n        a.isStatic = false;\n        var aData = (a.data = extend({}, a.data));\n        aData.on = aData.on || {};\n        // transform existing events in both objects into arrays so we can push later\n        for (var event in aData.on) {\n          var handler$1 = aData.on[event];\n          if (event in on) {\n            aData.on[event] = Array.isArray(handler$1) ? handler$1 : [handler$1];\n          }\n        }\n        // append new listeners for router-link\n        for (var event$1 in on) {\n          if (event$1 in aData.on) {\n            // on[event] is always a function\n            aData.on[event$1].push(on[event$1]);\n          } else {\n            aData.on[event$1] = handler;\n          }\n        }\n\n        var aAttrs = (a.data.attrs = extend({}, a.data.attrs));\n        aAttrs.href = href;\n        aAttrs['aria-current'] = ariaCurrentValue;\n      } else {\n        // doesn't have <a> child, apply listener to self\n        data.on = on;\n      }\n    }\n\n    return h(this.tag, data, this.$slots.default)\n  }\n};\n\nfunction guardEvent (e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) { return }\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) { return }\n  // don't redirect if `target=\"_blank\"`\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    var target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) { return }\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n  return true\n}\n\nfunction findAnchor (children) {\n  if (children) {\n    var child;\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      if (child.tag === 'a') {\n        return child\n      }\n      if (child.children && (child = findAnchor(child.children))) {\n        return child\n      }\n    }\n  }\n}\n\nvar _Vue;\n\nfunction install (Vue) {\n  if (install.installed && _Vue === Vue) { return }\n  install.installed = true;\n\n  _Vue = Vue;\n\n  var isDef = function (v) { return v !== undefined; };\n\n  var registerInstance = function (vm, callVal) {\n    var i = vm.$options._parentVnode;\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal);\n    }\n  };\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate () {\n      if (isDef(this.$options.router)) {\n        this._routerRoot = this;\n        this._router = this.$options.router;\n        this._router.init(this);\n        Vue.util.defineReactive(this, '_route', this._router.history.current);\n      } else {\n        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;\n      }\n      registerInstance(this, this);\n    },\n    destroyed: function destroyed () {\n      registerInstance(this);\n    }\n  });\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get: function get () { return this._routerRoot._router }\n  });\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get: function get () { return this._routerRoot._route }\n  });\n\n  Vue.component('RouterView', View);\n  Vue.component('RouterLink', Link);\n\n  var strats = Vue.config.optionMergeStrategies;\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;\n}\n\n/*  */\n\nvar inBrowser = typeof window !== 'undefined';\n\n/*  */\n\nfunction createRouteMap (\n  routes,\n  oldPathList,\n  oldPathMap,\n  oldNameMap,\n  parentRoute\n) {\n  // the path list is used to control path matching priority\n  var pathList = oldPathList || [];\n  // $flow-disable-line\n  var pathMap = oldPathMap || Object.create(null);\n  // $flow-disable-line\n  var nameMap = oldNameMap || Object.create(null);\n\n  routes.forEach(function (route) {\n    addRouteRecord(pathList, pathMap, nameMap, route, parentRoute);\n  });\n\n  // ensure wildcard routes are always at the end\n  for (var i = 0, l = pathList.length; i < l; i++) {\n    if (pathList[i] === '*') {\n      pathList.push(pathList.splice(i, 1)[0]);\n      l--;\n      i--;\n    }\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    // warn if routes do not include leading slashes\n    var found = pathList\n    // check for missing leading slash\n      .filter(function (path) { return path && path.charAt(0) !== '*' && path.charAt(0) !== '/'; });\n\n    if (found.length > 0) {\n      var pathNames = found.map(function (path) { return (\"- \" + path); }).join('\\n');\n      warn(false, (\"Non-nested routes must include a leading slash character. Fix the following routes: \\n\" + pathNames));\n    }\n  }\n\n  return {\n    pathList: pathList,\n    pathMap: pathMap,\n    nameMap: nameMap\n  }\n}\n\nfunction addRouteRecord (\n  pathList,\n  pathMap,\n  nameMap,\n  route,\n  parent,\n  matchAs\n) {\n  var path = route.path;\n  var name = route.name;\n  if (process.env.NODE_ENV !== 'production') {\n    assert(path != null, \"\\\"path\\\" is required in a route configuration.\");\n    assert(\n      typeof route.component !== 'string',\n      \"route config \\\"component\\\" for path: \" + (String(\n        path || name\n      )) + \" cannot be a \" + \"string id. Use an actual component instead.\"\n    );\n\n    warn(\n      // eslint-disable-next-line no-control-regex\n      !/[^\\u0000-\\u007F]+/.test(path),\n      \"Route with path \\\"\" + path + \"\\\" contains unencoded characters, make sure \" +\n        \"your path is correctly encoded before passing it to the router. Use \" +\n        \"encodeURI to encode static segments of your path.\"\n    );\n  }\n\n  var pathToRegexpOptions =\n    route.pathToRegexpOptions || {};\n  var normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict);\n\n  if (typeof route.caseSensitive === 'boolean') {\n    pathToRegexpOptions.sensitive = route.caseSensitive;\n  }\n\n  var record = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),\n    components: route.components || { default: route.component },\n    alias: route.alias\n      ? typeof route.alias === 'string'\n        ? [route.alias]\n        : route.alias\n      : [],\n    instances: {},\n    enteredCbs: {},\n    name: name,\n    parent: parent,\n    matchAs: matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props:\n      route.props == null\n        ? {}\n        : route.components\n          ? route.props\n          : { default: route.props }\n  };\n\n  if (route.children) {\n    // Warn if route is named, does not redirect and has a default child route.\n    // If users navigate to this route by name, the default child will\n    // not be rendered (GH Issue #629)\n    if (process.env.NODE_ENV !== 'production') {\n      if (\n        route.name &&\n        !route.redirect &&\n        route.children.some(function (child) { return /^\\/?$/.test(child.path); })\n      ) {\n        warn(\n          false,\n          \"Named Route '\" + (route.name) + \"' has a default child route. \" +\n            \"When navigating to this named route (:to=\\\"{name: '\" + (route.name) + \"'}\\\"), \" +\n            \"the default child route will not be rendered. Remove the name from \" +\n            \"this route and use the name of the default child route for named \" +\n            \"links instead.\"\n        );\n      }\n    }\n    route.children.forEach(function (child) {\n      var childMatchAs = matchAs\n        ? cleanPath((matchAs + \"/\" + (child.path)))\n        : undefined;\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);\n    });\n  }\n\n  if (!pathMap[record.path]) {\n    pathList.push(record.path);\n    pathMap[record.path] = record;\n  }\n\n  if (route.alias !== undefined) {\n    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];\n    for (var i = 0; i < aliases.length; ++i) {\n      var alias = aliases[i];\n      if (process.env.NODE_ENV !== 'production' && alias === path) {\n        warn(\n          false,\n          (\"Found an alias with the same value as the path: \\\"\" + path + \"\\\". You have to remove that alias. It will be ignored in development.\")\n        );\n        // skip in dev to make it work\n        continue\n      }\n\n      var aliasRoute = {\n        path: alias,\n        children: route.children\n      };\n      addRouteRecord(\n        pathList,\n        pathMap,\n        nameMap,\n        aliasRoute,\n        parent,\n        record.path || '/' // matchAs\n      );\n    }\n  }\n\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record;\n    } else if (process.env.NODE_ENV !== 'production' && !matchAs) {\n      warn(\n        false,\n        \"Duplicate named routes definition: \" +\n          \"{ name: \\\"\" + name + \"\\\", path: \\\"\" + (record.path) + \"\\\" }\"\n      );\n    }\n  }\n}\n\nfunction compileRouteRegex (\n  path,\n  pathToRegexpOptions\n) {\n  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);\n  if (process.env.NODE_ENV !== 'production') {\n    var keys = Object.create(null);\n    regex.keys.forEach(function (key) {\n      warn(\n        !keys[key.name],\n        (\"Duplicate param keys in route with path: \\\"\" + path + \"\\\"\")\n      );\n      keys[key.name] = true;\n    });\n  }\n  return regex\n}\n\nfunction normalizePath (\n  path,\n  parent,\n  strict\n) {\n  if (!strict) { path = path.replace(/\\/$/, ''); }\n  if (path[0] === '/') { return path }\n  if (parent == null) { return path }\n  return cleanPath(((parent.path) + \"/\" + path))\n}\n\n/*  */\n\n\n\nfunction createMatcher (\n  routes,\n  router\n) {\n  var ref = createRouteMap(routes);\n  var pathList = ref.pathList;\n  var pathMap = ref.pathMap;\n  var nameMap = ref.nameMap;\n\n  function addRoutes (routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap);\n  }\n\n  function addRoute (parentOrRoute, route) {\n    var parent = (typeof parentOrRoute !== 'object') ? nameMap[parentOrRoute] : undefined;\n    // $flow-disable-line\n    createRouteMap([route || parentOrRoute], pathList, pathMap, nameMap, parent);\n\n    // add aliases of parent\n    if (parent && parent.alias.length) {\n      createRouteMap(\n        // $flow-disable-line route is defined if parent is\n        parent.alias.map(function (alias) { return ({ path: alias, children: [route] }); }),\n        pathList,\n        pathMap,\n        nameMap,\n        parent\n      );\n    }\n  }\n\n  function getRoutes () {\n    return pathList.map(function (path) { return pathMap[path]; })\n  }\n\n  function match (\n    raw,\n    currentRoute,\n    redirectedFrom\n  ) {\n    var location = normalizeLocation(raw, currentRoute, false, router);\n    var name = location.name;\n\n    if (name) {\n      var record = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        warn(record, (\"Route with name '\" + name + \"' does not exist\"));\n      }\n      if (!record) { return _createRoute(null, location) }\n      var paramNames = record.regex.keys\n        .filter(function (key) { return !key.optional; })\n        .map(function (key) { return key.name; });\n\n      if (typeof location.params !== 'object') {\n        location.params = {};\n      }\n\n      if (currentRoute && typeof currentRoute.params === 'object') {\n        for (var key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key];\n          }\n        }\n      }\n\n      location.path = fillParams(record.path, location.params, (\"named route \\\"\" + name + \"\\\"\"));\n      return _createRoute(record, location, redirectedFrom)\n    } else if (location.path) {\n      location.params = {};\n      for (var i = 0; i < pathList.length; i++) {\n        var path = pathList[i];\n        var record$1 = pathMap[path];\n        if (matchRoute(record$1.regex, location.path, location.params)) {\n          return _createRoute(record$1, location, redirectedFrom)\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location)\n  }\n\n  function redirect (\n    record,\n    location\n  ) {\n    var originalRedirect = record.redirect;\n    var redirect = typeof originalRedirect === 'function'\n      ? originalRedirect(createRoute(record, location, null, router))\n      : originalRedirect;\n\n    if (typeof redirect === 'string') {\n      redirect = { path: redirect };\n    }\n\n    if (!redirect || typeof redirect !== 'object') {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false, (\"invalid redirect option: \" + (JSON.stringify(redirect)))\n        );\n      }\n      return _createRoute(null, location)\n    }\n\n    var re = redirect;\n    var name = re.name;\n    var path = re.path;\n    var query = location.query;\n    var hash = location.hash;\n    var params = location.params;\n    query = re.hasOwnProperty('query') ? re.query : query;\n    hash = re.hasOwnProperty('hash') ? re.hash : hash;\n    params = re.hasOwnProperty('params') ? re.params : params;\n\n    if (name) {\n      // resolved named direct\n      var targetRecord = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        assert(targetRecord, (\"redirect failed: named route \\\"\" + name + \"\\\" not found.\"));\n      }\n      return match({\n        _normalized: true,\n        name: name,\n        query: query,\n        hash: hash,\n        params: params\n      }, undefined, location)\n    } else if (path) {\n      // 1. resolve relative redirect\n      var rawPath = resolveRecordPath(path, record);\n      // 2. resolve params\n      var resolvedPath = fillParams(rawPath, params, (\"redirect route with path \\\"\" + rawPath + \"\\\"\"));\n      // 3. rematch with existing query and hash\n      return match({\n        _normalized: true,\n        path: resolvedPath,\n        query: query,\n        hash: hash\n      }, undefined, location)\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(false, (\"invalid redirect option: \" + (JSON.stringify(redirect))));\n      }\n      return _createRoute(null, location)\n    }\n  }\n\n  function alias (\n    record,\n    location,\n    matchAs\n  ) {\n    var aliasedPath = fillParams(matchAs, location.params, (\"aliased route with path \\\"\" + matchAs + \"\\\"\"));\n    var aliasedMatch = match({\n      _normalized: true,\n      path: aliasedPath\n    });\n    if (aliasedMatch) {\n      var matched = aliasedMatch.matched;\n      var aliasedRecord = matched[matched.length - 1];\n      location.params = aliasedMatch.params;\n      return _createRoute(aliasedRecord, location)\n    }\n    return _createRoute(null, location)\n  }\n\n  function _createRoute (\n    record,\n    location,\n    redirectedFrom\n  ) {\n    if (record && record.redirect) {\n      return redirect(record, redirectedFrom || location)\n    }\n    if (record && record.matchAs) {\n      return alias(record, location, record.matchAs)\n    }\n    return createRoute(record, location, redirectedFrom, router)\n  }\n\n  return {\n    match: match,\n    addRoute: addRoute,\n    getRoutes: getRoutes,\n    addRoutes: addRoutes\n  }\n}\n\nfunction matchRoute (\n  regex,\n  path,\n  params\n) {\n  var m = path.match(regex);\n\n  if (!m) {\n    return false\n  } else if (!params) {\n    return true\n  }\n\n  for (var i = 1, len = m.length; i < len; ++i) {\n    var key = regex.keys[i - 1];\n    if (key) {\n      // Fix #1994: using * with props: true generates a param named 0\n      params[key.name || 'pathMatch'] = typeof m[i] === 'string' ? decode(m[i]) : m[i];\n    }\n  }\n\n  return true\n}\n\nfunction resolveRecordPath (path, record) {\n  return resolvePath(path, record.parent ? record.parent.path : '/', true)\n}\n\n/*  */\n\n// use User Timing api (if present) for more accurate key precision\nvar Time =\n  inBrowser && window.performance && window.performance.now\n    ? window.performance\n    : Date;\n\nfunction genStateKey () {\n  return Time.now().toFixed(3)\n}\n\nvar _key = genStateKey();\n\nfunction getStateKey () {\n  return _key\n}\n\nfunction setStateKey (key) {\n  return (_key = key)\n}\n\n/*  */\n\nvar positionStore = Object.create(null);\n\nfunction setupScroll () {\n  // Prevent browser scroll behavior on History popstate\n  if ('scrollRestoration' in window.history) {\n    window.history.scrollRestoration = 'manual';\n  }\n  // Fix for #1585 for Firefox\n  // Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678\n  // Fix for #2774 Support for apps loaded from Windows file shares not mapped to network drives: replaced location.origin with\n  // window.location.protocol + '//' + window.location.host\n  // location.host contains the port and location.hostname doesn't\n  var protocolAndPath = window.location.protocol + '//' + window.location.host;\n  var absolutePath = window.location.href.replace(protocolAndPath, '');\n  // preserve existing history state as it could be overriden by the user\n  var stateCopy = extend({}, window.history.state);\n  stateCopy.key = getStateKey();\n  window.history.replaceState(stateCopy, '', absolutePath);\n  window.addEventListener('popstate', handlePopState);\n  return function () {\n    window.removeEventListener('popstate', handlePopState);\n  }\n}\n\nfunction handleScroll (\n  router,\n  to,\n  from,\n  isPop\n) {\n  if (!router.app) {\n    return\n  }\n\n  var behavior = router.options.scrollBehavior;\n  if (!behavior) {\n    return\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(typeof behavior === 'function', \"scrollBehavior must be a function\");\n  }\n\n  // wait until re-render finishes before scrolling\n  router.app.$nextTick(function () {\n    var position = getScrollPosition();\n    var shouldScroll = behavior.call(\n      router,\n      to,\n      from,\n      isPop ? position : null\n    );\n\n    if (!shouldScroll) {\n      return\n    }\n\n    if (typeof shouldScroll.then === 'function') {\n      shouldScroll\n        .then(function (shouldScroll) {\n          scrollToPosition((shouldScroll), position);\n        })\n        .catch(function (err) {\n          if (process.env.NODE_ENV !== 'production') {\n            assert(false, err.toString());\n          }\n        });\n    } else {\n      scrollToPosition(shouldScroll, position);\n    }\n  });\n}\n\nfunction saveScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    positionStore[key] = {\n      x: window.pageXOffset,\n      y: window.pageYOffset\n    };\n  }\n}\n\nfunction handlePopState (e) {\n  saveScrollPosition();\n  if (e.state && e.state.key) {\n    setStateKey(e.state.key);\n  }\n}\n\nfunction getScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    return positionStore[key]\n  }\n}\n\nfunction getElementPosition (el, offset) {\n  var docEl = document.documentElement;\n  var docRect = docEl.getBoundingClientRect();\n  var elRect = el.getBoundingClientRect();\n  return {\n    x: elRect.left - docRect.left - offset.x,\n    y: elRect.top - docRect.top - offset.y\n  }\n}\n\nfunction isValidPosition (obj) {\n  return isNumber(obj.x) || isNumber(obj.y)\n}\n\nfunction normalizePosition (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : window.pageXOffset,\n    y: isNumber(obj.y) ? obj.y : window.pageYOffset\n  }\n}\n\nfunction normalizeOffset (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : 0,\n    y: isNumber(obj.y) ? obj.y : 0\n  }\n}\n\nfunction isNumber (v) {\n  return typeof v === 'number'\n}\n\nvar hashStartsWithNumberRE = /^#\\d/;\n\nfunction scrollToPosition (shouldScroll, position) {\n  var isObject = typeof shouldScroll === 'object';\n  if (isObject && typeof shouldScroll.selector === 'string') {\n    // getElementById would still fail if the selector contains a more complicated query like #main[data-attr]\n    // but at the same time, it doesn't make much sense to select an element with an id and an extra selector\n    var el = hashStartsWithNumberRE.test(shouldScroll.selector) // $flow-disable-line\n      ? document.getElementById(shouldScroll.selector.slice(1)) // $flow-disable-line\n      : document.querySelector(shouldScroll.selector);\n\n    if (el) {\n      var offset =\n        shouldScroll.offset && typeof shouldScroll.offset === 'object'\n          ? shouldScroll.offset\n          : {};\n      offset = normalizeOffset(offset);\n      position = getElementPosition(el, offset);\n    } else if (isValidPosition(shouldScroll)) {\n      position = normalizePosition(shouldScroll);\n    }\n  } else if (isObject && isValidPosition(shouldScroll)) {\n    position = normalizePosition(shouldScroll);\n  }\n\n  if (position) {\n    // $flow-disable-line\n    if ('scrollBehavior' in document.documentElement.style) {\n      window.scrollTo({\n        left: position.x,\n        top: position.y,\n        // $flow-disable-line\n        behavior: shouldScroll.behavior\n      });\n    } else {\n      window.scrollTo(position.x, position.y);\n    }\n  }\n}\n\n/*  */\n\nvar supportsPushState =\n  inBrowser &&\n  (function () {\n    var ua = window.navigator.userAgent;\n\n    if (\n      (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&\n      ua.indexOf('Mobile Safari') !== -1 &&\n      ua.indexOf('Chrome') === -1 &&\n      ua.indexOf('Windows Phone') === -1\n    ) {\n      return false\n    }\n\n    return window.history && typeof window.history.pushState === 'function'\n  })();\n\nfunction pushState (url, replace) {\n  saveScrollPosition();\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  var history = window.history;\n  try {\n    if (replace) {\n      // preserve existing history state as it could be overriden by the user\n      var stateCopy = extend({}, history.state);\n      stateCopy.key = getStateKey();\n      history.replaceState(stateCopy, '', url);\n    } else {\n      history.pushState({ key: setStateKey(genStateKey()) }, '', url);\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url);\n  }\n}\n\nfunction replaceState (url) {\n  pushState(url, true);\n}\n\n// When changing thing, also edit router.d.ts\nvar NavigationFailureType = {\n  redirected: 2,\n  aborted: 4,\n  cancelled: 8,\n  duplicated: 16\n};\n\nfunction createNavigationRedirectedError (from, to) {\n  return createRouterError(\n    from,\n    to,\n    NavigationFailureType.redirected,\n    (\"Redirected when going from \\\"\" + (from.fullPath) + \"\\\" to \\\"\" + (stringifyRoute(\n      to\n    )) + \"\\\" via a navigation guard.\")\n  )\n}\n\nfunction createNavigationDuplicatedError (from, to) {\n  var error = createRouterError(\n    from,\n    to,\n    NavigationFailureType.duplicated,\n    (\"Avoided redundant navigation to current location: \\\"\" + (from.fullPath) + \"\\\".\")\n  );\n  // backwards compatible with the first introduction of Errors\n  error.name = 'NavigationDuplicated';\n  return error\n}\n\nfunction createNavigationCancelledError (from, to) {\n  return createRouterError(\n    from,\n    to,\n    NavigationFailureType.cancelled,\n    (\"Navigation cancelled from \\\"\" + (from.fullPath) + \"\\\" to \\\"\" + (to.fullPath) + \"\\\" with a new navigation.\")\n  )\n}\n\nfunction createNavigationAbortedError (from, to) {\n  return createRouterError(\n    from,\n    to,\n    NavigationFailureType.aborted,\n    (\"Navigation aborted from \\\"\" + (from.fullPath) + \"\\\" to \\\"\" + (to.fullPath) + \"\\\" via a navigation guard.\")\n  )\n}\n\nfunction createRouterError (from, to, type, message) {\n  var error = new Error(message);\n  error._isRouter = true;\n  error.from = from;\n  error.to = to;\n  error.type = type;\n\n  return error\n}\n\nvar propertiesToLog = ['params', 'query', 'hash'];\n\nfunction stringifyRoute (to) {\n  if (typeof to === 'string') { return to }\n  if ('path' in to) { return to.path }\n  var location = {};\n  propertiesToLog.forEach(function (key) {\n    if (key in to) { location[key] = to[key]; }\n  });\n  return JSON.stringify(location, null, 2)\n}\n\nfunction isError (err) {\n  return Object.prototype.toString.call(err).indexOf('Error') > -1\n}\n\nfunction isNavigationFailure (err, errorType) {\n  return (\n    isError(err) &&\n    err._isRouter &&\n    (errorType == null || err.type === errorType)\n  )\n}\n\n/*  */\n\nfunction runQueue (queue, fn, cb) {\n  var step = function (index) {\n    if (index >= queue.length) {\n      cb();\n    } else {\n      if (queue[index]) {\n        fn(queue[index], function () {\n          step(index + 1);\n        });\n      } else {\n        step(index + 1);\n      }\n    }\n  };\n  step(0);\n}\n\n/*  */\n\nfunction resolveAsyncComponents (matched) {\n  return function (to, from, next) {\n    var hasAsync = false;\n    var pending = 0;\n    var error = null;\n\n    flatMapComponents(matched, function (def, _, match, key) {\n      // if it's a function and doesn't have cid attached,\n      // assume it's an async component resolve function.\n      // we are not using Vue's default async resolving mechanism because\n      // we want to halt the navigation until the incoming component has been\n      // resolved.\n      if (typeof def === 'function' && def.cid === undefined) {\n        hasAsync = true;\n        pending++;\n\n        var resolve = once(function (resolvedDef) {\n          if (isESModule(resolvedDef)) {\n            resolvedDef = resolvedDef.default;\n          }\n          // save resolved on async factory in case it's used elsewhere\n          def.resolved = typeof resolvedDef === 'function'\n            ? resolvedDef\n            : _Vue.extend(resolvedDef);\n          match.components[key] = resolvedDef;\n          pending--;\n          if (pending <= 0) {\n            next();\n          }\n        });\n\n        var reject = once(function (reason) {\n          var msg = \"Failed to resolve async component \" + key + \": \" + reason;\n          process.env.NODE_ENV !== 'production' && warn(false, msg);\n          if (!error) {\n            error = isError(reason)\n              ? reason\n              : new Error(msg);\n            next(error);\n          }\n        });\n\n        var res;\n        try {\n          res = def(resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n        if (res) {\n          if (typeof res.then === 'function') {\n            res.then(resolve, reject);\n          } else {\n            // new syntax in Vue 2.3\n            var comp = res.component;\n            if (comp && typeof comp.then === 'function') {\n              comp.then(resolve, reject);\n            }\n          }\n        }\n      }\n    });\n\n    if (!hasAsync) { next(); }\n  }\n}\n\nfunction flatMapComponents (\n  matched,\n  fn\n) {\n  return flatten(matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) { return fn(\n      m.components[key],\n      m.instances[key],\n      m, key\n    ); })\n  }))\n}\n\nfunction flatten (arr) {\n  return Array.prototype.concat.apply([], arr)\n}\n\nvar hasSymbol =\n  typeof Symbol === 'function' &&\n  typeof Symbol.toStringTag === 'symbol';\n\nfunction isESModule (obj) {\n  return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module')\n}\n\n// in Webpack 2, require.ensure now also returns a Promise\n// so the resolve/reject functions may get called an extra time\n// if the user uses an arrow function shorthand that happens to\n// return that Promise.\nfunction once (fn) {\n  var called = false;\n  return function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    if (called) { return }\n    called = true;\n    return fn.apply(this, args)\n  }\n}\n\n/*  */\n\nvar History = function History (router, base) {\n  this.router = router;\n  this.base = normalizeBase(base);\n  // start with a route object that stands for \"nowhere\"\n  this.current = START;\n  this.pending = null;\n  this.ready = false;\n  this.readyCbs = [];\n  this.readyErrorCbs = [];\n  this.errorCbs = [];\n  this.listeners = [];\n};\n\nHistory.prototype.listen = function listen (cb) {\n  this.cb = cb;\n};\n\nHistory.prototype.onReady = function onReady (cb, errorCb) {\n  if (this.ready) {\n    cb();\n  } else {\n    this.readyCbs.push(cb);\n    if (errorCb) {\n      this.readyErrorCbs.push(errorCb);\n    }\n  }\n};\n\nHistory.prototype.onError = function onError (errorCb) {\n  this.errorCbs.push(errorCb);\n};\n\nHistory.prototype.transitionTo = function transitionTo (\n  location,\n  onComplete,\n  onAbort\n) {\n    var this$1$1 = this;\n\n  var route;\n  // catch redirect option https://github.com/vuejs/vue-router/issues/3201\n  try {\n    route = this.router.match(location, this.current);\n  } catch (e) {\n    this.errorCbs.forEach(function (cb) {\n      cb(e);\n    });\n    // Exception should still be thrown\n    throw e\n  }\n  var prev = this.current;\n  this.confirmTransition(\n    route,\n    function () {\n      this$1$1.updateRoute(route);\n      onComplete && onComplete(route);\n      this$1$1.ensureURL();\n      this$1$1.router.afterHooks.forEach(function (hook) {\n        hook && hook(route, prev);\n      });\n\n      // fire ready cbs once\n      if (!this$1$1.ready) {\n        this$1$1.ready = true;\n        this$1$1.readyCbs.forEach(function (cb) {\n          cb(route);\n        });\n      }\n    },\n    function (err) {\n      if (onAbort) {\n        onAbort(err);\n      }\n      if (err && !this$1$1.ready) {\n        // Initial redirection should not mark the history as ready yet\n        // because it's triggered by the redirection instead\n        // https://github.com/vuejs/vue-router/issues/3225\n        // https://github.com/vuejs/vue-router/issues/3331\n        if (!isNavigationFailure(err, NavigationFailureType.redirected) || prev !== START) {\n          this$1$1.ready = true;\n          this$1$1.readyErrorCbs.forEach(function (cb) {\n            cb(err);\n          });\n        }\n      }\n    }\n  );\n};\n\nHistory.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {\n    var this$1$1 = this;\n\n  var current = this.current;\n  this.pending = route;\n  var abort = function (err) {\n    // changed after adding errors with\n    // https://github.com/vuejs/vue-router/pull/3047 before that change,\n    // redirect and aborted navigation would produce an err == null\n    if (!isNavigationFailure(err) && isError(err)) {\n      if (this$1$1.errorCbs.length) {\n        this$1$1.errorCbs.forEach(function (cb) {\n          cb(err);\n        });\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn(false, 'uncaught error during route navigation:');\n        }\n        console.error(err);\n      }\n    }\n    onAbort && onAbort(err);\n  };\n  var lastRouteIndex = route.matched.length - 1;\n  var lastCurrentIndex = current.matched.length - 1;\n  if (\n    isSameRoute(route, current) &&\n    // in the case the route map has been dynamically appended to\n    lastRouteIndex === lastCurrentIndex &&\n    route.matched[lastRouteIndex] === current.matched[lastCurrentIndex]\n  ) {\n    this.ensureURL();\n    if (route.hash) {\n      handleScroll(this.router, current, route, false);\n    }\n    return abort(createNavigationDuplicatedError(current, route))\n  }\n\n  var ref = resolveQueue(\n    this.current.matched,\n    route.matched\n  );\n    var updated = ref.updated;\n    var deactivated = ref.deactivated;\n    var activated = ref.activated;\n\n  var queue = [].concat(\n    // in-component leave guards\n    extractLeaveGuards(deactivated),\n    // global before hooks\n    this.router.beforeHooks,\n    // in-component update hooks\n    extractUpdateHooks(updated),\n    // in-config enter guards\n    activated.map(function (m) { return m.beforeEnter; }),\n    // async components\n    resolveAsyncComponents(activated)\n  );\n\n  var iterator = function (hook, next) {\n    if (this$1$1.pending !== route) {\n      return abort(createNavigationCancelledError(current, route))\n    }\n    try {\n      hook(route, current, function (to) {\n        if (to === false) {\n          // next(false) -> abort navigation, ensure current URL\n          this$1$1.ensureURL(true);\n          abort(createNavigationAbortedError(current, route));\n        } else if (isError(to)) {\n          this$1$1.ensureURL(true);\n          abort(to);\n        } else if (\n          typeof to === 'string' ||\n          (typeof to === 'object' &&\n            (typeof to.path === 'string' || typeof to.name === 'string'))\n        ) {\n          // next('/') or next({ path: '/' }) -> redirect\n          abort(createNavigationRedirectedError(current, route));\n          if (typeof to === 'object' && to.replace) {\n            this$1$1.replace(to);\n          } else {\n            this$1$1.push(to);\n          }\n        } else {\n          // confirm transition and pass on the value\n          next(to);\n        }\n      });\n    } catch (e) {\n      abort(e);\n    }\n  };\n\n  runQueue(queue, iterator, function () {\n    // wait until async components are resolved before\n    // extracting in-component enter guards\n    var enterGuards = extractEnterGuards(activated);\n    var queue = enterGuards.concat(this$1$1.router.resolveHooks);\n    runQueue(queue, iterator, function () {\n      if (this$1$1.pending !== route) {\n        return abort(createNavigationCancelledError(current, route))\n      }\n      this$1$1.pending = null;\n      onComplete(route);\n      if (this$1$1.router.app) {\n        this$1$1.router.app.$nextTick(function () {\n          handleRouteEntered(route);\n        });\n      }\n    });\n  });\n};\n\nHistory.prototype.updateRoute = function updateRoute (route) {\n  this.current = route;\n  this.cb && this.cb(route);\n};\n\nHistory.prototype.setupListeners = function setupListeners () {\n  // Default implementation is empty\n};\n\nHistory.prototype.teardown = function teardown () {\n  // clean up event listeners\n  // https://github.com/vuejs/vue-router/issues/2341\n  this.listeners.forEach(function (cleanupListener) {\n    cleanupListener();\n  });\n  this.listeners = [];\n\n  // reset current history route\n  // https://github.com/vuejs/vue-router/issues/3294\n  this.current = START;\n  this.pending = null;\n};\n\nfunction normalizeBase (base) {\n  if (!base) {\n    if (inBrowser) {\n      // respect <base> tag\n      var baseEl = document.querySelector('base');\n      base = (baseEl && baseEl.getAttribute('href')) || '/';\n      // strip full URL origin\n      base = base.replace(/^https?:\\/\\/[^\\/]+/, '');\n    } else {\n      base = '/';\n    }\n  }\n  // make sure there's the starting slash\n  if (base.charAt(0) !== '/') {\n    base = '/' + base;\n  }\n  // remove trailing slash\n  return base.replace(/\\/$/, '')\n}\n\nfunction resolveQueue (\n  current,\n  next\n) {\n  var i;\n  var max = Math.max(current.length, next.length);\n  for (i = 0; i < max; i++) {\n    if (current[i] !== next[i]) {\n      break\n    }\n  }\n  return {\n    updated: next.slice(0, i),\n    activated: next.slice(i),\n    deactivated: current.slice(i)\n  }\n}\n\nfunction extractGuards (\n  records,\n  name,\n  bind,\n  reverse\n) {\n  var guards = flatMapComponents(records, function (def, instance, match, key) {\n    var guard = extractGuard(def, name);\n    if (guard) {\n      return Array.isArray(guard)\n        ? guard.map(function (guard) { return bind(guard, instance, match, key); })\n        : bind(guard, instance, match, key)\n    }\n  });\n  return flatten(reverse ? guards.reverse() : guards)\n}\n\nfunction extractGuard (\n  def,\n  key\n) {\n  if (typeof def !== 'function') {\n    // extend now so that global mixins are applied.\n    def = _Vue.extend(def);\n  }\n  return def.options[key]\n}\n\nfunction extractLeaveGuards (deactivated) {\n  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)\n}\n\nfunction extractUpdateHooks (updated) {\n  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)\n}\n\nfunction bindGuard (guard, instance) {\n  if (instance) {\n    return function boundRouteGuard () {\n      return guard.apply(instance, arguments)\n    }\n  }\n}\n\nfunction extractEnterGuards (\n  activated\n) {\n  return extractGuards(\n    activated,\n    'beforeRouteEnter',\n    function (guard, _, match, key) {\n      return bindEnterGuard(guard, match, key)\n    }\n  )\n}\n\nfunction bindEnterGuard (\n  guard,\n  match,\n  key\n) {\n  return function routeEnterGuard (to, from, next) {\n    return guard(to, from, function (cb) {\n      if (typeof cb === 'function') {\n        if (!match.enteredCbs[key]) {\n          match.enteredCbs[key] = [];\n        }\n        match.enteredCbs[key].push(cb);\n      }\n      next(cb);\n    })\n  }\n}\n\n/*  */\n\nvar HTML5History = /*@__PURE__*/(function (History) {\n  function HTML5History (router, base) {\n    History.call(this, router, base);\n\n    this._startLocation = getLocation(this.base);\n  }\n\n  if ( History ) HTML5History.__proto__ = History;\n  HTML5History.prototype = Object.create( History && History.prototype );\n  HTML5History.prototype.constructor = HTML5History;\n\n  HTML5History.prototype.setupListeners = function setupListeners () {\n    var this$1$1 = this;\n\n    if (this.listeners.length > 0) {\n      return\n    }\n\n    var router = this.router;\n    var expectScroll = router.options.scrollBehavior;\n    var supportsScroll = supportsPushState && expectScroll;\n\n    if (supportsScroll) {\n      this.listeners.push(setupScroll());\n    }\n\n    var handleRoutingEvent = function () {\n      var current = this$1$1.current;\n\n      // Avoiding first `popstate` event dispatched in some browsers but first\n      // history route not updated since async guard at the same time.\n      var location = getLocation(this$1$1.base);\n      if (this$1$1.current === START && location === this$1$1._startLocation) {\n        return\n      }\n\n      this$1$1.transitionTo(location, function (route) {\n        if (supportsScroll) {\n          handleScroll(router, route, current, true);\n        }\n      });\n    };\n    window.addEventListener('popstate', handleRoutingEvent);\n    this.listeners.push(function () {\n      window.removeEventListener('popstate', handleRoutingEvent);\n    });\n  };\n\n  HTML5History.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HTML5History.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushState(cleanPath(this$1$1.base + route.fullPath));\n      handleScroll(this$1$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceState(cleanPath(this$1$1.base + route.fullPath));\n      handleScroll(this$1$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.ensureURL = function ensureURL (push) {\n    if (getLocation(this.base) !== this.current.fullPath) {\n      var current = cleanPath(this.base + this.current.fullPath);\n      push ? pushState(current) : replaceState(current);\n    }\n  };\n\n  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getLocation(this.base)\n  };\n\n  return HTML5History;\n}(History));\n\nfunction getLocation (base) {\n  var path = window.location.pathname;\n  var pathLowerCase = path.toLowerCase();\n  var baseLowerCase = base.toLowerCase();\n  // base=\"/a\" shouldn't turn path=\"/app\" into \"/a/pp\"\n  // https://github.com/vuejs/vue-router/issues/3555\n  // so we ensure the trailing slash in the base\n  if (base && ((pathLowerCase === baseLowerCase) ||\n    (pathLowerCase.indexOf(cleanPath(baseLowerCase + '/')) === 0))) {\n    path = path.slice(base.length);\n  }\n  return (path || '/') + window.location.search + window.location.hash\n}\n\n/*  */\n\nvar HashHistory = /*@__PURE__*/(function (History) {\n  function HashHistory (router, base, fallback) {\n    History.call(this, router, base);\n    // check history fallback deeplinking\n    if (fallback && checkFallback(this.base)) {\n      return\n    }\n    ensureSlash();\n  }\n\n  if ( History ) HashHistory.__proto__ = History;\n  HashHistory.prototype = Object.create( History && History.prototype );\n  HashHistory.prototype.constructor = HashHistory;\n\n  // this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  HashHistory.prototype.setupListeners = function setupListeners () {\n    var this$1$1 = this;\n\n    if (this.listeners.length > 0) {\n      return\n    }\n\n    var router = this.router;\n    var expectScroll = router.options.scrollBehavior;\n    var supportsScroll = supportsPushState && expectScroll;\n\n    if (supportsScroll) {\n      this.listeners.push(setupScroll());\n    }\n\n    var handleRoutingEvent = function () {\n      var current = this$1$1.current;\n      if (!ensureSlash()) {\n        return\n      }\n      this$1$1.transitionTo(getHash(), function (route) {\n        if (supportsScroll) {\n          handleScroll(this$1$1.router, route, current, true);\n        }\n        if (!supportsPushState) {\n          replaceHash(route.fullPath);\n        }\n      });\n    };\n    var eventType = supportsPushState ? 'popstate' : 'hashchange';\n    window.addEventListener(\n      eventType,\n      handleRoutingEvent\n    );\n    this.listeners.push(function () {\n      window.removeEventListener(eventType, handleRoutingEvent);\n    });\n  };\n\n  HashHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(\n      location,\n      function (route) {\n        pushHash(route.fullPath);\n        handleScroll(this$1$1.router, route, fromRoute, false);\n        onComplete && onComplete(route);\n      },\n      onAbort\n    );\n  };\n\n  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(\n      location,\n      function (route) {\n        replaceHash(route.fullPath);\n        handleScroll(this$1$1.router, route, fromRoute, false);\n        onComplete && onComplete(route);\n      },\n      onAbort\n    );\n  };\n\n  HashHistory.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HashHistory.prototype.ensureURL = function ensureURL (push) {\n    var current = this.current.fullPath;\n    if (getHash() !== current) {\n      push ? pushHash(current) : replaceHash(current);\n    }\n  };\n\n  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getHash()\n  };\n\n  return HashHistory;\n}(History));\n\nfunction checkFallback (base) {\n  var location = getLocation(base);\n  if (!/^\\/#/.test(location)) {\n    window.location.replace(cleanPath(base + '/#' + location));\n    return true\n  }\n}\n\nfunction ensureSlash () {\n  var path = getHash();\n  if (path.charAt(0) === '/') {\n    return true\n  }\n  replaceHash('/' + path);\n  return false\n}\n\nfunction getHash () {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var index = href.indexOf('#');\n  // empty path\n  if (index < 0) { return '' }\n\n  href = href.slice(index + 1);\n\n  return href\n}\n\nfunction getUrl (path) {\n  var href = window.location.href;\n  var i = href.indexOf('#');\n  var base = i >= 0 ? href.slice(0, i) : href;\n  return (base + \"#\" + path)\n}\n\nfunction pushHash (path) {\n  if (supportsPushState) {\n    pushState(getUrl(path));\n  } else {\n    window.location.hash = path;\n  }\n}\n\nfunction replaceHash (path) {\n  if (supportsPushState) {\n    replaceState(getUrl(path));\n  } else {\n    window.location.replace(getUrl(path));\n  }\n}\n\n/*  */\n\nvar AbstractHistory = /*@__PURE__*/(function (History) {\n  function AbstractHistory (router, base) {\n    History.call(this, router, base);\n    this.stack = [];\n    this.index = -1;\n  }\n\n  if ( History ) AbstractHistory.__proto__ = History;\n  AbstractHistory.prototype = Object.create( History && History.prototype );\n  AbstractHistory.prototype.constructor = AbstractHistory;\n\n  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1$1 = this;\n\n    this.transitionTo(\n      location,\n      function (route) {\n        this$1$1.stack = this$1$1.stack.slice(0, this$1$1.index + 1).concat(route);\n        this$1$1.index++;\n        onComplete && onComplete(route);\n      },\n      onAbort\n    );\n  };\n\n  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1$1 = this;\n\n    this.transitionTo(\n      location,\n      function (route) {\n        this$1$1.stack = this$1$1.stack.slice(0, this$1$1.index).concat(route);\n        onComplete && onComplete(route);\n      },\n      onAbort\n    );\n  };\n\n  AbstractHistory.prototype.go = function go (n) {\n    var this$1$1 = this;\n\n    var targetIndex = this.index + n;\n    if (targetIndex < 0 || targetIndex >= this.stack.length) {\n      return\n    }\n    var route = this.stack[targetIndex];\n    this.confirmTransition(\n      route,\n      function () {\n        var prev = this$1$1.current;\n        this$1$1.index = targetIndex;\n        this$1$1.updateRoute(route);\n        this$1$1.router.afterHooks.forEach(function (hook) {\n          hook && hook(route, prev);\n        });\n      },\n      function (err) {\n        if (isNavigationFailure(err, NavigationFailureType.duplicated)) {\n          this$1$1.index = targetIndex;\n        }\n      }\n    );\n  };\n\n  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    var current = this.stack[this.stack.length - 1];\n    return current ? current.fullPath : '/'\n  };\n\n  AbstractHistory.prototype.ensureURL = function ensureURL () {\n    // noop\n  };\n\n  return AbstractHistory;\n}(History));\n\n/*  */\n\n\n\nvar VueRouter = function VueRouter (options) {\n  if ( options === void 0 ) options = {};\n\n  if (process.env.NODE_ENV !== 'production') {\n    warn(this instanceof VueRouter, \"Router must be called with the new operator.\");\n  }\n  this.app = null;\n  this.apps = [];\n  this.options = options;\n  this.beforeHooks = [];\n  this.resolveHooks = [];\n  this.afterHooks = [];\n  this.matcher = createMatcher(options.routes || [], this);\n\n  var mode = options.mode || 'hash';\n  this.fallback =\n    mode === 'history' && !supportsPushState && options.fallback !== false;\n  if (this.fallback) {\n    mode = 'hash';\n  }\n  if (!inBrowser) {\n    mode = 'abstract';\n  }\n  this.mode = mode;\n\n  switch (mode) {\n    case 'history':\n      this.history = new HTML5History(this, options.base);\n      break\n    case 'hash':\n      this.history = new HashHistory(this, options.base, this.fallback);\n      break\n    case 'abstract':\n      this.history = new AbstractHistory(this, options.base);\n      break\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        assert(false, (\"invalid mode: \" + mode));\n      }\n  }\n};\n\nvar prototypeAccessors = { currentRoute: { configurable: true } };\n\nVueRouter.prototype.match = function match (raw, current, redirectedFrom) {\n  return this.matcher.match(raw, current, redirectedFrom)\n};\n\nprototypeAccessors.currentRoute.get = function () {\n  return this.history && this.history.current\n};\n\nVueRouter.prototype.init = function init (app /* Vue component instance */) {\n    var this$1$1 = this;\n\n  process.env.NODE_ENV !== 'production' &&\n    assert(\n      install.installed,\n      \"not installed. Make sure to call `Vue.use(VueRouter)` \" +\n        \"before creating root instance.\"\n    );\n\n  this.apps.push(app);\n\n  // set up app destroyed handler\n  // https://github.com/vuejs/vue-router/issues/2639\n  app.$once('hook:destroyed', function () {\n    // clean out app from this.apps array once destroyed\n    var index = this$1$1.apps.indexOf(app);\n    if (index > -1) { this$1$1.apps.splice(index, 1); }\n    // ensure we still have a main app or null if no apps\n    // we do not release the router so it can be reused\n    if (this$1$1.app === app) { this$1$1.app = this$1$1.apps[0] || null; }\n\n    if (!this$1$1.app) { this$1$1.history.teardown(); }\n  });\n\n  // main app previously initialized\n  // return as we don't need to set up new history listener\n  if (this.app) {\n    return\n  }\n\n  this.app = app;\n\n  var history = this.history;\n\n  if (history instanceof HTML5History || history instanceof HashHistory) {\n    var handleInitialScroll = function (routeOrError) {\n      var from = history.current;\n      var expectScroll = this$1$1.options.scrollBehavior;\n      var supportsScroll = supportsPushState && expectScroll;\n\n      if (supportsScroll && 'fullPath' in routeOrError) {\n        handleScroll(this$1$1, routeOrError, from, false);\n      }\n    };\n    var setupListeners = function (routeOrError) {\n      history.setupListeners();\n      handleInitialScroll(routeOrError);\n    };\n    history.transitionTo(\n      history.getCurrentLocation(),\n      setupListeners,\n      setupListeners\n    );\n  }\n\n  history.listen(function (route) {\n    this$1$1.apps.forEach(function (app) {\n      app._route = route;\n    });\n  });\n};\n\nVueRouter.prototype.beforeEach = function beforeEach (fn) {\n  return registerHook(this.beforeHooks, fn)\n};\n\nVueRouter.prototype.beforeResolve = function beforeResolve (fn) {\n  return registerHook(this.resolveHooks, fn)\n};\n\nVueRouter.prototype.afterEach = function afterEach (fn) {\n  return registerHook(this.afterHooks, fn)\n};\n\nVueRouter.prototype.onReady = function onReady (cb, errorCb) {\n  this.history.onReady(cb, errorCb);\n};\n\nVueRouter.prototype.onError = function onError (errorCb) {\n  this.history.onError(errorCb);\n};\n\nVueRouter.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1$1 = this;\n\n  // $flow-disable-line\n  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve, reject) {\n      this$1$1.history.push(location, resolve, reject);\n    })\n  } else {\n    this.history.push(location, onComplete, onAbort);\n  }\n};\n\nVueRouter.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1$1 = this;\n\n  // $flow-disable-line\n  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve, reject) {\n      this$1$1.history.replace(location, resolve, reject);\n    })\n  } else {\n    this.history.replace(location, onComplete, onAbort);\n  }\n};\n\nVueRouter.prototype.go = function go (n) {\n  this.history.go(n);\n};\n\nVueRouter.prototype.back = function back () {\n  this.go(-1);\n};\n\nVueRouter.prototype.forward = function forward () {\n  this.go(1);\n};\n\nVueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {\n  var route = to\n    ? to.matched\n      ? to\n      : this.resolve(to).route\n    : this.currentRoute;\n  if (!route) {\n    return []\n  }\n  return [].concat.apply(\n    [],\n    route.matched.map(function (m) {\n      return Object.keys(m.components).map(function (key) {\n        return m.components[key]\n      })\n    })\n  )\n};\n\nVueRouter.prototype.resolve = function resolve (\n  to,\n  current,\n  append\n) {\n  current = current || this.history.current;\n  var location = normalizeLocation(to, current, append, this);\n  var route = this.match(location, current);\n  var fullPath = route.redirectedFrom || route.fullPath;\n  var base = this.history.base;\n  var href = createHref(base, fullPath, this.mode);\n  return {\n    location: location,\n    route: route,\n    href: href,\n    // for backwards compat\n    normalizedTo: location,\n    resolved: route\n  }\n};\n\nVueRouter.prototype.getRoutes = function getRoutes () {\n  return this.matcher.getRoutes()\n};\n\nVueRouter.prototype.addRoute = function addRoute (parentOrRoute, route) {\n  this.matcher.addRoute(parentOrRoute, route);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nVueRouter.prototype.addRoutes = function addRoutes (routes) {\n  if (process.env.NODE_ENV !== 'production') {\n    warn(false, 'router.addRoutes() is deprecated and has been removed in Vue Router 4. Use router.addRoute() instead.');\n  }\n  this.matcher.addRoutes(routes);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nObject.defineProperties( VueRouter.prototype, prototypeAccessors );\n\nvar VueRouter$1 = VueRouter;\n\nfunction registerHook (list, fn) {\n  list.push(fn);\n  return function () {\n    var i = list.indexOf(fn);\n    if (i > -1) { list.splice(i, 1); }\n  }\n}\n\nfunction createHref (base, fullPath, mode) {\n  var path = mode === 'hash' ? '#' + fullPath : fullPath;\n  return base ? cleanPath(base + '/' + path) : path\n}\n\n// We cannot remove this as it would be a breaking change\nVueRouter.install = install;\nVueRouter.version = '3.6.5';\nVueRouter.isNavigationFailure = isNavigationFailure;\nVueRouter.NavigationFailureType = NavigationFailureType;\nVueRouter.START_LOCATION = START;\n\nif (inBrowser && window.Vue) {\n  window.Vue.use(VueRouter);\n}\n\nvar version = '3.6.5';\n\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 15 */
/***/ function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__router__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_ListDog_vue__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_ListDog_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__components_ListDog_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_EditDog_vue__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_EditDog_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__components_EditDog_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_CreateDog_vue__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_CreateDog_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__components_CreateDog_vue__);\n\n\n\n// Importa tus componentes de Vue que usarás en la aplicación\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_0_vue___default.a.component('listdog', __WEBPACK_IMPORTED_MODULE_2__components_ListDog_vue___default.a);\n__WEBPACK_IMPORTED_MODULE_0_vue___default.a.component('editdog', __WEBPACK_IMPORTED_MODULE_3__components_EditDog_vue___default.a);\n__WEBPACK_IMPORTED_MODULE_0_vue___default.a.component('createdog', __WEBPACK_IMPORTED_MODULE_4__components_CreateDog_vue___default.a);\n\nvar app = new __WEBPACK_IMPORTED_MODULE_0_vue___default.a({\n  el: '#app',\n  router: __WEBPACK_IMPORTED_MODULE_1__router__[\"a\" /* default */]\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2Fzc2V0cy9qcy9hcHAuanM/OGI2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgcm91dGVyIGZyb20gJy4vcm91dGVyJztcblxuLy8gSW1wb3J0YSB0dXMgY29tcG9uZW50ZXMgZGUgVnVlIHF1ZSB1c2Fyw6FzIGVuIGxhIGFwbGljYWNpw7NuXG5pbXBvcnQgTGlzdERvZyBmcm9tICcuL2NvbXBvbmVudHMvTGlzdERvZy52dWUnO1xuaW1wb3J0IEVkaXREb2cgZnJvbSAnLi9jb21wb25lbnRzL0VkaXREb2cudnVlJztcbmltcG9ydCBDcmVhdGVEb2cgZnJvbSAnLi9jb21wb25lbnRzL0NyZWF0ZURvZy52dWUnO1xuXG5WdWUuY29tcG9uZW50KCdsaXN0ZG9nJywgTGlzdERvZyk7XG5WdWUuY29tcG9uZW50KCdlZGl0ZG9nJywgRWRpdERvZyk7XG5WdWUuY29tcG9uZW50KCdjcmVhdGVkb2cnLCBDcmVhdGVEb2cpO1xuXG5jb25zdCBhcHAgPSBuZXcgVnVlKHtcbiAgZWw6ICcjYXBwJyxcbiAgcm91dGVyXG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyByZXNvdXJjZXMvYXNzZXRzL2pzL2FwcC5qcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }
/******/ ]);